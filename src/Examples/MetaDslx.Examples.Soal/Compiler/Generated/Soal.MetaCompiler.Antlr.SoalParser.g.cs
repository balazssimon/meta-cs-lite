#pragma warning disable CS3021
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SoalParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Examples.Soal.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SoalParser : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_KNull=1, LR_KTrue=2, LR_KFalse=3, LR_TComma=4, LR_TUtf8Bom=5, LR_KNamespace=6, 
		LR_TSemicolon=7, LR_KUsing=8, LR_KEnum=9, LR_TLBrace=10, LR_TRBrace=11, 
		LR_KStruct=12, LR_KInterface=13, LR_KReadonly=14, LR_KResource=15, LR_KAsync=16, 
		LR_TLParen=17, LR_TRParen=18, LR_KVoid=19, LR_KService=20, LR_TColon=21, 
		LR_KBinding=22, LR_KREST=23, LR_KSOAP=24, LR_TQuestion=25, LR_KObject=26, 
		LR_KBinary=27, LR_KBool=28, LR_KString=29, LR_KInt=30, LR_KLong=31, LR_KFloat=32, 
		LR_KDouble=33, LR_KDate=34, LR_KTime=35, LR_KDatetime=36, LR_KDuration=37, 
		LR_KThrows=38, LR_TLBracket=39, LR_TRBracket=40, LR_TDot=41, LR_TInteger=42, 
		LR_TDecimal=43, LR_TIdentifier=44, LR_TVerbatimIdentifier=45, LR_TString=46, 
		LR_TWhitespace=47, LR_TLineEnd=48, LR_TSingleLineComment=49, LR_TMultiLineComment=50, 
		LR_TInvalidToken=51;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Declaration = 2, RULE_pr_EnumType = 3, 
		RULE_pr_EnumLiteral = 4, RULE_pr_StructType = 5, RULE_pr_Property = 6, 
		RULE_pr_Interface = 7, RULE_pr_Resource = 8, RULE_pr_Operation = 9, RULE_pr_InputParameterList = 10, 
		RULE_pr_OutputParameterList = 11, RULE_pr_Parameter = 12, RULE_pr_SingleReturnParameter = 13, 
		RULE_pr_Service = 14, RULE_pr_BindingKind = 15, RULE_pr_TypeReference = 16, 
		RULE_pr_SimpleType = 17, RULE_pr_Name = 18, RULE_pr_Qualifier = 19, RULE_pr_Identifier = 20, 
		RULE_pr_MainBlock1 = 21, RULE_pr_EnumTypeBlock1 = 22, RULE_pr_EnumTypeBlock1literalsBlock = 23, 
		RULE_pr_StructTypeBlock1 = 24, RULE_pr_ResourceBlock1 = 25, RULE_pr_ResourceBlock1exceptionsBlock = 26, 
		RULE_pr_OperationBlock1 = 27, RULE_pr_OperationBlock1exceptionsBlock = 28, 
		RULE_pr_InputParameterListBlock1 = 29, RULE_pr_InputParameterListBlock1parametersBlock = 30, 
		RULE_pr_OutputParameterListAlt3parametersBlock = 31, RULE_pr_TypeReferenceBlock1 = 32, 
		RULE_pr_QualifierIdentifierBlock = 33;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Declaration", "pr_EnumType", "pr_EnumLiteral", 
		"pr_StructType", "pr_Property", "pr_Interface", "pr_Resource", "pr_Operation", 
		"pr_InputParameterList", "pr_OutputParameterList", "pr_Parameter", "pr_SingleReturnParameter", 
		"pr_Service", "pr_BindingKind", "pr_TypeReference", "pr_SimpleType", "pr_Name", 
		"pr_Qualifier", "pr_Identifier", "pr_MainBlock1", "pr_EnumTypeBlock1", 
		"pr_EnumTypeBlock1literalsBlock", "pr_StructTypeBlock1", "pr_ResourceBlock1", 
		"pr_ResourceBlock1exceptionsBlock", "pr_OperationBlock1", "pr_OperationBlock1exceptionsBlock", 
		"pr_InputParameterListBlock1", "pr_InputParameterListBlock1parametersBlock", 
		"pr_OutputParameterListAlt3parametersBlock", "pr_TypeReferenceBlock1", 
		"pr_QualifierIdentifierBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'true'", "'false'", "','", null, "'namespace'", "';'", 
		"'using'", "'enum'", "'{'", "'}'", "'struct'", "'interface'", "'readonly'", 
		"'resource'", "'async'", "'('", "')'", "'void'", "'service'", "':'", "'binding'", 
		"'REST'", "'SOAP'", "'?'", "'object'", "'binary'", "'bool'", "'string'", 
		"'int'", "'long'", "'float'", "'double'", "'date'", "'time'", "'datetime'", 
		"'duration'", "'throws'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", 
		"LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KEnum", "LR_TLBrace", 
		"LR_TRBrace", "LR_KStruct", "LR_KInterface", "LR_KReadonly", "LR_KResource", 
		"LR_KAsync", "LR_TLParen", "LR_TRParen", "LR_KVoid", "LR_KService", "LR_TColon", 
		"LR_KBinding", "LR_KREST", "LR_KSOAP", "LR_TQuestion", "LR_KObject", "LR_KBinary", 
		"LR_KBool", "LR_KString", "LR_KInt", "LR_KLong", "LR_KFloat", "LR_KDouble", 
		"LR_KDate", "LR_KTime", "LR_KDatetime", "LR_KDuration", "LR_KThrows", 
		"LR_TLBracket", "LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", 
		"LR_TIdentifier", "LR_TVerbatimIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SoalParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SoalParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SoalParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SoalParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken E_KNamespace;
		public Pr_QualifierContext E_Qualifier;
		public IToken E_TSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _E_UsingList = new List<Pr_UsingContext>();
		public Pr_MainBlock1Context E_Block;
		public IToken E_EndOfFileToken;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(SoalParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(SoalParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MainBlock1Context pr_MainBlock1() {
			return GetRuleContext<Pr_MainBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SoalParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			_localctx.E_KNamespace = Match(LR_KNamespace);
			State = 69;
			_localctx.E_Qualifier = pr_Qualifier();
			State = 70;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 71;
				_localctx._pr_Using = pr_Using();
				_localctx._E_UsingList.Add(_localctx._pr_Using);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 77;
			_localctx.E_Block = pr_MainBlock1();
			State = 78;
			_localctx.E_EndOfFileToken = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken E_KUsing;
		public Pr_QualifierContext E_namespaces;
		public IToken E_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(SoalParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(SoalParser.LR_TSemicolon, 0); }
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			_localctx.E_KUsing = Match(LR_KUsing);
			State = 81;
			_localctx.E_namespaces = pr_Qualifier();
			State = 82;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_DeclarationContext : ParserRuleContext {
		public Pr_DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Declaration; } }
	 
		public Pr_DeclarationContext() { }
		public virtual void CopyFrom(Pr_DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_DeclarationAlt3Context : Pr_DeclarationContext {
		public Pr_InterfaceContext E_Interface;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_InterfaceContext pr_Interface() {
			return GetRuleContext<Pr_InterfaceContext>(0);
		}
		public Pr_DeclarationAlt3Context(Pr_DeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_DeclarationAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_DeclarationAlt2Context : Pr_DeclarationContext {
		public Pr_StructTypeContext E_StructType;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_StructTypeContext pr_StructType() {
			return GetRuleContext<Pr_StructTypeContext>(0);
		}
		public Pr_DeclarationAlt2Context(Pr_DeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_DeclarationAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_DeclarationAlt1Context : Pr_DeclarationContext {
		public Pr_EnumTypeContext E_EnumType;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumTypeContext pr_EnumType() {
			return GetRuleContext<Pr_EnumTypeContext>(0);
		}
		public Pr_DeclarationAlt1Context(Pr_DeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_DeclarationAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_DeclarationAlt4Context : Pr_DeclarationContext {
		public Pr_ServiceContext E_Service;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ServiceContext pr_Service() {
			return GetRuleContext<Pr_ServiceContext>(0);
		}
		public Pr_DeclarationAlt4Context(Pr_DeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_DeclarationAlt4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_DeclarationContext pr_Declaration() {
		Pr_DeclarationContext _localctx = new Pr_DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Declaration);
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KEnum:
				_localctx = new Pr_DeclarationAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				((Pr_DeclarationAlt1Context)_localctx).E_EnumType = pr_EnumType();
				}
				break;
			case LR_KStruct:
				_localctx = new Pr_DeclarationAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				((Pr_DeclarationAlt2Context)_localctx).E_StructType = pr_StructType();
				}
				break;
			case LR_KInterface:
				_localctx = new Pr_DeclarationAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 86;
				((Pr_DeclarationAlt3Context)_localctx).E_Interface = pr_Interface();
				}
				break;
			case LR_KService:
				_localctx = new Pr_DeclarationAlt4Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 87;
				((Pr_DeclarationAlt4Context)_localctx).E_Service = pr_Service();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumTypeContext : ParserRuleContext {
		public IToken E_KEnum;
		public Pr_NameContext E_Name;
		public IToken E_TLBrace;
		public Pr_EnumTypeBlock1Context E_Block;
		public IToken E_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KEnum() { return GetToken(SoalParser.LR_KEnum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(SoalParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(SoalParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumTypeBlock1Context pr_EnumTypeBlock1() {
			return GetRuleContext<Pr_EnumTypeBlock1Context>(0);
		}
		public Pr_EnumTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumTypeContext pr_EnumType() {
		Pr_EnumTypeContext _localctx = new Pr_EnumTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_EnumType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			_localctx.E_KEnum = Match(LR_KEnum);
			State = 91;
			_localctx.E_Name = pr_Name();
			State = 92;
			_localctx.E_TLBrace = Match(LR_TLBrace);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) {
				{
				State = 93;
				_localctx.E_Block = pr_EnumTypeBlock1();
				}
			}

			State = 96;
			_localctx.E_TRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumLiteralContext : ParserRuleContext {
		public Pr_NameContext E_Name;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_EnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumLiteralContext pr_EnumLiteral() {
		Pr_EnumLiteralContext _localctx = new Pr_EnumLiteralContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_EnumLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_localctx.E_Name = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_StructTypeContext : ParserRuleContext {
		public IToken E_KStruct;
		public Pr_NameContext E_Name;
		public Pr_StructTypeBlock1Context E_Block;
		public IToken E_TLBrace;
		public Pr_PropertyContext _pr_Property;
		public IList<Pr_PropertyContext> _E_fields = new List<Pr_PropertyContext>();
		public IToken E_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KStruct() { return GetToken(SoalParser.LR_KStruct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(SoalParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(SoalParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_StructTypeBlock1Context pr_StructTypeBlock1() {
			return GetRuleContext<Pr_StructTypeBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyContext[] pr_Property() {
			return GetRuleContexts<Pr_PropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyContext pr_Property(int i) {
			return GetRuleContext<Pr_PropertyContext>(i);
		}
		public Pr_StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_StructType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_StructType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_StructTypeContext pr_StructType() {
		Pr_StructTypeContext _localctx = new Pr_StructTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_StructType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_localctx.E_KStruct = Match(LR_KStruct);
			State = 101;
			_localctx.E_Name = pr_Name();
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TColon) {
				{
				State = 102;
				_localctx.E_Block = pr_StructTypeBlock1();
				}
			}

			State = 105;
			_localctx.E_TLBrace = Match(LR_TLBrace);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53051368931328L) != 0)) {
				{
				{
				State = 106;
				_localctx._pr_Property = pr_Property();
				_localctx._E_fields.Add(_localctx._pr_Property);
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112;
			_localctx.E_TRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyContext : ParserRuleContext {
		public Pr_TypeReferenceContext E_type;
		public Pr_NameContext E_Name;
		public IToken E_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(SoalParser.LR_TSemicolon, 0); }
		public Pr_PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyContext pr_Property() {
		Pr_PropertyContext _localctx = new Pr_PropertyContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_Property);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_localctx.E_type = pr_TypeReference();
			State = 115;
			_localctx.E_Name = pr_Name();
			State = 116;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_InterfaceContext : ParserRuleContext {
		public IToken E_KInterface;
		public Pr_NameContext E_Name;
		public IToken E_TLBrace;
		public Pr_ResourceContext _pr_Resource;
		public IList<Pr_ResourceContext> _E_resources = new List<Pr_ResourceContext>();
		public Pr_OperationContext _pr_Operation;
		public IList<Pr_OperationContext> _E_operations = new List<Pr_OperationContext>();
		public IToken E_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KInterface() { return GetToken(SoalParser.LR_KInterface, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(SoalParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(SoalParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ResourceContext[] pr_Resource() {
			return GetRuleContexts<Pr_ResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ResourceContext pr_Resource(int i) {
			return GetRuleContext<Pr_ResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_OperationContext[] pr_Operation() {
			return GetRuleContexts<Pr_OperationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_OperationContext pr_Operation(int i) {
			return GetRuleContext<Pr_OperationContext>(i);
		}
		public Pr_InterfaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Interface; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Interface(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_InterfaceContext pr_Interface() {
		Pr_InterfaceContext _localctx = new Pr_InterfaceContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_Interface);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_localctx.E_KInterface = Match(LR_KInterface);
			State = 119;
			_localctx.E_Name = pr_Name();
			State = 120;
			_localctx.E_TLBrace = Match(LR_TLBrace);
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KReadonly || _la==LR_KResource) {
				{
				{
				State = 121;
				_localctx._pr_Resource = pr_Resource();
				_localctx._E_resources.Add(_localctx._pr_Resource);
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53051369652224L) != 0)) {
				{
				{
				State = 127;
				_localctx._pr_Operation = pr_Operation();
				_localctx._E_operations.Add(_localctx._pr_Operation);
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 133;
			_localctx.E_TRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ResourceContext : ParserRuleContext {
		public IToken E_isReadOnly;
		public IToken E_KResource;
		public Pr_QualifierContext E_entity;
		public Pr_ResourceBlock1Context E_Block;
		public IToken E_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KResource() { return GetToken(SoalParser.LR_KResource, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(SoalParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReadonly() { return GetToken(SoalParser.LR_KReadonly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ResourceBlock1Context pr_ResourceBlock1() {
			return GetRuleContext<Pr_ResourceBlock1Context>(0);
		}
		public Pr_ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Resource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ResourceContext pr_Resource() {
		Pr_ResourceContext _localctx = new Pr_ResourceContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_Resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KReadonly) {
				{
				State = 135;
				_localctx.E_isReadOnly = Match(LR_KReadonly);
				}
			}

			State = 138;
			_localctx.E_KResource = Match(LR_KResource);
			State = 139;
			_localctx.E_entity = pr_Qualifier();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KThrows) {
				{
				State = 140;
				_localctx.E_Block = pr_ResourceBlock1();
				}
			}

			State = 143;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_OperationContext : ParserRuleContext {
		public IToken E_isAsync;
		public Pr_OutputParameterListContext E_responseParameters;
		public Pr_NameContext E_Name;
		public Pr_InputParameterListContext E_requestParameters;
		public Pr_OperationBlock1Context E_Block;
		public IToken E_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_OutputParameterListContext pr_OutputParameterList() {
			return GetRuleContext<Pr_OutputParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_InputParameterListContext pr_InputParameterList() {
			return GetRuleContext<Pr_InputParameterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(SoalParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAsync() { return GetToken(SoalParser.LR_KAsync, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_OperationBlock1Context pr_OperationBlock1() {
			return GetRuleContext<Pr_OperationBlock1Context>(0);
		}
		public Pr_OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Operation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Operation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_OperationContext pr_Operation() {
		Pr_OperationContext _localctx = new Pr_OperationContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_Operation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KAsync) {
				{
				State = 145;
				_localctx.E_isAsync = Match(LR_KAsync);
				}
			}

			State = 148;
			_localctx.E_responseParameters = pr_OutputParameterList();
			State = 149;
			_localctx.E_Name = pr_Name();
			State = 150;
			_localctx.E_requestParameters = pr_InputParameterList();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KThrows) {
				{
				State = 151;
				_localctx.E_Block = pr_OperationBlock1();
				}
			}

			State = 154;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_InputParameterListContext : ParserRuleContext {
		public IToken E_TLParen;
		public Pr_InputParameterListBlock1Context E_Block;
		public IToken E_TRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(SoalParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(SoalParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_InputParameterListBlock1Context pr_InputParameterListBlock1() {
			return GetRuleContext<Pr_InputParameterListBlock1Context>(0);
		}
		public Pr_InputParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_InputParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_InputParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_InputParameterListContext pr_InputParameterList() {
		Pr_InputParameterListContext _localctx = new Pr_InputParameterListContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_InputParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			_localctx.E_TLParen = Match(LR_TLParen);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 53051368931328L) != 0)) {
				{
				State = 157;
				_localctx.E_Block = pr_InputParameterListBlock1();
				}
			}

			State = 160;
			_localctx.E_TRParen = Match(LR_TRParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_OutputParameterListContext : ParserRuleContext {
		public Pr_OutputParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_OutputParameterList; } }
	 
		public Pr_OutputParameterListContext() { }
		public virtual void CopyFrom(Pr_OutputParameterListContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_OutputParameterListAlt1Context : Pr_OutputParameterListContext {
		public IToken E_KVoid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KVoid() { return GetToken(SoalParser.LR_KVoid, 0); }
		public Pr_OutputParameterListAlt1Context(Pr_OutputParameterListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OutputParameterListAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_OutputParameterListAlt3Context : Pr_OutputParameterListContext {
		public IToken E_TLParen;
		public Pr_ParameterContext E_parameters1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_ParameterContext _pr_Parameter;
		public IList<Pr_ParameterContext> _E_parameters2 = new List<Pr_ParameterContext>();
		public IToken E_TRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(SoalParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterContext[] pr_Parameter() {
			return GetRuleContexts<Pr_ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterContext pr_Parameter(int i) {
			return GetRuleContext<Pr_ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(SoalParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(SoalParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(SoalParser.LR_TComma, i);
		}
		public Pr_OutputParameterListAlt3Context(Pr_OutputParameterListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OutputParameterListAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_OutputParameterListAlt2Context : Pr_OutputParameterListContext {
		public Pr_SingleReturnParameterContext E_parameters;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleReturnParameterContext pr_SingleReturnParameter() {
			return GetRuleContext<Pr_SingleReturnParameterContext>(0);
		}
		public Pr_OutputParameterListAlt2Context(Pr_OutputParameterListContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OutputParameterListAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_OutputParameterListContext pr_OutputParameterList() {
		Pr_OutputParameterListContext _localctx = new Pr_OutputParameterListContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_OutputParameterList);
		int _la;
		try {
			State = 175;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KVoid:
				_localctx = new Pr_OutputParameterListAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 162;
				((Pr_OutputParameterListAlt1Context)_localctx).E_KVoid = Match(LR_KVoid);
				}
				break;
			case LR_KObject:
			case LR_KBinary:
			case LR_KBool:
			case LR_KString:
			case LR_KInt:
			case LR_KLong:
			case LR_KFloat:
			case LR_KDouble:
			case LR_KDate:
			case LR_KTime:
			case LR_KDatetime:
			case LR_KDuration:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_OutputParameterListAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				((Pr_OutputParameterListAlt2Context)_localctx).E_parameters = pr_SingleReturnParameter();
				}
				break;
			case LR_TLParen:
				_localctx = new Pr_OutputParameterListAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				((Pr_OutputParameterListAlt3Context)_localctx).E_TLParen = Match(LR_TLParen);
				State = 165;
				((Pr_OutputParameterListAlt3Context)_localctx).E_parameters1 = pr_Parameter();
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 166;
					((Pr_OutputParameterListAlt3Context)_localctx)._LR_TComma = Match(LR_TComma);
					((Pr_OutputParameterListAlt3Context)_localctx)._E_TComma1.Add(((Pr_OutputParameterListAlt3Context)_localctx)._LR_TComma);
					State = 167;
					((Pr_OutputParameterListAlt3Context)_localctx)._pr_Parameter = pr_Parameter();
					((Pr_OutputParameterListAlt3Context)_localctx)._E_parameters2.Add(((Pr_OutputParameterListAlt3Context)_localctx)._pr_Parameter);
					}
					}
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 173;
				((Pr_OutputParameterListAlt3Context)_localctx).E_TRParen = Match(LR_TRParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParameterContext : ParserRuleContext {
		public Pr_TypeReferenceContext E_type;
		public Pr_NameContext E_Name;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParameterContext pr_Parameter() {
		Pr_ParameterContext _localctx = new Pr_ParameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_Parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_localctx.E_type = pr_TypeReference();
			State = 178;
			_localctx.E_Name = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SingleReturnParameterContext : ParserRuleContext {
		public Pr_TypeReferenceContext E_type;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		public Pr_SingleReturnParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SingleReturnParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SingleReturnParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SingleReturnParameterContext pr_SingleReturnParameter() {
		Pr_SingleReturnParameterContext _localctx = new Pr_SingleReturnParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_SingleReturnParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_localctx.E_type = pr_TypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ServiceContext : ParserRuleContext {
		public IToken E_KService;
		public Pr_NameContext E_Name;
		public IToken E_TColon;
		public Pr_QualifierContext E_interface;
		public IToken E_TLBrace;
		public IToken E_KBinding;
		public Pr_BindingKindContext E_binding;
		public IToken E_TSemicolon;
		public IToken E_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KService() { return GetToken(SoalParser.LR_KService, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(SoalParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(SoalParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBinding() { return GetToken(SoalParser.LR_KBinding, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BindingKindContext pr_BindingKind() {
			return GetRuleContext<Pr_BindingKindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(SoalParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(SoalParser.LR_TRBrace, 0); }
		public Pr_ServiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Service; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Service(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ServiceContext pr_Service() {
		Pr_ServiceContext _localctx = new Pr_ServiceContext(Context, State);
		EnterRule(_localctx, 28, RULE_pr_Service);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			_localctx.E_KService = Match(LR_KService);
			State = 183;
			_localctx.E_Name = pr_Name();
			State = 184;
			_localctx.E_TColon = Match(LR_TColon);
			State = 185;
			_localctx.E_interface = pr_Qualifier();
			State = 186;
			_localctx.E_TLBrace = Match(LR_TLBrace);
			State = 187;
			_localctx.E_KBinding = Match(LR_KBinding);
			State = 188;
			_localctx.E_binding = pr_BindingKind();
			State = 189;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			State = 190;
			_localctx.E_TRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BindingKindContext : ParserRuleContext {
		public IToken E_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KREST() { return GetToken(SoalParser.LR_KREST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSOAP() { return GetToken(SoalParser.LR_KSOAP, 0); }
		public Pr_BindingKindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BindingKind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BindingKind(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BindingKindContext pr_BindingKind() {
		Pr_BindingKindContext _localctx = new Pr_BindingKindContext(Context, State);
		EnterRule(_localctx, 30, RULE_pr_BindingKind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_localctx.E_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LR_KREST || _la==LR_KSOAP) ) {
				_localctx.E_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TypeReferenceContext : ParserRuleContext {
		public Pr_SimpleTypeContext E_type;
		public IToken E_isNullable;
		public Pr_TypeReferenceBlock1Context E_isArray;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleTypeContext pr_SimpleType() {
			return GetRuleContext<Pr_SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(SoalParser.LR_TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceBlock1Context pr_TypeReferenceBlock1() {
			return GetRuleContext<Pr_TypeReferenceBlock1Context>(0);
		}
		public Pr_TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TypeReferenceContext pr_TypeReference() {
		Pr_TypeReferenceContext _localctx = new Pr_TypeReferenceContext(Context, State);
		EnterRule(_localctx, 32, RULE_pr_TypeReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			_localctx.E_type = pr_SimpleType();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TQuestion) {
				{
				State = 195;
				_localctx.E_isNullable = Match(LR_TQuestion);
				}
			}

			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLBracket) {
				{
				State = 198;
				_localctx.E_isArray = pr_TypeReferenceBlock1();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SimpleTypeContext : ParserRuleContext {
		public Pr_SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SimpleType; } }
	 
		public Pr_SimpleTypeContext() { }
		public virtual void CopyFrom(Pr_SimpleTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_SimpleTypeAlt11Context : Pr_SimpleTypeContext {
		public IToken E_KDatetime;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDatetime() { return GetToken(SoalParser.LR_KDatetime, 0); }
		public Pr_SimpleTypeAlt11Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt11(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt12Context : Pr_SimpleTypeContext {
		public IToken E_KDuration;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDuration() { return GetToken(SoalParser.LR_KDuration, 0); }
		public Pr_SimpleTypeAlt12Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt12(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt13Context : Pr_SimpleTypeContext {
		public Pr_QualifierContext E_Qualifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_SimpleTypeAlt13Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt13(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt7Context : Pr_SimpleTypeContext {
		public IToken E_KFloat;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFloat() { return GetToken(SoalParser.LR_KFloat, 0); }
		public Pr_SimpleTypeAlt7Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt7(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt6Context : Pr_SimpleTypeContext {
		public IToken E_KLong;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KLong() { return GetToken(SoalParser.LR_KLong, 0); }
		public Pr_SimpleTypeAlt6Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt6(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt5Context : Pr_SimpleTypeContext {
		public IToken E_KInt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KInt() { return GetToken(SoalParser.LR_KInt, 0); }
		public Pr_SimpleTypeAlt5Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt4Context : Pr_SimpleTypeContext {
		public IToken E_KString;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KString() { return GetToken(SoalParser.LR_KString, 0); }
		public Pr_SimpleTypeAlt4Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt3Context : Pr_SimpleTypeContext {
		public IToken E_KBool;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBool() { return GetToken(SoalParser.LR_KBool, 0); }
		public Pr_SimpleTypeAlt3Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt2Context : Pr_SimpleTypeContext {
		public IToken E_KBinary;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBinary() { return GetToken(SoalParser.LR_KBinary, 0); }
		public Pr_SimpleTypeAlt2Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt1Context : Pr_SimpleTypeContext {
		public IToken E_KObject;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KObject() { return GetToken(SoalParser.LR_KObject, 0); }
		public Pr_SimpleTypeAlt1Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt10Context : Pr_SimpleTypeContext {
		public IToken E_KTime;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KTime() { return GetToken(SoalParser.LR_KTime, 0); }
		public Pr_SimpleTypeAlt10Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt10(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt9Context : Pr_SimpleTypeContext {
		public IToken E_KDate;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDate() { return GetToken(SoalParser.LR_KDate, 0); }
		public Pr_SimpleTypeAlt9Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt9(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeAlt8Context : Pr_SimpleTypeContext {
		public IToken E_KDouble;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDouble() { return GetToken(SoalParser.LR_KDouble, 0); }
		public Pr_SimpleTypeAlt8Context(Pr_SimpleTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeAlt8(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SimpleTypeContext pr_SimpleType() {
		Pr_SimpleTypeContext _localctx = new Pr_SimpleTypeContext(Context, State);
		EnterRule(_localctx, 34, RULE_pr_SimpleType);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KObject:
				_localctx = new Pr_SimpleTypeAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				((Pr_SimpleTypeAlt1Context)_localctx).E_KObject = Match(LR_KObject);
				}
				break;
			case LR_KBinary:
				_localctx = new Pr_SimpleTypeAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				((Pr_SimpleTypeAlt2Context)_localctx).E_KBinary = Match(LR_KBinary);
				}
				break;
			case LR_KBool:
				_localctx = new Pr_SimpleTypeAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 203;
				((Pr_SimpleTypeAlt3Context)_localctx).E_KBool = Match(LR_KBool);
				}
				break;
			case LR_KString:
				_localctx = new Pr_SimpleTypeAlt4Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 204;
				((Pr_SimpleTypeAlt4Context)_localctx).E_KString = Match(LR_KString);
				}
				break;
			case LR_KInt:
				_localctx = new Pr_SimpleTypeAlt5Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 205;
				((Pr_SimpleTypeAlt5Context)_localctx).E_KInt = Match(LR_KInt);
				}
				break;
			case LR_KLong:
				_localctx = new Pr_SimpleTypeAlt6Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 206;
				((Pr_SimpleTypeAlt6Context)_localctx).E_KLong = Match(LR_KLong);
				}
				break;
			case LR_KFloat:
				_localctx = new Pr_SimpleTypeAlt7Context(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 207;
				((Pr_SimpleTypeAlt7Context)_localctx).E_KFloat = Match(LR_KFloat);
				}
				break;
			case LR_KDouble:
				_localctx = new Pr_SimpleTypeAlt8Context(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 208;
				((Pr_SimpleTypeAlt8Context)_localctx).E_KDouble = Match(LR_KDouble);
				}
				break;
			case LR_KDate:
				_localctx = new Pr_SimpleTypeAlt9Context(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 209;
				((Pr_SimpleTypeAlt9Context)_localctx).E_KDate = Match(LR_KDate);
				}
				break;
			case LR_KTime:
				_localctx = new Pr_SimpleTypeAlt10Context(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 210;
				((Pr_SimpleTypeAlt10Context)_localctx).E_KTime = Match(LR_KTime);
				}
				break;
			case LR_KDatetime:
				_localctx = new Pr_SimpleTypeAlt11Context(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 211;
				((Pr_SimpleTypeAlt11Context)_localctx).E_KDatetime = Match(LR_KDatetime);
				}
				break;
			case LR_KDuration:
				_localctx = new Pr_SimpleTypeAlt12Context(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 212;
				((Pr_SimpleTypeAlt12Context)_localctx).E_KDuration = Match(LR_KDuration);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_SimpleTypeAlt13Context(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 213;
				((Pr_SimpleTypeAlt13Context)_localctx).E_Qualifier = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext E_Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 36, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_localctx.E_Identifier = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext E_Identifier1;
		public IToken _LR_TDot;
		public IList<IToken> _E_TDot1 = new List<IToken>();
		public Pr_IdentifierContext _pr_Identifier;
		public IList<Pr_IdentifierContext> _E_Identifier2 = new List<Pr_IdentifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext[] pr_Identifier() {
			return GetRuleContexts<Pr_IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier(int i) {
			return GetRuleContext<Pr_IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TDot() { return GetTokens(SoalParser.LR_TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot(int i) {
			return GetToken(SoalParser.LR_TDot, i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_pr_Qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_localctx.E_Identifier1 = pr_Identifier();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TDot) {
				{
				{
				State = 219;
				_localctx._LR_TDot = Match(LR_TDot);
				_localctx._E_TDot1.Add(_localctx._LR_TDot);
				State = 220;
				_localctx._pr_Identifier = pr_Identifier();
				_localctx._E_Identifier2.Add(_localctx._pr_Identifier);
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public IToken E_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(SoalParser.LR_TIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TVerbatimIdentifier() { return GetToken(SoalParser.LR_TVerbatimIdentifier, 0); }
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_pr_Identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226;
			_localctx.E_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) ) {
				_localctx.E_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MainBlock1Context : ParserRuleContext {
		public Pr_DeclarationContext _pr_Declaration;
		public IList<Pr_DeclarationContext> _E_DeclarationList = new List<Pr_DeclarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationContext[] pr_Declaration() {
			return GetRuleContexts<Pr_DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationContext pr_Declaration(int i) {
			return GetRuleContext<Pr_DeclarationContext>(i);
		}
		public Pr_MainBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MainBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MainBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainBlock1Context pr_MainBlock1() {
		Pr_MainBlock1Context _localctx = new Pr_MainBlock1Context(Context, State);
		EnterRule(_localctx, 42, RULE_pr_MainBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1061376L) != 0)) {
				{
				{
				State = 228;
				_localctx._pr_Declaration = pr_Declaration();
				_localctx._E_DeclarationList.Add(_localctx._pr_Declaration);
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumTypeBlock1Context : ParserRuleContext {
		public Pr_EnumLiteralContext E_literals1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_EnumLiteralContext _pr_EnumLiteral;
		public IList<Pr_EnumLiteralContext> _E_literals2 = new List<Pr_EnumLiteralContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumLiteralContext[] pr_EnumLiteral() {
			return GetRuleContexts<Pr_EnumLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumLiteralContext pr_EnumLiteral(int i) {
			return GetRuleContext<Pr_EnumLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(SoalParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(SoalParser.LR_TComma, i);
		}
		public Pr_EnumTypeBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumTypeBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumTypeBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumTypeBlock1Context pr_EnumTypeBlock1() {
		Pr_EnumTypeBlock1Context _localctx = new Pr_EnumTypeBlock1Context(Context, State);
		EnterRule(_localctx, 44, RULE_pr_EnumTypeBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			_localctx.E_literals1 = pr_EnumLiteral();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 235;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._E_TComma1.Add(_localctx._LR_TComma);
				State = 236;
				_localctx._pr_EnumLiteral = pr_EnumLiteral();
				_localctx._E_literals2.Add(_localctx._pr_EnumLiteral);
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumTypeBlock1literalsBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_EnumLiteralContext E_literals2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(SoalParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumLiteralContext pr_EnumLiteral() {
			return GetRuleContext<Pr_EnumLiteralContext>(0);
		}
		public Pr_EnumTypeBlock1literalsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumTypeBlock1literalsBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumTypeBlock1literalsBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumTypeBlock1literalsBlockContext pr_EnumTypeBlock1literalsBlock() {
		Pr_EnumTypeBlock1literalsBlockContext _localctx = new Pr_EnumTypeBlock1literalsBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_pr_EnumTypeBlock1literalsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 243;
			_localctx.E_literals2 = pr_EnumLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_StructTypeBlock1Context : ParserRuleContext {
		public IToken E_TColon;
		public Pr_QualifierContext E_baseType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(SoalParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_StructTypeBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_StructTypeBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_StructTypeBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_StructTypeBlock1Context pr_StructTypeBlock1() {
		Pr_StructTypeBlock1Context _localctx = new Pr_StructTypeBlock1Context(Context, State);
		EnterRule(_localctx, 48, RULE_pr_StructTypeBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_localctx.E_TColon = Match(LR_TColon);
			State = 246;
			_localctx.E_baseType = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ResourceBlock1Context : ParserRuleContext {
		public IToken E_KThrows;
		public Pr_QualifierContext E_exceptions1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _E_exceptions2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KThrows() { return GetToken(SoalParser.LR_KThrows, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(SoalParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(SoalParser.LR_TComma, i);
		}
		public Pr_ResourceBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ResourceBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ResourceBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ResourceBlock1Context pr_ResourceBlock1() {
		Pr_ResourceBlock1Context _localctx = new Pr_ResourceBlock1Context(Context, State);
		EnterRule(_localctx, 50, RULE_pr_ResourceBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_localctx.E_KThrows = Match(LR_KThrows);
			State = 249;
			_localctx.E_exceptions1 = pr_Qualifier();
			State = 254;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 250;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._E_TComma1.Add(_localctx._LR_TComma);
				State = 251;
				_localctx._pr_Qualifier = pr_Qualifier();
				_localctx._E_exceptions2.Add(_localctx._pr_Qualifier);
				}
				}
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ResourceBlock1exceptionsBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_QualifierContext E_exceptions2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(SoalParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ResourceBlock1exceptionsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ResourceBlock1exceptionsBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ResourceBlock1exceptionsBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ResourceBlock1exceptionsBlockContext pr_ResourceBlock1exceptionsBlock() {
		Pr_ResourceBlock1exceptionsBlockContext _localctx = new Pr_ResourceBlock1exceptionsBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_pr_ResourceBlock1exceptionsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 258;
			_localctx.E_exceptions2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_OperationBlock1Context : ParserRuleContext {
		public IToken E_KThrows;
		public Pr_QualifierContext E_exceptions1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _E_exceptions2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KThrows() { return GetToken(SoalParser.LR_KThrows, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(SoalParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(SoalParser.LR_TComma, i);
		}
		public Pr_OperationBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_OperationBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OperationBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_OperationBlock1Context pr_OperationBlock1() {
		Pr_OperationBlock1Context _localctx = new Pr_OperationBlock1Context(Context, State);
		EnterRule(_localctx, 54, RULE_pr_OperationBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			_localctx.E_KThrows = Match(LR_KThrows);
			State = 261;
			_localctx.E_exceptions1 = pr_Qualifier();
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 262;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._E_TComma1.Add(_localctx._LR_TComma);
				State = 263;
				_localctx._pr_Qualifier = pr_Qualifier();
				_localctx._E_exceptions2.Add(_localctx._pr_Qualifier);
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_OperationBlock1exceptionsBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_QualifierContext E_exceptions2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(SoalParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_OperationBlock1exceptionsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_OperationBlock1exceptionsBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OperationBlock1exceptionsBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_OperationBlock1exceptionsBlockContext pr_OperationBlock1exceptionsBlock() {
		Pr_OperationBlock1exceptionsBlockContext _localctx = new Pr_OperationBlock1exceptionsBlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_pr_OperationBlock1exceptionsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 270;
			_localctx.E_exceptions2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_InputParameterListBlock1Context : ParserRuleContext {
		public Pr_ParameterContext E_parameters1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_ParameterContext _pr_Parameter;
		public IList<Pr_ParameterContext> _E_parameters2 = new List<Pr_ParameterContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterContext[] pr_Parameter() {
			return GetRuleContexts<Pr_ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterContext pr_Parameter(int i) {
			return GetRuleContext<Pr_ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(SoalParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(SoalParser.LR_TComma, i);
		}
		public Pr_InputParameterListBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_InputParameterListBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_InputParameterListBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_InputParameterListBlock1Context pr_InputParameterListBlock1() {
		Pr_InputParameterListBlock1Context _localctx = new Pr_InputParameterListBlock1Context(Context, State);
		EnterRule(_localctx, 58, RULE_pr_InputParameterListBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			_localctx.E_parameters1 = pr_Parameter();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 273;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._E_TComma1.Add(_localctx._LR_TComma);
				State = 274;
				_localctx._pr_Parameter = pr_Parameter();
				_localctx._E_parameters2.Add(_localctx._pr_Parameter);
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_InputParameterListBlock1parametersBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_ParameterContext E_parameters2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(SoalParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterContext pr_Parameter() {
			return GetRuleContext<Pr_ParameterContext>(0);
		}
		public Pr_InputParameterListBlock1parametersBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_InputParameterListBlock1parametersBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_InputParameterListBlock1parametersBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_InputParameterListBlock1parametersBlockContext pr_InputParameterListBlock1parametersBlock() {
		Pr_InputParameterListBlock1parametersBlockContext _localctx = new Pr_InputParameterListBlock1parametersBlockContext(Context, State);
		EnterRule(_localctx, 60, RULE_pr_InputParameterListBlock1parametersBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 281;
			_localctx.E_parameters2 = pr_Parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_OutputParameterListAlt3parametersBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_ParameterContext E_parameters2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(SoalParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterContext pr_Parameter() {
			return GetRuleContext<Pr_ParameterContext>(0);
		}
		public Pr_OutputParameterListAlt3parametersBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_OutputParameterListAlt3parametersBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OutputParameterListAlt3parametersBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_OutputParameterListAlt3parametersBlockContext pr_OutputParameterListAlt3parametersBlock() {
		Pr_OutputParameterListAlt3parametersBlockContext _localctx = new Pr_OutputParameterListAlt3parametersBlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_pr_OutputParameterListAlt3parametersBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 284;
			_localctx.E_parameters2 = pr_Parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TypeReferenceBlock1Context : ParserRuleContext {
		public IToken E_TLBracket;
		public IToken E_TRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(SoalParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(SoalParser.LR_TRBracket, 0); }
		public Pr_TypeReferenceBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TypeReferenceBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReferenceBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TypeReferenceBlock1Context pr_TypeReferenceBlock1() {
		Pr_TypeReferenceBlock1Context _localctx = new Pr_TypeReferenceBlock1Context(Context, State);
		EnterRule(_localctx, 64, RULE_pr_TypeReferenceBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			_localctx.E_TLBracket = Match(LR_TLBracket);
			State = 287;
			_localctx.E_TRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierIdentifierBlockContext : ParserRuleContext {
		public IToken E_TDot1;
		public Pr_IdentifierContext E_Identifier2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(SoalParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierIdentifierBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierIdentifierBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISoalParserVisitor<TResult> typedVisitor = visitor as ISoalParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierIdentifierBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierIdentifierBlockContext pr_QualifierIdentifierBlock() {
		Pr_QualifierIdentifierBlockContext _localctx = new Pr_QualifierIdentifierBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_pr_QualifierIdentifierBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			_localctx.E_TDot1 = Match(LR_TDot);
			State = 290;
			_localctx.E_Identifier2 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,293,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,0,1,0,5,0,
		73,8,0,10,0,12,0,76,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,3,
		2,89,8,2,1,3,1,3,1,3,1,3,3,3,95,8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,3,5,104,
		8,5,1,5,1,5,5,5,108,8,5,10,5,12,5,111,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,
		1,7,1,7,1,7,5,7,123,8,7,10,7,12,7,126,9,7,1,7,5,7,129,8,7,10,7,12,7,132,
		9,7,1,7,1,7,1,8,3,8,137,8,8,1,8,1,8,1,8,3,8,142,8,8,1,8,1,8,1,9,3,9,147,
		8,9,1,9,1,9,1,9,1,9,3,9,153,8,9,1,9,1,9,1,10,1,10,3,10,159,8,10,1,10,1,
		10,1,11,1,11,1,11,1,11,1,11,1,11,5,11,169,8,11,10,11,12,11,172,9,11,1,
		11,1,11,3,11,176,8,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,3,16,197,8,16,1,16,3,16,200,
		8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		3,17,215,8,17,1,18,1,18,1,19,1,19,1,19,5,19,222,8,19,10,19,12,19,225,9,
		19,1,20,1,20,1,21,5,21,230,8,21,10,21,12,21,233,9,21,1,22,1,22,1,22,5,
		22,238,8,22,10,22,12,22,241,9,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,
		25,1,25,1,25,5,25,253,8,25,10,25,12,25,256,9,25,1,26,1,26,1,26,1,27,1,
		27,1,27,1,27,5,27,265,8,27,10,27,12,27,268,9,27,1,28,1,28,1,28,1,29,1,
		29,1,29,5,29,276,8,29,10,29,12,29,279,9,29,1,30,1,30,1,30,1,31,1,31,1,
		31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,0,0,34,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		0,2,1,0,23,24,1,0,44,45,295,0,68,1,0,0,0,2,80,1,0,0,0,4,88,1,0,0,0,6,90,
		1,0,0,0,8,98,1,0,0,0,10,100,1,0,0,0,12,114,1,0,0,0,14,118,1,0,0,0,16,136,
		1,0,0,0,18,146,1,0,0,0,20,156,1,0,0,0,22,175,1,0,0,0,24,177,1,0,0,0,26,
		180,1,0,0,0,28,182,1,0,0,0,30,192,1,0,0,0,32,194,1,0,0,0,34,214,1,0,0,
		0,36,216,1,0,0,0,38,218,1,0,0,0,40,226,1,0,0,0,42,231,1,0,0,0,44,234,1,
		0,0,0,46,242,1,0,0,0,48,245,1,0,0,0,50,248,1,0,0,0,52,257,1,0,0,0,54,260,
		1,0,0,0,56,269,1,0,0,0,58,272,1,0,0,0,60,280,1,0,0,0,62,283,1,0,0,0,64,
		286,1,0,0,0,66,289,1,0,0,0,68,69,5,6,0,0,69,70,3,38,19,0,70,74,5,7,0,0,
		71,73,3,2,1,0,72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,
		75,77,1,0,0,0,76,74,1,0,0,0,77,78,3,42,21,0,78,79,5,0,0,1,79,1,1,0,0,0,
		80,81,5,8,0,0,81,82,3,38,19,0,82,83,5,7,0,0,83,3,1,0,0,0,84,89,3,6,3,0,
		85,89,3,10,5,0,86,89,3,14,7,0,87,89,3,28,14,0,88,84,1,0,0,0,88,85,1,0,
		0,0,88,86,1,0,0,0,88,87,1,0,0,0,89,5,1,0,0,0,90,91,5,9,0,0,91,92,3,36,
		18,0,92,94,5,10,0,0,93,95,3,44,22,0,94,93,1,0,0,0,94,95,1,0,0,0,95,96,
		1,0,0,0,96,97,5,11,0,0,97,7,1,0,0,0,98,99,3,36,18,0,99,9,1,0,0,0,100,101,
		5,12,0,0,101,103,3,36,18,0,102,104,3,48,24,0,103,102,1,0,0,0,103,104,1,
		0,0,0,104,105,1,0,0,0,105,109,5,10,0,0,106,108,3,12,6,0,107,106,1,0,0,
		0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,112,1,0,0,0,111,
		109,1,0,0,0,112,113,5,11,0,0,113,11,1,0,0,0,114,115,3,32,16,0,115,116,
		3,36,18,0,116,117,5,7,0,0,117,13,1,0,0,0,118,119,5,13,0,0,119,120,3,36,
		18,0,120,124,5,10,0,0,121,123,3,16,8,0,122,121,1,0,0,0,123,126,1,0,0,0,
		124,122,1,0,0,0,124,125,1,0,0,0,125,130,1,0,0,0,126,124,1,0,0,0,127,129,
		3,18,9,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,
		0,131,133,1,0,0,0,132,130,1,0,0,0,133,134,5,11,0,0,134,15,1,0,0,0,135,
		137,5,14,0,0,136,135,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,139,5,
		15,0,0,139,141,3,38,19,0,140,142,3,50,25,0,141,140,1,0,0,0,141,142,1,0,
		0,0,142,143,1,0,0,0,143,144,5,7,0,0,144,17,1,0,0,0,145,147,5,16,0,0,146,
		145,1,0,0,0,146,147,1,0,0,0,147,148,1,0,0,0,148,149,3,22,11,0,149,150,
		3,36,18,0,150,152,3,20,10,0,151,153,3,54,27,0,152,151,1,0,0,0,152,153,
		1,0,0,0,153,154,1,0,0,0,154,155,5,7,0,0,155,19,1,0,0,0,156,158,5,17,0,
		0,157,159,3,58,29,0,158,157,1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,
		161,5,18,0,0,161,21,1,0,0,0,162,176,5,19,0,0,163,176,3,26,13,0,164,165,
		5,17,0,0,165,170,3,24,12,0,166,167,5,4,0,0,167,169,3,24,12,0,168,166,1,
		0,0,0,169,172,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,173,1,0,0,0,
		172,170,1,0,0,0,173,174,5,18,0,0,174,176,1,0,0,0,175,162,1,0,0,0,175,163,
		1,0,0,0,175,164,1,0,0,0,176,23,1,0,0,0,177,178,3,32,16,0,178,179,3,36,
		18,0,179,25,1,0,0,0,180,181,3,32,16,0,181,27,1,0,0,0,182,183,5,20,0,0,
		183,184,3,36,18,0,184,185,5,21,0,0,185,186,3,38,19,0,186,187,5,10,0,0,
		187,188,5,22,0,0,188,189,3,30,15,0,189,190,5,7,0,0,190,191,5,11,0,0,191,
		29,1,0,0,0,192,193,7,0,0,0,193,31,1,0,0,0,194,196,3,34,17,0,195,197,5,
		25,0,0,196,195,1,0,0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,200,3,64,32,
		0,199,198,1,0,0,0,199,200,1,0,0,0,200,33,1,0,0,0,201,215,5,26,0,0,202,
		215,5,27,0,0,203,215,5,28,0,0,204,215,5,29,0,0,205,215,5,30,0,0,206,215,
		5,31,0,0,207,215,5,32,0,0,208,215,5,33,0,0,209,215,5,34,0,0,210,215,5,
		35,0,0,211,215,5,36,0,0,212,215,5,37,0,0,213,215,3,38,19,0,214,201,1,0,
		0,0,214,202,1,0,0,0,214,203,1,0,0,0,214,204,1,0,0,0,214,205,1,0,0,0,214,
		206,1,0,0,0,214,207,1,0,0,0,214,208,1,0,0,0,214,209,1,0,0,0,214,210,1,
		0,0,0,214,211,1,0,0,0,214,212,1,0,0,0,214,213,1,0,0,0,215,35,1,0,0,0,216,
		217,3,40,20,0,217,37,1,0,0,0,218,223,3,40,20,0,219,220,5,41,0,0,220,222,
		3,40,20,0,221,219,1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,
		0,0,224,39,1,0,0,0,225,223,1,0,0,0,226,227,7,1,0,0,227,41,1,0,0,0,228,
		230,3,4,2,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,
		0,0,0,232,43,1,0,0,0,233,231,1,0,0,0,234,239,3,8,4,0,235,236,5,4,0,0,236,
		238,3,8,4,0,237,235,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,
		0,0,0,240,45,1,0,0,0,241,239,1,0,0,0,242,243,5,4,0,0,243,244,3,8,4,0,244,
		47,1,0,0,0,245,246,5,21,0,0,246,247,3,38,19,0,247,49,1,0,0,0,248,249,5,
		38,0,0,249,254,3,38,19,0,250,251,5,4,0,0,251,253,3,38,19,0,252,250,1,0,
		0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,51,1,0,0,0,256,
		254,1,0,0,0,257,258,5,4,0,0,258,259,3,38,19,0,259,53,1,0,0,0,260,261,5,
		38,0,0,261,266,3,38,19,0,262,263,5,4,0,0,263,265,3,38,19,0,264,262,1,0,
		0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,55,1,0,0,0,268,
		266,1,0,0,0,269,270,5,4,0,0,270,271,3,38,19,0,271,57,1,0,0,0,272,277,3,
		24,12,0,273,274,5,4,0,0,274,276,3,24,12,0,275,273,1,0,0,0,276,279,1,0,
		0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,59,1,0,0,0,279,277,1,0,0,0,280,
		281,5,4,0,0,281,282,3,24,12,0,282,61,1,0,0,0,283,284,5,4,0,0,284,285,3,
		24,12,0,285,63,1,0,0,0,286,287,5,39,0,0,287,288,5,40,0,0,288,65,1,0,0,
		0,289,290,5,41,0,0,290,291,3,40,20,0,291,67,1,0,0,0,23,74,88,94,103,109,
		124,130,136,141,146,152,158,170,175,196,199,214,223,231,239,254,266,277
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Examples.Soal.Compiler
