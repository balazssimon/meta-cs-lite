//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from obj\Debug\net5.0\Syntax\InternalSyntax\SandyLexer.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.Antlr4.Sandy.Syntax.InternalSyntax {
using System;
using System.IO;
using System.Text;
using global::Antlr4.Runtime;
using global::Antlr4.Runtime.Atn;
using global::Antlr4.Runtime.Misc;
using DFA = global::Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class SandyLexer : global::MetaDslx.CodeAnalysis.Antlr4.Antlr4Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NEWLINE=1, WS=2, VAR=3, PRINT=4, AS=5, INT=6, DECIMAL=7, INTLIT=8, DECLIT=9, 
		PLUS=10, MINUS=11, ASTERISK=12, DIVISION=13, ASSIGN=14, LPAREN=15, RPAREN=16, 
		COMMA=17, ID=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NEWLINE", "WS", "VAR", "PRINT", "AS", "INT", "DECIMAL", "INTLIT", "DECLIT", 
		"PLUS", "MINUS", "ASTERISK", "DIVISION", "ASSIGN", "LPAREN", "RPAREN", 
		"COMMA", "ID"
	};


	public SandyLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SandyLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'var'", "'print'", "'as'", "'Int'", "'Decimal'", null, 
		null, "'+'", "'-'", "'*'", "'/'", "'='", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NEWLINE", "WS", "VAR", "PRINT", "AS", "INT", "DECIMAL", "INTLIT", 
		"DECLIT", "PLUS", "MINUS", "ASTERISK", "DIVISION", "ASSIGN", "LPAREN", 
		"RPAREN", "COMMA", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SandyLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SandyLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x14', '\x83', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '+', '\n', 
		'\x2', '\x3', '\x3', '\x6', '\x3', '.', '\n', '\x3', '\r', '\x3', '\xE', 
		'\x3', '/', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'P', '\n', '\t', '\f', '\t', '\xE', '\t', 'S', '\v', '\t', '\x5', '\t', 
		'U', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 'Z', 
		'\n', '\n', '\f', '\n', '\xE', '\n', ']', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x6', '\n', '\x61', '\n', '\n', '\r', '\n', '\xE', '\n', '\x62', 
		'\x5', '\n', '\x65', '\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\a', '\x13', 'x', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '{', '\v', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\a', '\x13', '\x7F', '\n', '\x13', '\f', '\x13', '\xE', 
		'\x13', '\x82', '\v', '\x13', '\x2', '\x2', '\x14', '\x3', '\x3', '\x5', 
		'\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', 
		'\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', 
		'\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', 
		'%', '\x14', '\x3', '\x2', '\t', '\x4', '\x2', '\f', '\f', 't', 't', '\x4', 
		'\x2', '\v', '\v', '\"', '\"', '\x3', '\x2', '\x33', ';', '\x3', '\x2', 
		'\x32', ';', '\x3', '\x2', '\x61', '\x61', '\x3', '\x2', '\x63', '|', 
		'\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', 
		'\x2', '\x8B', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x3', '*', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '-', '\x3', '\x2', '\x2', '\x2', '\a', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\x37', '\x3', '\x2', '\x2', '\x2', '\v', '=', '\x3', 
		'\x2', '\x2', '\x2', '\r', '@', '\x3', '\x2', '\x2', '\x2', '\xF', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x11', 'T', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x15', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x17', 'h', '\x3', '\x2', '\x2', '\x2', '\x19', 'j', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', 'l', '\x3', '\x2', '\x2', '\x2', '\x1D', 'n', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', 'p', '\x3', '\x2', '\x2', '\x2', '!', 'r', 
		'\x3', '\x2', '\x2', '\x2', '#', 't', '\x3', '\x2', '\x2', '\x2', '%', 
		'y', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\xF', '\x2', '\x2', 
		'(', '+', '\a', '\f', '\x2', '\x2', ')', '+', '\t', '\x2', '\x2', '\x2', 
		'*', '\'', '\x3', '\x2', '\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', 
		'\x2', '+', '\x4', '\x3', '\x2', '\x2', '\x2', ',', '.', '\t', '\x3', 
		'\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', 
		'\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\b', '\x3', '\x2', '\x2', '\x32', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\a', 'x', '\x2', '\x2', '\x34', '\x35', '\a', 
		'\x63', '\x2', '\x2', '\x35', '\x36', '\a', 't', '\x2', '\x2', '\x36', 
		'\b', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 'r', '\x2', '\x2', 
		'\x38', '\x39', '\a', 't', '\x2', '\x2', '\x39', ':', '\a', 'k', '\x2', 
		'\x2', ':', ';', '\a', 'p', '\x2', '\x2', ';', '<', '\a', 'v', '\x2', 
		'\x2', '<', '\n', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\x63', 
		'\x2', '\x2', '>', '?', '\a', 'u', '\x2', '\x2', '?', '\f', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\a', 'K', '\x2', '\x2', '\x41', '\x42', '\a', 
		'p', '\x2', '\x2', '\x42', '\x43', '\a', 'v', '\x2', '\x2', '\x43', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x46', '\x2', '\x2', 
		'\x45', '\x46', '\a', 'g', '\x2', '\x2', '\x46', 'G', '\a', '\x65', '\x2', 
		'\x2', 'G', 'H', '\a', 'k', '\x2', '\x2', 'H', 'I', '\a', 'o', '\x2', 
		'\x2', 'I', 'J', '\a', '\x63', '\x2', '\x2', 'J', 'K', '\a', 'n', '\x2', 
		'\x2', 'K', '\x10', '\x3', '\x2', '\x2', '\x2', 'L', 'U', '\a', '\x32', 
		'\x2', '\x2', 'M', 'Q', '\t', '\x4', '\x2', '\x2', 'N', 'P', '\t', '\x5', 
		'\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'T', 'L', '\x3', '\x2', '\x2', '\x2', 'T', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'U', '\x12', '\x3', '\x2', '\x2', '\x2', 'V', '\x65', '\a', 
		'\x32', '\x2', '\x2', 'W', '[', '\t', '\x4', '\x2', '\x2', 'X', 'Z', '\t', 
		'\x5', '\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', ']', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', ']', 
		'[', '\x3', '\x2', '\x2', '\x2', '^', '`', '\a', '\x30', '\x2', '\x2', 
		'_', '\x61', '\t', '\x5', '\x2', '\x2', '`', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x64', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'W', '\x3', '\x2', '\x2', '\x2', '\x65', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\a', '-', '\x2', '\x2', 'g', '\x16', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'i', '\a', '/', '\x2', '\x2', 'i', '\x18', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', ',', '\x2', '\x2', 'k', '\x1A', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\x31', '\x2', '\x2', 'm', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '?', '\x2', '\x2', 
		'o', '\x1E', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '*', '\x2', '\x2', 
		'q', ' ', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '+', '\x2', '\x2', 
		's', '\"', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '.', '\x2', '\x2', 
		'u', '$', '\x3', '\x2', '\x2', '\x2', 'v', 'x', '\t', '\x6', '\x2', '\x2', 
		'w', 'v', '\x3', '\x2', '\x2', '\x2', 'x', '{', '\x3', '\x2', '\x2', '\x2', 
		'y', 'w', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
		'z', '|', '\x3', '\x2', '\x2', '\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x80', '\t', '\a', '\x2', '\x2', '}', '\x7F', '\t', '\b', '\x2', 
		'\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '&', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\f', '\x2', '*', '/', 'Q', 'T', '[', 
		'\x62', '\x64', 'y', '\x80', '\x3', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Antlr4Intellisense.Syntax.InternalSyntax
