namespace MetaDslx.Bootstrap.MetaCompiler3.Symbols;

using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Symbols;

symbol AnnotationSymbol : AttributeSymbol
{
    AnnotationArgumentSymbol[] Arguments;
    derived DeclarationSymbol[] Constructors;
    derived DeclarationSymbol[][] Parameters;
    derived DeclarationSymbol SelectedConstructor;
    derived DeclarationSymbol[] SelectedParameters phase SelectedConstructor;
}

symbol AnnotationArgumentSymbol
{
    derived AnnotationSymbol? AnnotationSymbol;
    derived bool IsNamedArgument;
    MetaSymbol[] NamedParameter;
    derived DeclarationSymbol Parameter;
    derived MetaType ParameterType phase Parameter;
    ExpressionSymbol Value;
}

symbol ExpressionSymbol
{
    derived PAlternativeSymbol? ContainingPAlternativeSymbol;
    derived AnnotationArgumentSymbol? ContainingAnnotationArgumentSymbol;
    derived MetaType ExpectedType;
    derived MetaSymbol Value;
    derived MetaSymbol[] Values phase Value;
}

symbol PAlternativeSymbol : DeclarationSymbol
{
    derived ParserRuleSymbol? ContainingParserRuleSymbol;
    derived PBlockSymbol? ContainingPBlockSymbol;
    PElementSymbol[] Elements;
    ExpressionSymbol? ReturnValue;
    derived MetaType ReturnType;
    derived MetaType ExpectedType;
    derived PElementSymbol[] AllSimpleElements;
}

symbol ParserRuleSymbol : DeclarationSymbol
{
    MetaType ReturnType;
    PAlternativeSymbol[] Alternatives;
}

symbol PBlockSymbol : DeclarationSymbol
{
    derived MetaType ExpectedType;
    PAlternativeSymbol[] Alternatives;
}

symbol PElementSymbol : DeclarationSymbol
{
    derived bool IsNamedElement;
    derived PAlternativeSymbol? ContainingPAlternativeSymbol;
    MetaSymbol Value;
    MetaDslx.Bootstrap.MetaCompiler3.Model.Assignment Assignment;
    derived MetaType ExpectedType;
    derived MetaDslx.Bootstrap.MetaCompiler3.Model.ExpectedTypeKind ExpectedKind phase ExpectedType;
}

symbol PReferenceSymbol : DeclarationSymbol
{
    MetaSymbol Rule;
    MetaType[] ReferencedTypes;
}

symbol TokenSymbol : DeclarationSymbol
{
    MetaType ReturnType;
    derived MetaType ExpectedType;
}
