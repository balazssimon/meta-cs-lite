
#nullable enable

namespace MetaDslx.Bootstrap.MetaModel.Compiler.Syntax
{
    using __SyntaxToken = global::MetaDslx.CodeAnalysis.SyntaxToken;
    using __InternalSyntaxKind = global::MetaDslx.CodeAnalysis.Syntax.InternalSyntax.InternalSyntaxKind;

    public enum MetaSyntaxKind
    {
        __FirstToken = KNull,
        __LastToken = TInvalidToken,
        __FirstFixedToken = KNull,
        __LastFixedToken = TDot,
        __FirstRule = Main,
        __LastRule = QualifierIdentifierBlock,

        // Built-in:
        None = __InternalSyntaxKind.None,
        List = __InternalSyntaxKind.List,
        BadToken = __InternalSyntaxKind.BadToken,
        MissingToken = __InternalSyntaxKind.MissingToken,
        SkippedTokensTrivia = __InternalSyntaxKind.SkippedTokensTrivia,
        DisabledTextTrivia = __InternalSyntaxKind.DisabledTextTrivia,
        ConflictMarkerTrivia = __InternalSyntaxKind.ConflictMarkerTrivia,
        Eof = __InternalSyntaxKind.Eof,

        // Tokens:
        KNull,
        KTrue,
        KFalse,
        TComma,
        TUtf8Bom,
        KNamespace,
        TSemicolon,
        KUsing,
        KMetamodel,
        KConst,
        KEnum,
        KAbstract,
        KClass,
        TLParen,
        TRParen,
        KObject,
        KBool,
        KChar,
        KString,
        KByte,
        KSbyte,
        KShort,
        KUshort,
        KInt,
        KUint,
        KLong,
        KUlong,
        KFloat,
        KDouble,
        KDecimal,
        KType,
        KSymbol,
        KVoid,
        TEq,
        TLBrace,
        TRBrace,
        TDollar,
        TColon,
        KContains,
        KDerived,
        KUnion,
        KReadonly,
        KOpposite,
        KSubsets,
        KRedefines,
        TQuestion,
        TLBracket,
        TRBracket,
        TDot,
        TInteger,
        TDecimal,
        TIdentifier,
        TVerbatimIdentifier,
        TString,
        TWhitespace,
        TLineEnd,
        TSingleLineComment,
        TMultiLineComment,
        TInvalidToken,

        // Rules:
        Main,
        Using,
        MetaModel,
        MetaDeclarationAlt1,
        MetaDeclarationAlt2,
        MetaDeclarationAlt3,
        MetaConstant,
        MetaEnum,
        MetaEnumLiteral,
        MetaClass,
        MetaProperty,
        MetaOperation,
        MetaParameter,
        MetaTypeReference,
        TypeReferenceAlt1,
        TypeReferenceAlt2,
        PrimitiveType,
        ValueAlt1,
        ValueAlt2,
        ValueAlt3,
        ValueAlt4,
        ValueAlt5,
        ValueAlt6,
        Name,
        Qualifier,
        Identifier,
        TBoolean,
        MainBlock1,
        MetaModelBlock1,
        MetaEnumBlock1,
        MetaEnumBlock1literalsBlock,
        MetaClassBlock1Alt1,
        MetaClassBlock1Alt2,
        MetaClassBlock2,
        MetaClassBlock2baseTypesBlock,
        MetaClassBlock3,
        MetaClassBlock3Block1Alt1,
        MetaClassBlock3Block1Alt2,
        MetaPropertyBlock1Alt1,
        MetaPropertyBlock1Alt2,
        MetaPropertyBlock1Alt3,
        MetaPropertyBlock1Alt4,
        MetaPropertyBlock2Alt1,
        MetaPropertyBlock2Alt2,
        MetaPropertyBlock3,
        MetaPropertyBlock4Alt1,
        MetaPropertyBlock4Alt2,
        MetaPropertyBlock4Alt3,
        MetaPropertyBlock4Alt1oppositePropertiesBlock,
        MetaPropertyBlock4Alt2subsettedPropertiesBlock,
        MetaPropertyBlock4Alt3redefinedPropertiesBlock,
        MetaOperationBlock1,
        MetaOperationBlock1parametersBlock,
        MetaTypeReferenceBlock1,
        MetaTypeReferenceBlock2,
        QualifierIdentifierBlock,
    }

    public static class MetaSyntaxKindExtensions
    {
        public static MetaSyntaxKind GetMetaKind(this __SyntaxToken token)
        {
            return (MetaSyntaxKind)token.RawKind;
        }
    }
}
