//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaCoreLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaCoreLexer : global::MetaDslx.Languages.MetaCompiler.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_KNamespace=2, LR_TSemicolon=3, LR_KUsing=4, LR_KMetamodel=5, 
		LR_KEnum=6, LR_TLBrace=7, LR_TRBrace=8, LR_KAbstract=9, LR_KClass=10, 
		LR_TDollar=11, LR_TColon=12, LR_KContains=13, LR_KDerived=14, LR_KOpposite=15, 
		LR_KSubsets=16, LR_KRedefines=17, LR_KBool=18, LR_KInt=19, LR_KString=20, 
		LR_KType=21, LR_TLBracket=22, LR_TRBracket=23, LR_TDot=24, LR_TInteger=25, 
		LR_TDecimal=26, LR_TIdentifier=27, LR_TString=28, LR_TWhitespace=29, LR_TLineEnd=30, 
		LR_TSingleLineComment=31, LR_TMultiLineComment=32;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", "LR_TDollar", 
		"LR_TColon", "LR_KContains", "LR_KDerived", "LR_KOpposite", "LR_KSubsets", 
		"LR_KRedefines", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", "LR_TLBracket", 
		"LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment"
	};


	public MetaCoreLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MetaCoreLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'namespace'", "';'", "'using'", "'metamodel'", "'enum'", 
		"'{'", "'}'", "'abstract'", "'class'", "'$'", "':'", "'contains'", "'derived'", 
		"'opposite'", "'subsets'", "'redefines'", "'bool'", "'int'", "'string'", 
		"'type'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", "LR_TDollar", 
		"LR_TColon", "LR_KContains", "LR_KDerived", "LR_KOpposite", "LR_KSubsets", 
		"LR_KRedefines", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", "LR_TLBracket", 
		"LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaCoreLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaCoreLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,32,279,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
		1,24,1,24,5,24,198,8,24,10,24,12,24,201,9,24,3,24,203,8,24,1,25,1,25,1,
		25,5,25,208,8,25,10,25,12,25,211,9,25,3,25,213,8,25,1,25,1,25,4,25,217,
		8,25,11,25,12,25,218,1,26,4,26,222,8,26,11,26,12,26,223,1,26,5,26,227,
		8,26,10,26,12,26,230,9,26,1,27,1,27,5,27,234,8,27,10,27,12,27,237,9,27,
		1,27,1,27,1,28,4,28,242,8,28,11,28,12,28,243,1,28,1,28,1,29,1,29,1,29,
		3,29,251,8,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,259,8,30,10,30,12,30,
		262,9,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,270,8,31,10,31,12,31,273,9,
		31,1,31,1,31,1,31,1,31,1,31,2,235,271,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,
		9,32,32,2,0,10,10,13,13,290,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
		0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
		1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
		0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
		1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
		0,0,63,1,0,0,0,1,65,1,0,0,0,3,67,1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,85,
		1,0,0,0,11,95,1,0,0,0,13,100,1,0,0,0,15,102,1,0,0,0,17,104,1,0,0,0,19,
		113,1,0,0,0,21,119,1,0,0,0,23,121,1,0,0,0,25,123,1,0,0,0,27,132,1,0,0,
		0,29,140,1,0,0,0,31,149,1,0,0,0,33,157,1,0,0,0,35,167,1,0,0,0,37,172,1,
		0,0,0,39,176,1,0,0,0,41,183,1,0,0,0,43,188,1,0,0,0,45,190,1,0,0,0,47,192,
		1,0,0,0,49,202,1,0,0,0,51,212,1,0,0,0,53,221,1,0,0,0,55,231,1,0,0,0,57,
		241,1,0,0,0,59,250,1,0,0,0,61,254,1,0,0,0,63,265,1,0,0,0,65,66,5,44,0,
		0,66,2,1,0,0,0,67,68,5,110,0,0,68,69,5,97,0,0,69,70,5,109,0,0,70,71,5,
		101,0,0,71,72,5,115,0,0,72,73,5,112,0,0,73,74,5,97,0,0,74,75,5,99,0,0,
		75,76,5,101,0,0,76,4,1,0,0,0,77,78,5,59,0,0,78,6,1,0,0,0,79,80,5,117,0,
		0,80,81,5,115,0,0,81,82,5,105,0,0,82,83,5,110,0,0,83,84,5,103,0,0,84,8,
		1,0,0,0,85,86,5,109,0,0,86,87,5,101,0,0,87,88,5,116,0,0,88,89,5,97,0,0,
		89,90,5,109,0,0,90,91,5,111,0,0,91,92,5,100,0,0,92,93,5,101,0,0,93,94,
		5,108,0,0,94,10,1,0,0,0,95,96,5,101,0,0,96,97,5,110,0,0,97,98,5,117,0,
		0,98,99,5,109,0,0,99,12,1,0,0,0,100,101,5,123,0,0,101,14,1,0,0,0,102,103,
		5,125,0,0,103,16,1,0,0,0,104,105,5,97,0,0,105,106,5,98,0,0,106,107,5,115,
		0,0,107,108,5,116,0,0,108,109,5,114,0,0,109,110,5,97,0,0,110,111,5,99,
		0,0,111,112,5,116,0,0,112,18,1,0,0,0,113,114,5,99,0,0,114,115,5,108,0,
		0,115,116,5,97,0,0,116,117,5,115,0,0,117,118,5,115,0,0,118,20,1,0,0,0,
		119,120,5,36,0,0,120,22,1,0,0,0,121,122,5,58,0,0,122,24,1,0,0,0,123,124,
		5,99,0,0,124,125,5,111,0,0,125,126,5,110,0,0,126,127,5,116,0,0,127,128,
		5,97,0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,131,5,115,0,0,131,26,
		1,0,0,0,132,133,5,100,0,0,133,134,5,101,0,0,134,135,5,114,0,0,135,136,
		5,105,0,0,136,137,5,118,0,0,137,138,5,101,0,0,138,139,5,100,0,0,139,28,
		1,0,0,0,140,141,5,111,0,0,141,142,5,112,0,0,142,143,5,112,0,0,143,144,
		5,111,0,0,144,145,5,115,0,0,145,146,5,105,0,0,146,147,5,116,0,0,147,148,
		5,101,0,0,148,30,1,0,0,0,149,150,5,115,0,0,150,151,5,117,0,0,151,152,5,
		98,0,0,152,153,5,115,0,0,153,154,5,101,0,0,154,155,5,116,0,0,155,156,5,
		115,0,0,156,32,1,0,0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,160,5,100,
		0,0,160,161,5,101,0,0,161,162,5,102,0,0,162,163,5,105,0,0,163,164,5,110,
		0,0,164,165,5,101,0,0,165,166,5,115,0,0,166,34,1,0,0,0,167,168,5,98,0,
		0,168,169,5,111,0,0,169,170,5,111,0,0,170,171,5,108,0,0,171,36,1,0,0,0,
		172,173,5,105,0,0,173,174,5,110,0,0,174,175,5,116,0,0,175,38,1,0,0,0,176,
		177,5,115,0,0,177,178,5,116,0,0,178,179,5,114,0,0,179,180,5,105,0,0,180,
		181,5,110,0,0,181,182,5,103,0,0,182,40,1,0,0,0,183,184,5,116,0,0,184,185,
		5,121,0,0,185,186,5,112,0,0,186,187,5,101,0,0,187,42,1,0,0,0,188,189,5,
		91,0,0,189,44,1,0,0,0,190,191,5,93,0,0,191,46,1,0,0,0,192,193,5,46,0,0,
		193,48,1,0,0,0,194,203,5,48,0,0,195,199,2,49,57,0,196,198,2,48,57,0,197,
		196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,203,1,
		0,0,0,201,199,1,0,0,0,202,194,1,0,0,0,202,195,1,0,0,0,203,50,1,0,0,0,204,
		213,5,48,0,0,205,209,2,49,57,0,206,208,2,48,57,0,207,206,1,0,0,0,208,211,
		1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,
		0,212,204,1,0,0,0,212,205,1,0,0,0,213,214,1,0,0,0,214,216,5,46,0,0,215,
		217,2,48,57,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,
		1,0,0,0,219,52,1,0,0,0,220,222,7,0,0,0,221,220,1,0,0,0,222,223,1,0,0,0,
		223,221,1,0,0,0,223,224,1,0,0,0,224,228,1,0,0,0,225,227,7,1,0,0,226,225,
		1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,54,1,0,0,0,
		230,228,1,0,0,0,231,235,5,34,0,0,232,234,9,0,0,0,233,232,1,0,0,0,234,237,
		1,0,0,0,235,236,1,0,0,0,235,233,1,0,0,0,236,238,1,0,0,0,237,235,1,0,0,
		0,238,239,5,34,0,0,239,56,1,0,0,0,240,242,7,2,0,0,241,240,1,0,0,0,242,
		243,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,6,
		28,0,0,246,58,1,0,0,0,247,248,5,13,0,0,248,251,5,10,0,0,249,251,7,3,0,
		0,250,247,1,0,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,253,6,29,0,0,253,
		60,1,0,0,0,254,255,5,47,0,0,255,256,5,47,0,0,256,260,1,0,0,0,257,259,8,
		3,0,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,
		261,263,1,0,0,0,262,260,1,0,0,0,263,264,6,30,0,0,264,62,1,0,0,0,265,266,
		5,47,0,0,266,267,5,42,0,0,267,271,1,0,0,0,268,270,9,0,0,0,269,268,1,0,
		0,0,270,273,1,0,0,0,271,272,1,0,0,0,271,269,1,0,0,0,272,274,1,0,0,0,273,
		271,1,0,0,0,274,275,5,42,0,0,275,276,5,47,0,0,276,277,1,0,0,0,277,278,
		6,31,0,0,278,64,1,0,0,0,13,0,199,202,209,212,218,223,228,235,243,250,260,
		271,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaModel.Compiler
