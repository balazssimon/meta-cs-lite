//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaCoreLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaCoreLexer : global::MetaDslx.Languages.MetaCompiler.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_KNamespace=2, LR_TSemicolon=3, LR_KUsing=4, LR_KMetamodel=5, 
		LR_KEnum=6, LR_TLBrace=7, LR_TRBrace=8, LR_KAbstract=9, LR_KClass=10, 
		LR_TColon=11, LR_KContains=12, LR_KOpposite=13, LR_KBool=14, LR_KInt=15, 
		LR_KString=16, LR_KType=17, LR_TLBracket=18, LR_TRBracket=19, LR_TDot=20, 
		LR_TInteger=21, LR_TDecimal=22, LR_TIdentifier=23, LR_TString=24, LR_TWhitespace=25, 
		LR_TLineEnd=26, LR_TSingleLineComment=27, LR_TMultiLineComment=28;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", "LR_TColon", 
		"LR_KContains", "LR_KOpposite", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", 
		"LR_TLBracket", "LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", 
		"LR_TIdentifier", "LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment"
	};


	public MetaCoreLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MetaCoreLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'namespace'", "';'", "'using'", "'metamodel'", "'enum'", 
		"'{'", "'}'", "'abstract'", "'class'", "':'", "'contains'", "'opposite'", 
		"'bool'", "'int'", "'string'", "'type'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", "LR_TColon", 
		"LR_KContains", "LR_KOpposite", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", 
		"LR_TLBracket", "LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", 
		"LR_TIdentifier", "LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaCoreLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaCoreLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,243,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,
		6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
		1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,
		1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,
		1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,5,20,162,8,20,10,20,12,20,165,
		9,20,3,20,167,8,20,1,21,1,21,1,21,5,21,172,8,21,10,21,12,21,175,9,21,3,
		21,177,8,21,1,21,1,21,4,21,181,8,21,11,21,12,21,182,1,22,4,22,186,8,22,
		11,22,12,22,187,1,22,5,22,191,8,22,10,22,12,22,194,9,22,1,23,1,23,5,23,
		198,8,23,10,23,12,23,201,9,23,1,23,1,23,1,24,4,24,206,8,24,11,24,12,24,
		207,1,24,1,24,1,25,1,25,1,25,3,25,215,8,25,1,25,1,25,1,26,1,26,1,26,1,
		26,5,26,223,8,26,10,26,12,26,226,9,26,1,26,1,26,1,27,1,27,1,27,1,27,5,
		27,234,8,27,10,27,12,27,237,9,27,1,27,1,27,1,27,1,27,1,27,2,199,235,0,
		28,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
		2,0,9,9,32,32,2,0,10,10,13,13,254,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,0,5,69,
		1,0,0,0,7,71,1,0,0,0,9,77,1,0,0,0,11,87,1,0,0,0,13,92,1,0,0,0,15,94,1,
		0,0,0,17,96,1,0,0,0,19,105,1,0,0,0,21,111,1,0,0,0,23,113,1,0,0,0,25,122,
		1,0,0,0,27,131,1,0,0,0,29,136,1,0,0,0,31,140,1,0,0,0,33,147,1,0,0,0,35,
		152,1,0,0,0,37,154,1,0,0,0,39,156,1,0,0,0,41,166,1,0,0,0,43,176,1,0,0,
		0,45,185,1,0,0,0,47,195,1,0,0,0,49,205,1,0,0,0,51,214,1,0,0,0,53,218,1,
		0,0,0,55,229,1,0,0,0,57,58,5,44,0,0,58,2,1,0,0,0,59,60,5,110,0,0,60,61,
		5,97,0,0,61,62,5,109,0,0,62,63,5,101,0,0,63,64,5,115,0,0,64,65,5,112,0,
		0,65,66,5,97,0,0,66,67,5,99,0,0,67,68,5,101,0,0,68,4,1,0,0,0,69,70,5,59,
		0,0,70,6,1,0,0,0,71,72,5,117,0,0,72,73,5,115,0,0,73,74,5,105,0,0,74,75,
		5,110,0,0,75,76,5,103,0,0,76,8,1,0,0,0,77,78,5,109,0,0,78,79,5,101,0,0,
		79,80,5,116,0,0,80,81,5,97,0,0,81,82,5,109,0,0,82,83,5,111,0,0,83,84,5,
		100,0,0,84,85,5,101,0,0,85,86,5,108,0,0,86,10,1,0,0,0,87,88,5,101,0,0,
		88,89,5,110,0,0,89,90,5,117,0,0,90,91,5,109,0,0,91,12,1,0,0,0,92,93,5,
		123,0,0,93,14,1,0,0,0,94,95,5,125,0,0,95,16,1,0,0,0,96,97,5,97,0,0,97,
		98,5,98,0,0,98,99,5,115,0,0,99,100,5,116,0,0,100,101,5,114,0,0,101,102,
		5,97,0,0,102,103,5,99,0,0,103,104,5,116,0,0,104,18,1,0,0,0,105,106,5,99,
		0,0,106,107,5,108,0,0,107,108,5,97,0,0,108,109,5,115,0,0,109,110,5,115,
		0,0,110,20,1,0,0,0,111,112,5,58,0,0,112,22,1,0,0,0,113,114,5,99,0,0,114,
		115,5,111,0,0,115,116,5,110,0,0,116,117,5,116,0,0,117,118,5,97,0,0,118,
		119,5,105,0,0,119,120,5,110,0,0,120,121,5,115,0,0,121,24,1,0,0,0,122,123,
		5,111,0,0,123,124,5,112,0,0,124,125,5,112,0,0,125,126,5,111,0,0,126,127,
		5,115,0,0,127,128,5,105,0,0,128,129,5,116,0,0,129,130,5,101,0,0,130,26,
		1,0,0,0,131,132,5,98,0,0,132,133,5,111,0,0,133,134,5,111,0,0,134,135,5,
		108,0,0,135,28,1,0,0,0,136,137,5,105,0,0,137,138,5,110,0,0,138,139,5,116,
		0,0,139,30,1,0,0,0,140,141,5,115,0,0,141,142,5,116,0,0,142,143,5,114,0,
		0,143,144,5,105,0,0,144,145,5,110,0,0,145,146,5,103,0,0,146,32,1,0,0,0,
		147,148,5,116,0,0,148,149,5,121,0,0,149,150,5,112,0,0,150,151,5,101,0,
		0,151,34,1,0,0,0,152,153,5,91,0,0,153,36,1,0,0,0,154,155,5,93,0,0,155,
		38,1,0,0,0,156,157,5,46,0,0,157,40,1,0,0,0,158,167,5,48,0,0,159,163,2,
		49,57,0,160,162,2,48,57,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,
		0,0,163,164,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,166,158,1,0,0,0,166,
		159,1,0,0,0,167,42,1,0,0,0,168,177,5,48,0,0,169,173,2,49,57,0,170,172,
		2,48,57,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,
		0,0,174,177,1,0,0,0,175,173,1,0,0,0,176,168,1,0,0,0,176,169,1,0,0,0,177,
		178,1,0,0,0,178,180,5,46,0,0,179,181,2,48,57,0,180,179,1,0,0,0,181,182,
		1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,44,1,0,0,0,184,186,7,0,0,0,
		185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,192,
		1,0,0,0,189,191,7,1,0,0,190,189,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,
		0,192,193,1,0,0,0,193,46,1,0,0,0,194,192,1,0,0,0,195,199,5,34,0,0,196,
		198,9,0,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,200,1,0,0,0,199,197,1,
		0,0,0,200,202,1,0,0,0,201,199,1,0,0,0,202,203,5,34,0,0,203,48,1,0,0,0,
		204,206,7,2,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,
		1,0,0,0,208,209,1,0,0,0,209,210,6,24,0,0,210,50,1,0,0,0,211,212,5,13,0,
		0,212,215,5,10,0,0,213,215,7,3,0,0,214,211,1,0,0,0,214,213,1,0,0,0,215,
		216,1,0,0,0,216,217,6,25,0,0,217,52,1,0,0,0,218,219,5,47,0,0,219,220,5,
		47,0,0,220,224,1,0,0,0,221,223,8,3,0,0,222,221,1,0,0,0,223,226,1,0,0,0,
		224,222,1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,
		6,26,0,0,228,54,1,0,0,0,229,230,5,47,0,0,230,231,5,42,0,0,231,235,1,0,
		0,0,232,234,9,0,0,0,233,232,1,0,0,0,234,237,1,0,0,0,235,236,1,0,0,0,235,
		233,1,0,0,0,236,238,1,0,0,0,237,235,1,0,0,0,238,239,5,42,0,0,239,240,5,
		47,0,0,240,241,1,0,0,0,241,242,6,27,0,0,242,56,1,0,0,0,13,0,163,166,173,
		176,182,187,192,199,207,214,224,235,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaModel.Compiler
