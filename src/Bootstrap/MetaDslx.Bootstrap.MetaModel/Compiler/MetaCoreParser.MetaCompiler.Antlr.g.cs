//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaCoreParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaCoreParser : global::MetaDslx.Languages.MetaCompiler.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_KNamespace=2, LR_TSemicolon=3, LR_KUsing=4, LR_KMetamodel=5, 
		LR_KEnum=6, LR_TLBrace=7, LR_TRBrace=8, LR_KAbstract=9, LR_KClass=10, 
		LR_TColon=11, LR_KContains=12, LR_KOpposite=13, LR_KBool=14, LR_KInt=15, 
		LR_KString=16, LR_KType=17, LR_TLBracket=18, LR_TRBracket=19, LR_TDot=20, 
		LR_TInteger=21, LR_TDecimal=22, LR_TIdentifier=23, LR_TString=24, LR_TWhitespace=25, 
		LR_TLineEnd=26, LR_TSingleLineComment=27, LR_TMultiLineComment=28;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Declarations = 2, RULE_pr_MetaDeclaration = 3, 
		RULE_pr_EnumBody = 4, RULE_pr_EnumLiterals = 5, RULE_pr_MetaEnumLiteral = 6, 
		RULE_pr_BaseClasses = 7, RULE_pr_ClassBody = 8, RULE_pr_MetaProperty = 9, 
		RULE_pr_PropertyOpposite = 10, RULE_pr_TypeReference = 11, RULE_pr_Name = 12, 
		RULE_pr_Qualifier = 13, RULE_pr_QualifierList = 14, RULE_pr_Identifier = 15, 
		RULE_pr_EnumLiteralsBlock1 = 16, RULE_pr_BaseClassesBlock1 = 17, RULE_pr_QualifierBlock1 = 18, 
		RULE_pr_QualifierListBlock1 = 19;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Declarations", "pr_MetaDeclaration", "pr_EnumBody", 
		"pr_EnumLiterals", "pr_MetaEnumLiteral", "pr_BaseClasses", "pr_ClassBody", 
		"pr_MetaProperty", "pr_PropertyOpposite", "pr_TypeReference", "pr_Name", 
		"pr_Qualifier", "pr_QualifierList", "pr_Identifier", "pr_EnumLiteralsBlock1", 
		"pr_BaseClassesBlock1", "pr_QualifierBlock1", "pr_QualifierListBlock1"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'namespace'", "';'", "'using'", "'metamodel'", "'enum'", 
		"'{'", "'}'", "'abstract'", "'class'", "':'", "'contains'", "'opposite'", 
		"'bool'", "'int'", "'string'", "'type'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", "LR_TColon", 
		"LR_KContains", "LR_KOpposite", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", 
		"LR_TLBracket", "LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", 
		"LR_TIdentifier", "LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaCoreParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaCoreParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaCoreParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaCoreParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken kNamespace;
		public Pr_QualifierContext nameAntlr1;
		public IToken tSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _usingAntlr1 = new List<Pr_UsingContext>();
		public Pr_DeclarationsContext declarationsAntlr1;
		public IToken eof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(MetaCoreParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaCoreParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationsContext pr_Declarations() {
			return GetRuleContext<Pr_DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MetaCoreParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_localctx.kNamespace = Match(LR_KNamespace);
			State = 41;
			_localctx.nameAntlr1 = pr_Qualifier();
			State = 42;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 43;
				_localctx._pr_Using = pr_Using();
				_localctx._usingAntlr1.Add(_localctx._pr_Using);
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			_localctx.declarationsAntlr1 = pr_Declarations();
			State = 50;
			_localctx.eof = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken kUsing;
		public Pr_QualifierContext namespacesAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(MetaCoreParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaCoreParser.LR_TSemicolon, 0); }
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_localctx.kUsing = Match(LR_KUsing);
			State = 53;
			_localctx.namespacesAntlr1 = pr_Qualifier();
			State = 54;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_DeclarationsContext : ParserRuleContext {
		public Pr_MetaDeclarationContext _pr_MetaDeclaration;
		public IList<Pr_MetaDeclarationContext> _declarationsAntlr1 = new List<Pr_MetaDeclarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaDeclarationContext[] pr_MetaDeclaration() {
			return GetRuleContexts<Pr_MetaDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaDeclarationContext pr_MetaDeclaration(int i) {
			return GetRuleContext<Pr_MetaDeclarationContext>(i);
		}
		public Pr_DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_DeclarationsContext pr_Declarations() {
		Pr_DeclarationsContext _localctx = new Pr_DeclarationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1632L) != 0)) {
				{
				{
				State = 56;
				_localctx._pr_MetaDeclaration = pr_MetaDeclaration();
				_localctx._declarationsAntlr1.Add(_localctx._pr_MetaDeclaration);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaDeclarationContext : ParserRuleContext {
		public Pr_MetaDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaDeclaration; } }
	 
		public Pr_MetaDeclarationContext() { }
		public virtual void CopyFrom(Pr_MetaDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaEnumTypeContext : Pr_MetaDeclarationContext {
		public IToken kEnum;
		public Pr_NameContext nameAntlr1;
		public Pr_EnumBodyContext enumBodyAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KEnum() { return GetToken(MetaCoreParser.LR_KEnum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumBodyContext pr_EnumBody() {
			return GetRuleContext<Pr_EnumBodyContext>(0);
		}
		public Pr_MetaEnumTypeContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnumType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaModelContext : Pr_MetaDeclarationContext {
		public IToken kMetamodel;
		public Pr_NameContext nameAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KMetamodel() { return GetToken(MetaCoreParser.LR_KMetamodel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaCoreParser.LR_TSemicolon, 0); }
		public Pr_MetaModelContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaModel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaClassContext : Pr_MetaDeclarationContext {
		public IToken isAbstract;
		public IToken kClass;
		public Pr_NameContext nameAntlr1;
		public Pr_BaseClassesContext baseClassesAntlr1;
		public Pr_ClassBodyContext classBodyAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KClass() { return GetToken(MetaCoreParser.LR_KClass, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ClassBodyContext pr_ClassBody() {
			return GetRuleContext<Pr_ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAbstract() { return GetToken(MetaCoreParser.LR_KAbstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BaseClassesContext pr_BaseClasses() {
			return GetRuleContext<Pr_BaseClassesContext>(0);
		}
		public Pr_MetaClassContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaDeclarationContext pr_MetaDeclaration() {
		Pr_MetaDeclarationContext _localctx = new Pr_MetaDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_MetaDeclaration);
		int _la;
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KMetamodel:
				_localctx = new Pr_MetaModelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				((Pr_MetaModelContext)_localctx).kMetamodel = Match(LR_KMetamodel);
				State = 63;
				((Pr_MetaModelContext)_localctx).nameAntlr1 = pr_Name();
				State = 64;
				((Pr_MetaModelContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			case LR_KEnum:
				_localctx = new Pr_MetaEnumTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				((Pr_MetaEnumTypeContext)_localctx).kEnum = Match(LR_KEnum);
				State = 67;
				((Pr_MetaEnumTypeContext)_localctx).nameAntlr1 = pr_Name();
				State = 68;
				((Pr_MetaEnumTypeContext)_localctx).enumBodyAntlr1 = pr_EnumBody();
				}
				break;
			case LR_KAbstract:
			case LR_KClass:
				_localctx = new Pr_MetaClassContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KAbstract) {
					{
					State = 70;
					((Pr_MetaClassContext)_localctx).isAbstract = Match(LR_KAbstract);
					}
				}

				State = 73;
				((Pr_MetaClassContext)_localctx).kClass = Match(LR_KClass);
				State = 74;
				((Pr_MetaClassContext)_localctx).nameAntlr1 = pr_Name();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_TColon) {
					{
					State = 75;
					((Pr_MetaClassContext)_localctx).baseClassesAntlr1 = pr_BaseClasses();
					}
				}

				State = 78;
				((Pr_MetaClassContext)_localctx).classBodyAntlr1 = pr_ClassBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumBodyContext : ParserRuleContext {
		public IToken tLBrace;
		public Pr_EnumLiteralsContext enumLiteralsAntlr1;
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(MetaCoreParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(MetaCoreParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumLiteralsContext pr_EnumLiterals() {
			return GetRuleContext<Pr_EnumLiteralsContext>(0);
		}
		public Pr_EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumBodyContext pr_EnumBody() {
		Pr_EnumBodyContext _localctx = new Pr_EnumBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_EnumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			_localctx.tLBrace = Match(LR_TLBrace);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TIdentifier) {
				{
				State = 83;
				_localctx.enumLiteralsAntlr1 = pr_EnumLiterals();
				}
			}

			State = 86;
			_localctx.tRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumLiteralsContext : ParserRuleContext {
		public Pr_MetaEnumLiteralContext literalsAntlr1;
		public Pr_EnumLiteralsBlock1Context _pr_EnumLiteralsBlock1;
		public IList<Pr_EnumLiteralsBlock1Context> _enumLiteralsBlock1Antlr1 = new List<Pr_EnumLiteralsBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
			return GetRuleContext<Pr_MetaEnumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumLiteralsBlock1Context[] pr_EnumLiteralsBlock1() {
			return GetRuleContexts<Pr_EnumLiteralsBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumLiteralsBlock1Context pr_EnumLiteralsBlock1(int i) {
			return GetRuleContext<Pr_EnumLiteralsBlock1Context>(i);
		}
		public Pr_EnumLiteralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumLiterals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumLiterals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumLiteralsContext pr_EnumLiterals() {
		Pr_EnumLiteralsContext _localctx = new Pr_EnumLiteralsContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_EnumLiterals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_localctx.literalsAntlr1 = pr_MetaEnumLiteral();
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 89;
				_localctx._pr_EnumLiteralsBlock1 = pr_EnumLiteralsBlock1();
				_localctx._enumLiteralsBlock1Antlr1.Add(_localctx._pr_EnumLiteralsBlock1);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaEnumLiteralContext : ParserRuleContext {
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_MetaEnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaEnumLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
		Pr_MetaEnumLiteralContext _localctx = new Pr_MetaEnumLiteralContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_MetaEnumLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_localctx.nameAntlr1 = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BaseClassesContext : ParserRuleContext {
		public Pr_BaseClassesBlock1Context baseClassesBlock1Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BaseClassesBlock1Context pr_BaseClassesBlock1() {
			return GetRuleContext<Pr_BaseClassesBlock1Context>(0);
		}
		public Pr_BaseClassesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BaseClasses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BaseClasses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BaseClassesContext pr_BaseClasses() {
		Pr_BaseClassesContext _localctx = new Pr_BaseClassesContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_BaseClasses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_localctx.baseClassesBlock1Antlr1 = pr_BaseClassesBlock1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ClassBodyContext : ParserRuleContext {
		public IToken tLBrace;
		public Pr_MetaPropertyContext _pr_MetaProperty;
		public IList<Pr_MetaPropertyContext> _propertiesAntlr1 = new List<Pr_MetaPropertyContext>();
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(MetaCoreParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(MetaCoreParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyContext[] pr_MetaProperty() {
			return GetRuleContexts<Pr_MetaPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyContext pr_MetaProperty(int i) {
			return GetRuleContext<Pr_MetaPropertyContext>(i);
		}
		public Pr_ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ClassBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ClassBodyContext pr_ClassBody() {
		Pr_ClassBodyContext _localctx = new Pr_ClassBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_ClassBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_localctx.tLBrace = Match(LR_TLBrace);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8638464L) != 0)) {
				{
				{
				State = 100;
				_localctx._pr_MetaProperty = pr_MetaProperty();
				_localctx._propertiesAntlr1.Add(_localctx._pr_MetaProperty);
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 106;
			_localctx.tRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyContext : ParserRuleContext {
		public IToken isContainment;
		public Pr_TypeReferenceContext typeAntlr1;
		public Pr_NameContext nameAntlr1;
		public Pr_PropertyOppositeContext propertyOppositeAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaCoreParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KContains() { return GetToken(MetaCoreParser.LR_KContains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyOppositeContext pr_PropertyOpposite() {
			return GetRuleContext<Pr_PropertyOppositeContext>(0);
		}
		public Pr_MetaPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyContext pr_MetaProperty() {
		Pr_MetaPropertyContext _localctx = new Pr_MetaPropertyContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_MetaProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KContains) {
				{
				State = 108;
				_localctx.isContainment = Match(LR_KContains);
				}
			}

			State = 111;
			_localctx.typeAntlr1 = pr_TypeReference(0);
			State = 112;
			_localctx.nameAntlr1 = pr_Name();
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KOpposite) {
				{
				State = 113;
				_localctx.propertyOppositeAntlr1 = pr_PropertyOpposite();
				}
			}

			State = 116;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyOppositeContext : ParserRuleContext {
		public IToken kOpposite;
		public Pr_QualifierContext OppositeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KOpposite() { return GetToken(MetaCoreParser.LR_KOpposite, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PropertyOppositeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyOpposite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyOpposite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyOppositeContext pr_PropertyOpposite() {
		Pr_PropertyOppositeContext _localctx = new Pr_PropertyOppositeContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_PropertyOpposite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_localctx.kOpposite = Match(LR_KOpposite);
			State = 119;
			_localctx.OppositeAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TypeReferenceContext : ParserRuleContext {
		public Pr_TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TypeReference; } }
	 
		public Pr_TypeReferenceContext() { }
		public virtual void CopyFrom(Pr_TypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_TypeReferenceTokensContext : Pr_TypeReferenceContext {
		public IToken kBool;
		public IToken kInt;
		public IToken kString;
		public IToken kType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBool() { return GetToken(MetaCoreParser.LR_KBool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KInt() { return GetToken(MetaCoreParser.LR_KInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KString() { return GetToken(MetaCoreParser.LR_KString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KType() { return GetToken(MetaCoreParser.LR_KType, 0); }
		public Pr_TypeReferenceTokensContext(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReferenceTokens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaArrayTypeContext : Pr_TypeReferenceContext {
		public Pr_TypeReferenceContext itemTypeAntlr1;
		public IToken tLBracket;
		public IToken tRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(MetaCoreParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(MetaCoreParser.LR_TRBracket, 0); }
		public Pr_MetaArrayTypeContext(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_TypeReferenceAlt3Context : Pr_TypeReferenceContext {
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_TypeReferenceAlt3Context(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReferenceAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TypeReferenceContext pr_TypeReference() {
		return pr_TypeReference(0);
	}

	private Pr_TypeReferenceContext pr_TypeReference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Pr_TypeReferenceContext _localctx = new Pr_TypeReferenceContext(Context, _parentState);
		Pr_TypeReferenceContext _prevctx = _localctx;
		int _startState = 22;
		EnterRecursionRule(_localctx, 22, RULE_pr_TypeReference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TIdentifier:
				{
				_localctx = new Pr_TypeReferenceAlt3Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 122;
				((Pr_TypeReferenceAlt3Context)_localctx).qualifierAntlr1 = pr_Qualifier();
				}
				break;
			case LR_KBool:
			case LR_KInt:
			case LR_KString:
			case LR_KType:
				{
				_localctx = new Pr_TypeReferenceTokensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_KBool:
					{
					State = 123;
					((Pr_TypeReferenceTokensContext)_localctx).kBool = Match(LR_KBool);
					}
					break;
				case LR_KInt:
					{
					State = 124;
					((Pr_TypeReferenceTokensContext)_localctx).kInt = Match(LR_KInt);
					}
					break;
				case LR_KString:
					{
					State = 125;
					((Pr_TypeReferenceTokensContext)_localctx).kString = Match(LR_KString);
					}
					break;
				case LR_KType:
					{
					State = 126;
					((Pr_TypeReferenceTokensContext)_localctx).kType = Match(LR_KType);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 136;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Pr_MetaArrayTypeContext(new Pr_TypeReferenceContext(_parentctx, _parentState));
					((Pr_MetaArrayTypeContext)_localctx).itemTypeAntlr1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_pr_TypeReference);
					State = 131;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 132;
					((Pr_MetaArrayTypeContext)_localctx).tLBracket = Match(LR_TLBracket);
					State = 133;
					((Pr_MetaArrayTypeContext)_localctx).tRBracket = Match(LR_TRBracket);
					}
					} 
				}
				State = 138;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		public Pr_QualifierBlock1Context _pr_QualifierBlock1;
		public IList<Pr_QualifierBlock1Context> _qualifierBlock1Antlr1 = new List<Pr_QualifierBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context[] pr_QualifierBlock1() {
			return GetRuleContexts<Pr_QualifierBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context pr_QualifierBlock1(int i) {
			return GetRuleContext<Pr_QualifierBlock1Context>(i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_Qualifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_localctx.identifierAntlr1 = pr_Identifier();
			State = 145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 142;
					_localctx._pr_QualifierBlock1 = pr_QualifierBlock1();
					_localctx._qualifierBlock1Antlr1.Add(_localctx._pr_QualifierBlock1);
					}
					} 
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListContext : ParserRuleContext {
		public Pr_QualifierContext qualifierAntlr1;
		public Pr_QualifierListBlock1Context _pr_QualifierListBlock1;
		public IList<Pr_QualifierListBlock1Context> _qualifierListBlock1Antlr1 = new List<Pr_QualifierListBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context[] pr_QualifierListBlock1() {
			return GetRuleContexts<Pr_QualifierListBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context pr_QualifierListBlock1(int i) {
			return GetRuleContext<Pr_QualifierListBlock1Context>(i);
		}
		public Pr_QualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListContext pr_QualifierList() {
		Pr_QualifierListContext _localctx = new Pr_QualifierListContext(Context, State);
		EnterRule(_localctx, 28, RULE_pr_QualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 149;
				_localctx._pr_QualifierListBlock1 = pr_QualifierListBlock1();
				_localctx._qualifierListBlock1Antlr1.Add(_localctx._pr_QualifierListBlock1);
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public IToken tIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(MetaCoreParser.LR_TIdentifier, 0); }
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 30, RULE_pr_Identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_localctx.tIdentifierAntlr1 = Match(LR_TIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumLiteralsBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_MetaEnumLiteralContext literalsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaCoreParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
			return GetRuleContext<Pr_MetaEnumLiteralContext>(0);
		}
		public Pr_EnumLiteralsBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumLiteralsBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumLiteralsBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumLiteralsBlock1Context pr_EnumLiteralsBlock1() {
		Pr_EnumLiteralsBlock1Context _localctx = new Pr_EnumLiteralsBlock1Context(Context, State);
		EnterRule(_localctx, 32, RULE_pr_EnumLiteralsBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_localctx.tComma = Match(LR_TComma);
			State = 158;
			_localctx.literalsAntlr1 = pr_MetaEnumLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BaseClassesBlock1Context : ParserRuleContext {
		public IToken tColon;
		public Pr_QualifierListContext baseTypesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(MetaCoreParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListContext pr_QualifierList() {
			return GetRuleContext<Pr_QualifierListContext>(0);
		}
		public Pr_BaseClassesBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BaseClassesBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BaseClassesBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BaseClassesBlock1Context pr_BaseClassesBlock1() {
		Pr_BaseClassesBlock1Context _localctx = new Pr_BaseClassesBlock1Context(Context, State);
		EnterRule(_localctx, 34, RULE_pr_BaseClassesBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_localctx.tColon = Match(LR_TColon);
			State = 161;
			_localctx.baseTypesAntlr1 = pr_QualifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierBlock1Context : ParserRuleContext {
		public IToken tDot;
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(MetaCoreParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierBlock1Context pr_QualifierBlock1() {
		Pr_QualifierBlock1Context _localctx = new Pr_QualifierBlock1Context(Context, State);
		EnterRule(_localctx, 36, RULE_pr_QualifierBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_localctx.tDot = Match(LR_TDot);
			State = 164;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaCoreParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_QualifierListBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierListBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCoreParserVisitor<TResult> typedVisitor = visitor as IMetaCoreParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierListBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListBlock1Context pr_QualifierListBlock1() {
		Pr_QualifierListBlock1Context _localctx = new Pr_QualifierListBlock1Context(Context, State);
		EnterRule(_localctx, 38, RULE_pr_QualifierListBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			_localctx.tComma = Match(LR_TComma);
			State = 167;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 11: return pr_TypeReference_sempred((Pr_TypeReferenceContext)_localctx, predIndex);
		}
		return true;
	}
	private bool pr_TypeReference_sempred(Pr_TypeReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,28,170,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,5,0,
		45,8,0,10,0,12,0,48,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,5,2,58,8,2,10,
		2,12,2,61,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,72,8,3,1,3,1,3,1,
		3,3,3,77,8,3,1,3,1,3,3,3,81,8,3,1,4,1,4,3,4,85,8,4,1,4,1,4,1,5,1,5,5,5,
		91,8,5,10,5,12,5,94,9,5,1,6,1,6,1,7,1,7,1,8,1,8,5,8,102,8,8,10,8,12,8,
		105,9,8,1,8,1,8,1,9,3,9,110,8,9,1,9,1,9,1,9,3,9,115,8,9,1,9,1,9,1,10,1,
		10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,128,8,11,3,11,130,8,11,1,11,
		1,11,1,11,5,11,135,8,11,10,11,12,11,138,9,11,1,12,1,12,1,13,1,13,5,13,
		144,8,13,10,13,12,13,147,9,13,1,14,1,14,5,14,151,8,14,10,14,12,14,154,
		9,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,
		1,19,1,19,0,1,22,20,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,0,0,167,0,40,1,0,0,0,2,52,1,0,0,0,4,59,1,0,0,0,6,80,1,0,0,0,8,82,1,
		0,0,0,10,88,1,0,0,0,12,95,1,0,0,0,14,97,1,0,0,0,16,99,1,0,0,0,18,109,1,
		0,0,0,20,118,1,0,0,0,22,129,1,0,0,0,24,139,1,0,0,0,26,141,1,0,0,0,28,148,
		1,0,0,0,30,155,1,0,0,0,32,157,1,0,0,0,34,160,1,0,0,0,36,163,1,0,0,0,38,
		166,1,0,0,0,40,41,5,2,0,0,41,42,3,26,13,0,42,46,5,3,0,0,43,45,3,2,1,0,
		44,43,1,0,0,0,45,48,1,0,0,0,46,44,1,0,0,0,46,47,1,0,0,0,47,49,1,0,0,0,
		48,46,1,0,0,0,49,50,3,4,2,0,50,51,5,0,0,1,51,1,1,0,0,0,52,53,5,4,0,0,53,
		54,3,26,13,0,54,55,5,3,0,0,55,3,1,0,0,0,56,58,3,6,3,0,57,56,1,0,0,0,58,
		61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,5,1,0,0,0,61,59,1,0,0,0,62,63,
		5,5,0,0,63,64,3,24,12,0,64,65,5,3,0,0,65,81,1,0,0,0,66,67,5,6,0,0,67,68,
		3,24,12,0,68,69,3,8,4,0,69,81,1,0,0,0,70,72,5,9,0,0,71,70,1,0,0,0,71,72,
		1,0,0,0,72,73,1,0,0,0,73,74,5,10,0,0,74,76,3,24,12,0,75,77,3,14,7,0,76,
		75,1,0,0,0,76,77,1,0,0,0,77,78,1,0,0,0,78,79,3,16,8,0,79,81,1,0,0,0,80,
		62,1,0,0,0,80,66,1,0,0,0,80,71,1,0,0,0,81,7,1,0,0,0,82,84,5,7,0,0,83,85,
		3,10,5,0,84,83,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,87,5,8,0,0,87,9,
		1,0,0,0,88,92,3,12,6,0,89,91,3,32,16,0,90,89,1,0,0,0,91,94,1,0,0,0,92,
		90,1,0,0,0,92,93,1,0,0,0,93,11,1,0,0,0,94,92,1,0,0,0,95,96,3,24,12,0,96,
		13,1,0,0,0,97,98,3,34,17,0,98,15,1,0,0,0,99,103,5,7,0,0,100,102,3,18,9,
		0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,
		106,1,0,0,0,105,103,1,0,0,0,106,107,5,8,0,0,107,17,1,0,0,0,108,110,5,12,
		0,0,109,108,1,0,0,0,109,110,1,0,0,0,110,111,1,0,0,0,111,112,3,22,11,0,
		112,114,3,24,12,0,113,115,3,20,10,0,114,113,1,0,0,0,114,115,1,0,0,0,115,
		116,1,0,0,0,116,117,5,3,0,0,117,19,1,0,0,0,118,119,5,13,0,0,119,120,3,
		26,13,0,120,21,1,0,0,0,121,122,6,11,-1,0,122,130,3,26,13,0,123,128,5,14,
		0,0,124,128,5,15,0,0,125,128,5,16,0,0,126,128,5,17,0,0,127,123,1,0,0,0,
		127,124,1,0,0,0,127,125,1,0,0,0,127,126,1,0,0,0,128,130,1,0,0,0,129,121,
		1,0,0,0,129,127,1,0,0,0,130,136,1,0,0,0,131,132,10,3,0,0,132,133,5,18,
		0,0,133,135,5,19,0,0,134,131,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,
		137,1,0,0,0,137,23,1,0,0,0,138,136,1,0,0,0,139,140,3,30,15,0,140,25,1,
		0,0,0,141,145,3,30,15,0,142,144,3,36,18,0,143,142,1,0,0,0,144,147,1,0,
		0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,27,1,0,0,0,147,145,1,0,0,0,148,
		152,3,26,13,0,149,151,3,38,19,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,
		1,0,0,0,152,153,1,0,0,0,153,29,1,0,0,0,154,152,1,0,0,0,155,156,5,23,0,
		0,156,31,1,0,0,0,157,158,5,1,0,0,158,159,3,12,6,0,159,33,1,0,0,0,160,161,
		5,11,0,0,161,162,3,28,14,0,162,35,1,0,0,0,163,164,5,20,0,0,164,165,3,30,
		15,0,165,37,1,0,0,0,166,167,5,1,0,0,167,168,3,26,13,0,168,39,1,0,0,0,15,
		46,59,71,76,80,84,92,103,109,114,127,129,136,145,152
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaModel.Compiler
