namespace MetaDslx.Examples.MetaModel;

using System;
using MetaDslx.CodeAnalysis.Annotations;
using MetaDslx.CodeAnalysis.Binding;
using MetaDslx.Examples.MetaModel.Model;
using MetaDslx.Examples.MetaModel;

language MetaModel;

[Root(MetaNamespace)]
main : namespaceDeclaration eof;

[Define(MetaNamespace)]
namespaceDeclaration : 'namespace' [Nesting(MetaNamespace,Declarations)] qualifiedName ';' usingDeclarations declarations;

usingDeclarations : usingDeclaration*;

[Import]
usingDeclaration : 'using' [Use(MetaNamespace)] qualifier ';';

[Scope]
[Property(Declarations)]
declarations : metaModelDeclaration declaration*;

[Define(MetaModel)]
metaModelDeclaration : attribute* 'metamodel' name ';';

declaration : enumDeclaration | classDeclaration | associationDeclaration;

[Property(Attributes)]
attribute : '[' [Property(Type)][Use(MetaNamedType)] qualifier ']';

[Define(MetaEnum)]
enumDeclaration : attribute* 'enum' name enumBody;
[Scope]
enumBody : '{' enumLiterals? '}';
[Property(EnumLiterals)]
enumLiterals : enumLiteral (',' enumLiteral)* ;

[Define(MetaEnumLiteral)]
enumLiteral : attribute* name;

[Define(MetaClass)]
classDeclaration : attribute* [Property(IsAbstract,true)] 'abstract'? 'class' name (':' [Property(BaseClasses)][Use(MetaClass)] qualifierList)? classBody;
[Scope]
classBody : '{' [Property(Properties)] propertyDeclaration* '}';

[Define(MetaProperty)]
propertyDeclaration : attribute* [Property(Kind)] propertyModifier? [Property(Type)] typeReference name propertyRedefinition? propertySubsetting? ';';

propertyModifier : [Constant(MetaPropertyKind.Derived)] 'derived' | [Property(IsContainment,true)] 'containment' | [Constant(MetaPropertyKind.Derived)] 'readonly';
propertyRedefinition : 'redefines' [Property(RedefinedProperties)][Use(MetaProperty)] qualifierList;
propertySubsetting : 'subsets' [Property(SubsettedProperties)][Use(MetaProperty)] qualifierList;

[Association]
associationDeclaration : attribute* 'association' [Use(MetaProperty)] qualifier 'with' [Use(MetaProperty)] qualifier ';';

typeReference : primitiveType | collectionType | nullableType | [Use(MetaType)] qualifier;

primitiveType 
	: [Constant(Meta.Int)] 'int' 
	| [Constant(Meta.String)] 'string' 
	| [Constant(Meta.Bool)] 'bool';

[Define(MetaCollectionType)]
collectionType : ([Property(Kind,MetaCollectionKind.List)] 'list' | [Property(Kind,MetaCollectionKind.Set)] 'set') '<' [Property(InnerType)] typeReference '>';
[Define(MetaNullableType)]
nullableType : [Property(InnerType)] typeReference '?';

[Name]
qualifiedName : qualifier;

qualifierList : qualifier (',' qualifier)*;

[Qualifier]
qualifier : identifier ('.' identifier)*;

[Name]
name : identifier;

[Identifier]
identifier : TIdentifier;

token TInteger as Number: '0'| '1'..'9' ('0'..'9')* ;
token TDecimal as Number: ('0'|'1'..'9' ('0'..'9')*) '.' ('0'..'9')+ ;
token TIdentifier as default Identifier: ('_'|'a'..'z'|'A'..'Z')+('_'|'a'..'z'|'A'..'Z'|'0'..'9')*;
token TComma as default Separator: ',' ;
token TString as String: '"' .*? '"';
token TWhitespace as default Whitespace: ('\t'|' ') +;
token TLineEnd as default EndOfLine: ('\r\n' | '\r' | '\n');
token TSingleLineComment as SingleLineComment: '//' ~('\r' | '\n')*;
token TMultiLineComment as MultiLineComment: '/*' .*? '*/';
