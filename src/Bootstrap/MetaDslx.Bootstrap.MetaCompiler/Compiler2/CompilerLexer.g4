lexer grammar CompilerLexer;

LR_TComma: ',';
LR_TUtf8Bom: '\u00ef' '\u00bb' '\u00bf' -> channel(HIDDEN);
LR_KNamespace: 'namespace';
LR_TSemicolon: ';';
LR_KUsing: 'using';
LR_KMetamodel: 'metamodel';
LR_KSymbols: 'symbols';
LR_KLanguage: 'language';
LR_TColon: ':';
LR_KBlock: 'block';
LR_TLParen: '(';
LR_TRParen: ')';
LR_THash: '#';
LR_THashLBrace: '#{';
LR_TRBrace: '}';
LR_KEof: 'eof';
LR_KFragment: 'fragment';
LR_TTilde: '~';
LR_TDot: '.';
LR_TDotDot: '..';
LR_TLBrace: '{';
LR_TLBracket: '[';
LR_TRBracket: ']';
LR_TEq: '=';
LR_TQuestionEq: '?=';
LR_TExclEq: '!=';
LR_TPlusEq: '+=';
LR_TQuestion: '?';
LR_TAsterisk: '*';
LR_TPlus: '+';
LR_TQuestionQuestion: '??';
LR_TAsteriskQuestion: '*?';
LR_TPlusQuestion: '+?';
LR_KReturns: 'returns';
LR_TBar: '|';
LR_KAlt: 'alt';
LR_TEqGt: '=>';
LR_KToken: 'token';
LR_KHidden: 'hidden';
LR_KNull: 'null';
LR_KTrue: 'true';
LR_KFalse: 'false';
LR_TInteger: '0' | '1'..'9' ('0'..'9')*;
LR_TDecimal: ('0' | '1'..'9' ('0'..'9')*) '.' ('0'..'9')+;
LR_TPrimitiveType: 'bool' | 'int' | 'string' | 'type' | 'symbol' | 'object' | 'void';
LR_TIdentifier: ('_' | 'a'..'z' | 'A'..'Z')+ ('_' | 'a'..'z' | 'A'..'Z' | '0'..'9')*;
LR_TVerbatimIdentifier: '@' ('_' | 'a'..'z' | 'A'..'Z')+ ('_' | 'a'..'z' | 'A'..'Z' | '0'..'9')*;
LR_TString: '"' * '"' | '\'' * '\'';
LR_TWhitespace: ('\t' | ' ')+ -> channel(HIDDEN);
LR_TLineEnd: ('\r\n' | '\r' | '\n') -> channel(HIDDEN);
LR_TSingleLineComment: '//' ~('\r' | '\n')* -> channel(HIDDEN);
LR_TMultiLineComment: '/*' .*? '*/' -> channel(HIDDEN);
LR_TInvalidToken: . -> channel(HIDDEN);
