//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CompilerParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaCompiler.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CompilerParser : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_TUtf8Bom=2, LR_KNamespace=3, LR_TSemicolon=4, LR_KUsing=5, 
		LR_KMetamodel=6, LR_KSymbols=7, LR_KLanguage=8, LR_TColon=9, LR_KBlock=10, 
		LR_TLParen=11, LR_TRParen=12, LR_THash=13, LR_THashLBrace=14, LR_TRBrace=15, 
		LR_KEof=16, LR_KFragment=17, LR_TTilde=18, LR_TDot=19, LR_TDotDot=20, 
		LR_TLBrace=21, LR_TLBracket=22, LR_TRBracket=23, LR_TEq=24, LR_TQuestionEq=25, 
		LR_TExclEq=26, LR_TPlusEq=27, LR_TQuestion=28, LR_TAsterisk=29, LR_TPlus=30, 
		LR_TQuestionQuestion=31, LR_TAsteriskQuestion=32, LR_TPlusQuestion=33, 
		LR_KReturns=34, LR_TBar=35, LR_KAlt=36, LR_TEqGt=37, LR_KToken=38, LR_KHidden=39, 
		LR_KNull=40, LR_KTrue=41, LR_KFalse=42, LR_TInteger=43, LR_TDecimal=44, 
		LR_TPrimitiveType=45, LR_TIdentifier=46, LR_TVerbatimIdentifier=47, LR_TString=48, 
		LR_TWhitespace=49, LR_TLineEnd=50, LR_TSingleLineComment=51, LR_TMultiLineComment=52, 
		LR_TInvalidToken=53;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Declarations = 2, RULE_pr_LanguageDeclaration = 3, 
		RULE_pr_Grammar = 4, RULE_pr_GrammarRule = 5, RULE_pr_Rule = 6, RULE_pr_Alternative = 7, 
		RULE_pr_Element = 8, RULE_pr_ElementValue = 9, RULE_pr_LAlternative = 10, 
		RULE_pr_LElement = 11, RULE_pr_LElementValue = 12, RULE_pr_Expression = 13, 
		RULE_pr_SingleExpression = 14, RULE_pr_ParserAnnotation = 15, RULE_pr_LexerAnnotation = 16, 
		RULE_pr_AnnotationArguments = 17, RULE_pr_AnnotationArgument = 18, RULE_pr_ReturnTypeIdentifier = 19, 
		RULE_pr_ReturnTypeQualifier = 20, RULE_pr_Name = 21, RULE_pr_Qualifier = 22, 
		RULE_pr_Identifier = 23, RULE_pr_SimpleIdentifier = 24, RULE_pr_RuleBlock1 = 25, 
		RULE_pr_RuleAlternativesBlock = 26, RULE_pr_BlockBlock1 = 27, RULE_pr_BlockAlternativesBlock = 28, 
		RULE_pr_BlockInlineAlternativesBlock = 29, RULE_pr_AlternativeBlock1 = 30, 
		RULE_pr_AlternativeBlock1Block1 = 31, RULE_pr_AlternativeBlock2 = 32, 
		RULE_pr_ElementBlock1 = 33, RULE_pr_RuleRefAlt3ReferencedTypesBlock = 34, 
		RULE_pr_TokenBlock1 = 35, RULE_pr_TokenBlock1Alt1Block1 = 36, RULE_pr_TokenAlternativesBlock = 37, 
		RULE_pr_FragmentAlternativesBlock = 38, RULE_pr_LBlockAlternativesBlock = 39, 
		RULE_pr_SingleExpressionBlock1 = 40, RULE_pr_ArrayExpressionItemsBlock = 41, 
		RULE_pr_AnnotationArgumentsArgumentsBlock = 42, RULE_pr_AnnotationArgumentBlock1 = 43, 
		RULE_pr_QualifierIdentifierBlock = 44, RULE_pr_SimpleQualifierSimpleIdentifierBlock1 = 45;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Declarations", "pr_LanguageDeclaration", "pr_Grammar", 
		"pr_GrammarRule", "pr_Rule", "pr_Alternative", "pr_Element", "pr_ElementValue", 
		"pr_LAlternative", "pr_LElement", "pr_LElementValue", "pr_Expression", 
		"pr_SingleExpression", "pr_ParserAnnotation", "pr_LexerAnnotation", "pr_AnnotationArguments", 
		"pr_AnnotationArgument", "pr_ReturnTypeIdentifier", "pr_ReturnTypeQualifier", 
		"pr_Name", "pr_Qualifier", "pr_Identifier", "pr_SimpleIdentifier", "pr_RuleBlock1", 
		"pr_RuleAlternativesBlock", "pr_BlockBlock1", "pr_BlockAlternativesBlock", 
		"pr_BlockInlineAlternativesBlock", "pr_AlternativeBlock1", "pr_AlternativeBlock1Block1", 
		"pr_AlternativeBlock2", "pr_ElementBlock1", "pr_RuleRefAlt3ReferencedTypesBlock", 
		"pr_TokenBlock1", "pr_TokenBlock1Alt1Block1", "pr_TokenAlternativesBlock", 
		"pr_FragmentAlternativesBlock", "pr_LBlockAlternativesBlock", "pr_SingleExpressionBlock1", 
		"pr_ArrayExpressionItemsBlock", "pr_AnnotationArgumentsArgumentsBlock", 
		"pr_AnnotationArgumentBlock1", "pr_QualifierIdentifierBlock", "pr_SimpleQualifierSimpleIdentifierBlock1"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, "'namespace'", "';'", "'using'", "'metamodel'", "'symbols'", 
		"'language'", "':'", "'block'", "'('", "')'", "'#'", "'#{'", "'}'", "'eof'", 
		"'fragment'", "'~'", "'.'", "'..'", "'{'", "'['", "']'", "'='", "'?='", 
		"'!='", "'+='", "'?'", "'*'", "'+'", "'??'", "'*?'", "'+?'", "'returns'", 
		"'|'", "'alt'", "'=>'", "'token'", "'hidden'", "'null'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_TUtf8Bom", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", 
		"LR_KMetamodel", "LR_KSymbols", "LR_KLanguage", "LR_TColon", "LR_KBlock", 
		"LR_TLParen", "LR_TRParen", "LR_THash", "LR_THashLBrace", "LR_TRBrace", 
		"LR_KEof", "LR_KFragment", "LR_TTilde", "LR_TDot", "LR_TDotDot", "LR_TLBrace", 
		"LR_TLBracket", "LR_TRBracket", "LR_TEq", "LR_TQuestionEq", "LR_TExclEq", 
		"LR_TPlusEq", "LR_TQuestion", "LR_TAsterisk", "LR_TPlus", "LR_TQuestionQuestion", 
		"LR_TAsteriskQuestion", "LR_TPlusQuestion", "LR_KReturns", "LR_TBar", 
		"LR_KAlt", "LR_TEqGt", "LR_KToken", "LR_KHidden", "LR_KNull", "LR_KTrue", 
		"LR_KFalse", "LR_TInteger", "LR_TDecimal", "LR_TPrimitiveType", "LR_TIdentifier", 
		"LR_TVerbatimIdentifier", "LR_TString", "LR_TWhitespace", "LR_TLineEnd", 
		"LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken e_KNamespace;
		public Pr_QualifierContext e_Name;
		public IToken e_TSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _e_UsingList = new List<Pr_UsingContext>();
		public Pr_DeclarationsContext e_Declarations;
		public IToken e_EndOfFileToken;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(CompilerParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationsContext pr_Declarations() {
			return GetRuleContext<Pr_DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CompilerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_localctx.e_KNamespace = Match(LR_KNamespace);
			State = 93;
			_localctx.e_Name = pr_Qualifier();
			State = 94;
			_localctx.e_TSemicolon = Match(LR_TSemicolon);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 95;
				_localctx._pr_Using = pr_Using();
				_localctx._e_UsingList.Add(_localctx._pr_Using);
				}
				}
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 101;
			_localctx.e_Declarations = pr_Declarations();
			State = 102;
			_localctx.e_EndOfFileToken = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
	 
		public Pr_UsingContext() { }
		public virtual void CopyFrom(Pr_UsingContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_UsingAlt1Context : Pr_UsingContext {
		public IToken e_KUsing;
		public Pr_QualifierContext e_Namespaces;
		public IToken e_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(CompilerParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		public Pr_UsingAlt1Context(Pr_UsingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_UsingAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_UsingSymbolsContext : Pr_UsingContext {
		public IToken e_KUsing2;
		public IToken e_KSymbols;
		public Pr_QualifierContext e_Namespaces1;
		public IToken e_TSemicolon2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(CompilerParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSymbols() { return GetToken(CompilerParser.LR_KSymbols, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		public Pr_UsingSymbolsContext(Pr_UsingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_UsingSymbols(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_UsingMetaModelContext : Pr_UsingContext {
		public IToken e_KUsing1;
		public IToken e_KMetamodel;
		public Pr_QualifierContext e_Symbols;
		public IToken e_TSemicolon1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(CompilerParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KMetamodel() { return GetToken(CompilerParser.LR_KMetamodel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		public Pr_UsingMetaModelContext(Pr_UsingContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_UsingMetaModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				_localctx = new Pr_UsingAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 104;
				((Pr_UsingAlt1Context)_localctx).e_KUsing = Match(LR_KUsing);
				State = 105;
				((Pr_UsingAlt1Context)_localctx).e_Namespaces = pr_Qualifier();
				State = 106;
				((Pr_UsingAlt1Context)_localctx).e_TSemicolon = Match(LR_TSemicolon);
				}
				break;
			case 2:
				_localctx = new Pr_UsingMetaModelContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				((Pr_UsingMetaModelContext)_localctx).e_KUsing1 = Match(LR_KUsing);
				State = 109;
				((Pr_UsingMetaModelContext)_localctx).e_KMetamodel = Match(LR_KMetamodel);
				State = 110;
				((Pr_UsingMetaModelContext)_localctx).e_Symbols = pr_Qualifier();
				State = 111;
				((Pr_UsingMetaModelContext)_localctx).e_TSemicolon1 = Match(LR_TSemicolon);
				}
				break;
			case 3:
				_localctx = new Pr_UsingSymbolsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				((Pr_UsingSymbolsContext)_localctx).e_KUsing2 = Match(LR_KUsing);
				State = 114;
				((Pr_UsingSymbolsContext)_localctx).e_KSymbols = Match(LR_KSymbols);
				State = 115;
				((Pr_UsingSymbolsContext)_localctx).e_Namespaces1 = pr_Qualifier();
				State = 116;
				((Pr_UsingSymbolsContext)_localctx).e_TSemicolon2 = Match(LR_TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_DeclarationsContext : ParserRuleContext {
		public Pr_LanguageDeclarationContext e_Declarations;
		public Pr_RuleContext _pr_Rule;
		public IList<Pr_RuleContext> _e_Declarations1 = new List<Pr_RuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
			return GetRuleContext<Pr_LanguageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext[] pr_Rule() {
			return GetRuleContexts<Pr_RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext pr_Rule(int i) {
			return GetRuleContext<Pr_RuleContext>(i);
		}
		public Pr_DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_DeclarationsContext pr_Declarations() {
		Pr_DeclarationsContext _localctx = new Pr_DeclarationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_localctx.e_Declarations = pr_LanguageDeclaration();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 246290608816128L) != 0)) {
				{
				{
				State = 121;
				_localctx._pr_Rule = pr_Rule();
				_localctx._e_Declarations1.Add(_localctx._pr_Rule);
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LanguageDeclarationContext : ParserRuleContext {
		public IToken e_KLanguage;
		public Pr_NameContext e_Name;
		public IToken e_TSemicolon;
		public Pr_GrammarContext e_Grammar;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KLanguage() { return GetToken(CompilerParser.LR_KLanguage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarContext pr_Grammar() {
			return GetRuleContext<Pr_GrammarContext>(0);
		}
		public Pr_LanguageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LanguageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LanguageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
		Pr_LanguageDeclarationContext _localctx = new Pr_LanguageDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_LanguageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_localctx.e_KLanguage = Match(LR_KLanguage);
			State = 128;
			_localctx.e_Name = pr_Name();
			State = 129;
			_localctx.e_TSemicolon = Match(LR_TSemicolon);
			State = 130;
			_localctx.e_Grammar = pr_Grammar();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_GrammarContext : ParserRuleContext {
		public Pr_GrammarRuleContext _pr_GrammarRule;
		public IList<Pr_GrammarRuleContext> _e_GrammarRules = new List<Pr_GrammarRuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarRuleContext[] pr_GrammarRule() {
			return GetRuleContexts<Pr_GrammarRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarRuleContext pr_GrammarRule(int i) {
			return GetRuleContext<Pr_GrammarRuleContext>(i);
		}
		public Pr_GrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Grammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Grammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_GrammarContext pr_Grammar() {
		Pr_GrammarContext _localctx = new Pr_GrammarContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_Grammar);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 132;
					_localctx._pr_GrammarRule = pr_GrammarRule();
					_localctx._e_GrammarRules.Add(_localctx._pr_GrammarRule);
					}
					} 
				}
				State = 137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_GrammarRuleContext : ParserRuleContext {
		public Pr_GrammarRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_GrammarRule; } }
	 
		public Pr_GrammarRuleContext() { }
		public virtual void CopyFrom(Pr_GrammarRuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_TokenContext : Pr_GrammarRuleContext {
		public Pr_LexerAnnotationContext _pr_LexerAnnotation;
		public IList<Pr_LexerAnnotationContext> _e_Annotations1 = new List<Pr_LexerAnnotationContext>();
		public Pr_TokenBlock1Context e_Block1;
		public IToken e_TColon1;
		public Pr_LAlternativeContext e_Alternatives3;
		public IToken _LR_TBar;
		public IList<IToken> _e_TBar2 = new List<IToken>();
		public Pr_LAlternativeContext _pr_LAlternative;
		public IList<Pr_LAlternativeContext> _e_Alternatives4 = new List<Pr_LAlternativeContext>();
		public IToken e_TSemicolon1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TokenBlock1Context pr_TokenBlock1() {
			return GetRuleContext<Pr_TokenBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext[] pr_LAlternative() {
			return GetRuleContexts<Pr_LAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative(int i) {
			return GetRuleContext<Pr_LAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerAnnotationContext[] pr_LexerAnnotation() {
			return GetRuleContexts<Pr_LexerAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerAnnotationContext pr_LexerAnnotation(int i) {
			return GetRuleContext<Pr_LexerAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TBar() { return GetTokens(CompilerParser.LR_TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar(int i) {
			return GetToken(CompilerParser.LR_TBar, i);
		}
		public Pr_TokenContext(Pr_GrammarRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Token(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_FragmentContext : Pr_GrammarRuleContext {
		public IToken e_KFragment;
		public Pr_NameContext e_Name1;
		public IToken e_TColon2;
		public Pr_LAlternativeContext e_Alternatives5;
		public IToken _LR_TBar;
		public IList<IToken> _e_TBar3 = new List<IToken>();
		public Pr_LAlternativeContext _pr_LAlternative;
		public IList<Pr_LAlternativeContext> _e_Alternatives6 = new List<Pr_LAlternativeContext>();
		public IToken e_TSemicolon2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFragment() { return GetToken(CompilerParser.LR_KFragment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext[] pr_LAlternative() {
			return GetRuleContexts<Pr_LAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative(int i) {
			return GetRuleContext<Pr_LAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TBar() { return GetTokens(CompilerParser.LR_TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar(int i) {
			return GetToken(CompilerParser.LR_TBar, i);
		}
		public Pr_FragmentContext(Pr_GrammarRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Fragment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_BlockContext : Pr_GrammarRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _e_Annotations = new List<Pr_ParserAnnotationContext>();
		public IToken e_KBlock;
		public Pr_NameContext e_Name;
		public Pr_BlockBlock1Context e_Block;
		public IToken e_TColon;
		public Pr_AlternativeContext e_Alternatives1;
		public IToken _LR_TBar;
		public IList<IToken> _e_TBar1 = new List<IToken>();
		public Pr_AlternativeContext _pr_Alternative;
		public IList<Pr_AlternativeContext> _e_Alternatives2 = new List<Pr_AlternativeContext>();
		public IToken e_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBlock() { return GetToken(CompilerParser.LR_KBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext[] pr_Alternative() {
			return GetRuleContexts<Pr_AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative(int i) {
			return GetRuleContext<Pr_AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BlockBlock1Context pr_BlockBlock1() {
			return GetRuleContext<Pr_BlockBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TBar() { return GetTokens(CompilerParser.LR_TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar(int i) {
			return GetToken(CompilerParser.LR_TBar, i);
		}
		public Pr_BlockContext(Pr_GrammarRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Block(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_GrammarRuleAlt1Context : Pr_GrammarRuleContext {
		public Pr_RuleContext e_Rule;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext pr_Rule() {
			return GetRuleContext<Pr_RuleContext>(0);
		}
		public Pr_GrammarRuleAlt1Context(Pr_GrammarRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_GrammarRuleAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_GrammarRuleContext pr_GrammarRule() {
		Pr_GrammarRuleContext _localctx = new Pr_GrammarRuleContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_GrammarRule);
		int _la;
		try {
			State = 192;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new Pr_GrammarRuleAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				((Pr_GrammarRuleAlt1Context)_localctx).e_Rule = pr_Rule();
				}
				break;
			case 2:
				_localctx = new Pr_BlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TLBracket) {
					{
					{
					State = 139;
					((Pr_BlockContext)_localctx)._pr_ParserAnnotation = pr_ParserAnnotation();
					((Pr_BlockContext)_localctx)._e_Annotations.Add(((Pr_BlockContext)_localctx)._pr_ParserAnnotation);
					}
					}
					State = 144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 145;
				((Pr_BlockContext)_localctx).e_KBlock = Match(LR_KBlock);
				State = 146;
				((Pr_BlockContext)_localctx).e_Name = pr_Name();
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KReturns) {
					{
					State = 147;
					((Pr_BlockContext)_localctx).e_Block = pr_BlockBlock1();
					}
				}

				State = 150;
				((Pr_BlockContext)_localctx).e_TColon = Match(LR_TColon);
				State = 151;
				((Pr_BlockContext)_localctx).e_Alternatives1 = pr_Alternative();
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 152;
					((Pr_BlockContext)_localctx)._LR_TBar = Match(LR_TBar);
					((Pr_BlockContext)_localctx)._e_TBar1.Add(((Pr_BlockContext)_localctx)._LR_TBar);
					State = 153;
					((Pr_BlockContext)_localctx)._pr_Alternative = pr_Alternative();
					((Pr_BlockContext)_localctx)._e_Alternatives2.Add(((Pr_BlockContext)_localctx)._pr_Alternative);
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 159;
				((Pr_BlockContext)_localctx).e_TSemicolon = Match(LR_TSemicolon);
				}
				break;
			case 3:
				_localctx = new Pr_TokenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TLBracket) {
					{
					{
					State = 161;
					((Pr_TokenContext)_localctx)._pr_LexerAnnotation = pr_LexerAnnotation();
					((Pr_TokenContext)_localctx)._e_Annotations1.Add(((Pr_TokenContext)_localctx)._pr_LexerAnnotation);
					}
					}
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 167;
				((Pr_TokenContext)_localctx).e_Block1 = pr_TokenBlock1();
				State = 168;
				((Pr_TokenContext)_localctx).e_TColon1 = Match(LR_TColon);
				State = 169;
				((Pr_TokenContext)_localctx).e_Alternatives3 = pr_LAlternative();
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 170;
					((Pr_TokenContext)_localctx)._LR_TBar = Match(LR_TBar);
					((Pr_TokenContext)_localctx)._e_TBar2.Add(((Pr_TokenContext)_localctx)._LR_TBar);
					State = 171;
					((Pr_TokenContext)_localctx)._pr_LAlternative = pr_LAlternative();
					((Pr_TokenContext)_localctx)._e_Alternatives4.Add(((Pr_TokenContext)_localctx)._pr_LAlternative);
					}
					}
					State = 176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 177;
				((Pr_TokenContext)_localctx).e_TSemicolon1 = Match(LR_TSemicolon);
				}
				break;
			case 4:
				_localctx = new Pr_FragmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 179;
				((Pr_FragmentContext)_localctx).e_KFragment = Match(LR_KFragment);
				State = 180;
				((Pr_FragmentContext)_localctx).e_Name1 = pr_Name();
				State = 181;
				((Pr_FragmentContext)_localctx).e_TColon2 = Match(LR_TColon);
				State = 182;
				((Pr_FragmentContext)_localctx).e_Alternatives5 = pr_LAlternative();
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 183;
					((Pr_FragmentContext)_localctx)._LR_TBar = Match(LR_TBar);
					((Pr_FragmentContext)_localctx)._e_TBar3.Add(((Pr_FragmentContext)_localctx)._LR_TBar);
					State = 184;
					((Pr_FragmentContext)_localctx)._pr_LAlternative = pr_LAlternative();
					((Pr_FragmentContext)_localctx)._e_Alternatives6.Add(((Pr_FragmentContext)_localctx)._pr_LAlternative);
					}
					}
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 190;
				((Pr_FragmentContext)_localctx).e_TSemicolon2 = Match(LR_TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleContext : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _e_Annotations = new List<Pr_ParserAnnotationContext>();
		public Pr_RuleBlock1Context e_Block;
		public IToken e_TColon;
		public Pr_AlternativeContext e_Alternatives1;
		public IToken _LR_TBar;
		public IList<IToken> _e_TBar1 = new List<IToken>();
		public Pr_AlternativeContext _pr_Alternative;
		public IList<Pr_AlternativeContext> _e_Alternatives2 = new List<Pr_AlternativeContext>();
		public IToken e_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleBlock1Context pr_RuleBlock1() {
			return GetRuleContext<Pr_RuleBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext[] pr_Alternative() {
			return GetRuleContexts<Pr_AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative(int i) {
			return GetRuleContext<Pr_AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TBar() { return GetTokens(CompilerParser.LR_TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar(int i) {
			return GetToken(CompilerParser.LR_TBar, i);
		}
		public Pr_RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleContext pr_Rule() {
		Pr_RuleContext _localctx = new Pr_RuleContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_Rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 194;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._e_Annotations.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 200;
			_localctx.e_Block = pr_RuleBlock1();
			State = 201;
			_localctx.e_TColon = Match(LR_TColon);
			State = 202;
			_localctx.e_Alternatives1 = pr_Alternative();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TBar) {
				{
				{
				State = 203;
				_localctx._LR_TBar = Match(LR_TBar);
				_localctx._e_TBar1.Add(_localctx._LR_TBar);
				State = 204;
				_localctx._pr_Alternative = pr_Alternative();
				_localctx._e_Alternatives2.Add(_localctx._pr_Alternative);
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 210;
			_localctx.e_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AlternativeContext : ParserRuleContext {
		public Pr_AlternativeBlock1Context e_Block;
		public Pr_ElementContext _pr_Element;
		public IList<Pr_ElementContext> _e_Elements = new List<Pr_ElementContext>();
		public Pr_AlternativeBlock2Context e_Block1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeBlock1Context pr_AlternativeBlock1() {
			return GetRuleContext<Pr_AlternativeBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ElementContext[] pr_Element() {
			return GetRuleContexts<Pr_ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ElementContext pr_Element(int i) {
			return GetRuleContext<Pr_ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeBlock2Context pr_AlternativeBlock2() {
			return GetRuleContext<Pr_AlternativeBlock2Context>(0);
		}
		public Pr_AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Alternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AlternativeContext pr_Alternative() {
		Pr_AlternativeContext _localctx = new Pr_AlternativeContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_Alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 212;
				_localctx.e_Block = pr_AlternativeBlock1();
				}
				break;
			}
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 215;
				_localctx._pr_Element = pr_Element();
				_localctx._e_Elements.Add(_localctx._pr_Element);
				}
				}
				State = 218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 492581213530112L) != 0) );
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TEqGt) {
				{
				State = 220;
				_localctx.e_Block1 = pr_AlternativeBlock2();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ElementContext : ParserRuleContext {
		public Pr_ElementBlock1Context e_Block;
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _e_ValueAnnotations = new List<Pr_ParserAnnotationContext>();
		public Pr_ElementValueContext e_Value;
		public IToken e_Multiplicity;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ElementValueContext pr_ElementValue() {
			return GetRuleContext<Pr_ElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ElementBlock1Context pr_ElementBlock1() {
			return GetRuleContext<Pr_ElementBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(CompilerParser.LR_TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsterisk() { return GetToken(CompilerParser.LR_TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlus() { return GetToken(CompilerParser.LR_TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionQuestion() { return GetToken(CompilerParser.LR_TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsteriskQuestion() { return GetToken(CompilerParser.LR_TAsteriskQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusQuestion() { return GetToken(CompilerParser.LR_TPlusQuestion, 0); }
		public Pr_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ElementContext pr_Element() {
		Pr_ElementContext _localctx = new Pr_ElementContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 223;
				_localctx.e_Block = pr_ElementBlock1();
				}
				break;
			}
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 226;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._e_ValueAnnotations.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 232;
			_localctx.e_Value = pr_ElementValue();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) {
				{
				State = 233;
				_localctx.e_Multiplicity = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) ) {
					_localctx.e_Multiplicity = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ElementValueContext : ParserRuleContext {
		public Pr_ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ElementValue; } }
	 
		public Pr_ElementValueContext() { }
		public virtual void CopyFrom(Pr_ElementValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_BlockInlineContext : Pr_ElementValueContext {
		public IToken e_TLParen;
		public Pr_AlternativeContext e_Alternatives1;
		public IToken _LR_TBar;
		public IList<IToken> _e_TBar1 = new List<IToken>();
		public Pr_AlternativeContext _pr_Alternative;
		public IList<Pr_AlternativeContext> _e_Alternatives2 = new List<Pr_AlternativeContext>();
		public IToken e_TRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext[] pr_Alternative() {
			return GetRuleContexts<Pr_AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative(int i) {
			return GetRuleContext<Pr_AlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TBar() { return GetTokens(CompilerParser.LR_TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar(int i) {
			return GetToken(CompilerParser.LR_TBar, i);
		}
		public Pr_BlockInlineContext(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockInline(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_RuleRefAlt2Context : Pr_ElementValueContext {
		public IToken e_THash;
		public Pr_ReturnTypeQualifierContext e_ReferencedTypes;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_THash() { return GetToken(CompilerParser.LR_THash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_RuleRefAlt2Context(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleRefAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_RuleRefAlt1Context : Pr_ElementValueContext {
		public Pr_IdentifierContext e_Rule;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_RuleRefAlt1Context(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleRefAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_RuleRefAlt3Context : Pr_ElementValueContext {
		public IToken e_THashLBrace;
		public Pr_ReturnTypeQualifierContext e_ReferencedTypes1;
		public IToken _LR_TComma;
		public IList<IToken> _e_TComma1 = new List<IToken>();
		public Pr_ReturnTypeQualifierContext _pr_ReturnTypeQualifier;
		public IList<Pr_ReturnTypeQualifierContext> _e_ReferencedTypes2 = new List<Pr_ReturnTypeQualifierContext>();
		public IToken e_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_THashLBrace() { return GetToken(CompilerParser.LR_THashLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext[] pr_ReturnTypeQualifier() {
			return GetRuleContexts<Pr_ReturnTypeQualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier(int i) {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(CompilerParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(CompilerParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(CompilerParser.LR_TComma, i);
		}
		public Pr_RuleRefAlt3Context(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleRefAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ElementValueTokensContext : Pr_ElementValueContext {
		public IToken e_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KEof() { return GetToken(CompilerParser.LR_KEof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_ElementValueTokensContext(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ElementValueTokens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ElementValueContext pr_ElementValue() {
		Pr_ElementValueContext _localctx = new Pr_ElementValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_ElementValue);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KEof:
			case LR_TString:
				_localctx = new Pr_ElementValueTokensContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				((Pr_ElementValueTokensContext)_localctx).e_Token = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LR_KEof || _la==LR_TString) ) {
					((Pr_ElementValueTokensContext)_localctx).e_Token = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LR_TLParen:
				_localctx = new Pr_BlockInlineContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				((Pr_BlockInlineContext)_localctx).e_TLParen = Match(LR_TLParen);
				State = 238;
				((Pr_BlockInlineContext)_localctx).e_Alternatives1 = pr_Alternative();
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 239;
					((Pr_BlockInlineContext)_localctx)._LR_TBar = Match(LR_TBar);
					((Pr_BlockInlineContext)_localctx)._e_TBar1.Add(((Pr_BlockInlineContext)_localctx)._LR_TBar);
					State = 240;
					((Pr_BlockInlineContext)_localctx)._pr_Alternative = pr_Alternative();
					((Pr_BlockInlineContext)_localctx)._e_Alternatives2.Add(((Pr_BlockInlineContext)_localctx)._pr_Alternative);
					}
					}
					State = 245;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 246;
				((Pr_BlockInlineContext)_localctx).e_TRParen = Match(LR_TRParen);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_RuleRefAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 248;
				((Pr_RuleRefAlt1Context)_localctx).e_Rule = pr_Identifier();
				}
				break;
			case LR_THash:
				_localctx = new Pr_RuleRefAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 249;
				((Pr_RuleRefAlt2Context)_localctx).e_THash = Match(LR_THash);
				State = 250;
				((Pr_RuleRefAlt2Context)_localctx).e_ReferencedTypes = pr_ReturnTypeQualifier();
				}
				break;
			case LR_THashLBrace:
				_localctx = new Pr_RuleRefAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 251;
				((Pr_RuleRefAlt3Context)_localctx).e_THashLBrace = Match(LR_THashLBrace);
				State = 252;
				((Pr_RuleRefAlt3Context)_localctx).e_ReferencedTypes1 = pr_ReturnTypeQualifier();
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 253;
					((Pr_RuleRefAlt3Context)_localctx)._LR_TComma = Match(LR_TComma);
					((Pr_RuleRefAlt3Context)_localctx)._e_TComma1.Add(((Pr_RuleRefAlt3Context)_localctx)._LR_TComma);
					State = 254;
					((Pr_RuleRefAlt3Context)_localctx)._pr_ReturnTypeQualifier = pr_ReturnTypeQualifier();
					((Pr_RuleRefAlt3Context)_localctx)._e_ReferencedTypes2.Add(((Pr_RuleRefAlt3Context)_localctx)._pr_ReturnTypeQualifier);
					}
					}
					State = 259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 260;
				((Pr_RuleRefAlt3Context)_localctx).e_TRBrace = Match(LR_TRBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LAlternativeContext : ParserRuleContext {
		public Pr_LElementContext _pr_LElement;
		public IList<Pr_LElementContext> _e_Elements = new List<Pr_LElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementContext[] pr_LElement() {
			return GetRuleContexts<Pr_LElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementContext pr_LElement(int i) {
			return GetRuleContext<Pr_LElementContext>(i);
		}
		public Pr_LAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LAlternativeContext pr_LAlternative() {
		Pr_LAlternativeContext _localctx = new Pr_LAlternativeContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_LAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 492581210032128L) != 0)) {
				{
				{
				State = 264;
				_localctx._pr_LElement = pr_LElement();
				_localctx._e_Elements.Add(_localctx._pr_LElement);
				}
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LElementContext : ParserRuleContext {
		public IToken e_IsNegated;
		public Pr_LElementValueContext e_Value;
		public IToken e_Multiplicity;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementValueContext pr_LElementValue() {
			return GetRuleContext<Pr_LElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TTilde() { return GetToken(CompilerParser.LR_TTilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(CompilerParser.LR_TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsterisk() { return GetToken(CompilerParser.LR_TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlus() { return GetToken(CompilerParser.LR_TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionQuestion() { return GetToken(CompilerParser.LR_TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsteriskQuestion() { return GetToken(CompilerParser.LR_TAsteriskQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusQuestion() { return GetToken(CompilerParser.LR_TPlusQuestion, 0); }
		public Pr_LElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LElementContext pr_LElement() {
		Pr_LElementContext _localctx = new Pr_LElementContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_LElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TTilde) {
				{
				State = 270;
				_localctx.e_IsNegated = Match(LR_TTilde);
				}
			}

			State = 273;
			_localctx.e_Value = pr_LElementValue();
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) {
				{
				State = 274;
				_localctx.e_Multiplicity = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16911433728L) != 0)) ) {
					_localctx.e_Multiplicity = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LElementValueContext : ParserRuleContext {
		public Pr_LElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LElementValue; } }
	 
		public Pr_LElementValueContext() { }
		public virtual void CopyFrom(Pr_LElementValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_LElementValueTokensContext : Pr_LElementValueContext {
		public IToken e_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		public Pr_LElementValueTokensContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LElementValueTokens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LBlockContext : Pr_LElementValueContext {
		public IToken e_TLParen;
		public Pr_LAlternativeContext e_Alternatives1;
		public IToken _LR_TBar;
		public IList<IToken> _e_TBar1 = new List<IToken>();
		public Pr_LAlternativeContext _pr_LAlternative;
		public IList<Pr_LAlternativeContext> _e_Alternatives2 = new List<Pr_LAlternativeContext>();
		public IToken e_TRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext[] pr_LAlternative() {
			return GetRuleContexts<Pr_LAlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative(int i) {
			return GetRuleContext<Pr_LAlternativeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TBar() { return GetTokens(CompilerParser.LR_TBar); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar(int i) {
			return GetToken(CompilerParser.LR_TBar, i);
		}
		public Pr_LBlockContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LRangeContext : Pr_LElementValueContext {
		public IToken e_StartChar;
		public IToken e_TDotDot;
		public IToken e_EndChar;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TString() { return GetTokens(CompilerParser.LR_TString); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString(int i) {
			return GetToken(CompilerParser.LR_TString, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDotDot() { return GetToken(CompilerParser.LR_TDotDot, 0); }
		public Pr_LRangeContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LReferenceContext : Pr_LElementValueContext {
		public Pr_IdentifierContext e_Rule;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_LReferenceContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LElementValueContext pr_LElementValue() {
		Pr_LElementValueContext _localctx = new Pr_LElementValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_LElementValue);
		int _la;
		try {
			State = 293;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				_localctx = new Pr_LElementValueTokensContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				((Pr_LElementValueTokensContext)_localctx).e_Token = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LR_TDot || _la==LR_TString) ) {
					((Pr_LElementValueTokensContext)_localctx).e_Token = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				_localctx = new Pr_LBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				((Pr_LBlockContext)_localctx).e_TLParen = Match(LR_TLParen);
				State = 279;
				((Pr_LBlockContext)_localctx).e_Alternatives1 = pr_LAlternative();
				State = 284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 280;
					((Pr_LBlockContext)_localctx)._LR_TBar = Match(LR_TBar);
					((Pr_LBlockContext)_localctx)._e_TBar1.Add(((Pr_LBlockContext)_localctx)._LR_TBar);
					State = 281;
					((Pr_LBlockContext)_localctx)._pr_LAlternative = pr_LAlternative();
					((Pr_LBlockContext)_localctx)._e_Alternatives2.Add(((Pr_LBlockContext)_localctx)._pr_LAlternative);
					}
					}
					State = 286;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 287;
				((Pr_LBlockContext)_localctx).e_TRParen = Match(LR_TRParen);
				}
				break;
			case 3:
				_localctx = new Pr_LRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 289;
				((Pr_LRangeContext)_localctx).e_StartChar = Match(LR_TString);
				State = 290;
				((Pr_LRangeContext)_localctx).e_TDotDot = Match(LR_TDotDot);
				State = 291;
				((Pr_LRangeContext)_localctx).e_EndChar = Match(LR_TString);
				}
				break;
			case 4:
				_localctx = new Pr_LReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 292;
				((Pr_LReferenceContext)_localctx).e_Rule = pr_Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ExpressionContext : ParserRuleContext {
		public Pr_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Expression; } }
	 
		public Pr_ExpressionContext() { }
		public virtual void CopyFrom(Pr_ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ExpressionAlt1Context : Pr_ExpressionContext {
		public Pr_SingleExpressionContext e_SingleExpression;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleExpressionContext pr_SingleExpression() {
			return GetRuleContext<Pr_SingleExpressionContext>(0);
		}
		public Pr_ExpressionAlt1Context(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ExpressionAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ArrayExpressionContext : Pr_ExpressionContext {
		public IToken e_TLBrace;
		public Pr_SingleExpressionContext e_Items1;
		public IToken _LR_TComma;
		public IList<IToken> _e_TComma1 = new List<IToken>();
		public Pr_SingleExpressionContext _pr_SingleExpression;
		public IList<Pr_SingleExpressionContext> _e_Items2 = new List<Pr_SingleExpressionContext>();
		public IToken e_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(CompilerParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleExpressionContext[] pr_SingleExpression() {
			return GetRuleContexts<Pr_SingleExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleExpressionContext pr_SingleExpression(int i) {
			return GetRuleContext<Pr_SingleExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(CompilerParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(CompilerParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(CompilerParser.LR_TComma, i);
		}
		public Pr_ArrayExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ExpressionContext pr_Expression() {
		Pr_ExpressionContext _localctx = new Pr_ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_Expression);
		int _la;
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KNull:
			case LR_KTrue:
			case LR_KFalse:
			case LR_TInteger:
			case LR_TIdentifier:
			case LR_TString:
				_localctx = new Pr_ExpressionAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 295;
				((Pr_ExpressionAlt1Context)_localctx).e_SingleExpression = pr_SingleExpression();
				}
				break;
			case LR_TLBrace:
				_localctx = new Pr_ArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 296;
				((Pr_ArrayExpressionContext)_localctx).e_TLBrace = Match(LR_TLBrace);
				State = 297;
				((Pr_ArrayExpressionContext)_localctx).e_Items1 = pr_SingleExpression();
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 298;
					((Pr_ArrayExpressionContext)_localctx)._LR_TComma = Match(LR_TComma);
					((Pr_ArrayExpressionContext)_localctx)._e_TComma1.Add(((Pr_ArrayExpressionContext)_localctx)._LR_TComma);
					State = 299;
					((Pr_ArrayExpressionContext)_localctx)._pr_SingleExpression = pr_SingleExpression();
					((Pr_ArrayExpressionContext)_localctx)._e_Items2.Add(((Pr_ArrayExpressionContext)_localctx)._pr_SingleExpression);
					}
					}
					State = 304;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 305;
				((Pr_ArrayExpressionContext)_localctx).e_TRBrace = Match(LR_TRBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SingleExpressionContext : ParserRuleContext {
		public Pr_SingleExpressionBlock1Context e_Value;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleExpressionBlock1Context pr_SingleExpressionBlock1() {
			return GetRuleContext<Pr_SingleExpressionBlock1Context>(0);
		}
		public Pr_SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SingleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SingleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SingleExpressionContext pr_SingleExpression() {
		Pr_SingleExpressionContext _localctx = new Pr_SingleExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_pr_SingleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			_localctx.e_Value = pr_SingleExpressionBlock1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserAnnotationContext : ParserRuleContext {
		public IToken e_TLBracket;
		public Pr_QualifierContext e_AttributeClass;
		public Pr_AnnotationArgumentsContext e_AnnotationArguments;
		public IToken e_TRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(CompilerParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(CompilerParser.LR_TRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
			return GetRuleContext<Pr_AnnotationArgumentsContext>(0);
		}
		public Pr_ParserAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserAnnotationContext pr_ParserAnnotation() {
		Pr_ParserAnnotationContext _localctx = new Pr_ParserAnnotationContext(Context, State);
		EnterRule(_localctx, 30, RULE_pr_ParserAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_localctx.e_TLBracket = Match(LR_TLBracket);
			State = 312;
			_localctx.e_AttributeClass = pr_Qualifier();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLParen) {
				{
				State = 313;
				_localctx.e_AnnotationArguments = pr_AnnotationArguments();
				}
			}

			State = 316;
			_localctx.e_TRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerAnnotationContext : ParserRuleContext {
		public IToken e_TLBracket;
		public Pr_QualifierContext e_AttributeClass;
		public Pr_AnnotationArgumentsContext e_AnnotationArguments;
		public IToken e_TRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(CompilerParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(CompilerParser.LR_TRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
			return GetRuleContext<Pr_AnnotationArgumentsContext>(0);
		}
		public Pr_LexerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerAnnotationContext pr_LexerAnnotation() {
		Pr_LexerAnnotationContext _localctx = new Pr_LexerAnnotationContext(Context, State);
		EnterRule(_localctx, 32, RULE_pr_LexerAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			_localctx.e_TLBracket = Match(LR_TLBracket);
			State = 319;
			_localctx.e_AttributeClass = pr_Qualifier();
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLParen) {
				{
				State = 320;
				_localctx.e_AnnotationArguments = pr_AnnotationArguments();
				}
			}

			State = 323;
			_localctx.e_TRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentsContext : ParserRuleContext {
		public IToken e_TLParen;
		public Pr_AnnotationArgumentContext e_Arguments1;
		public IToken _LR_TComma;
		public IList<IToken> _e_TComma1 = new List<IToken>();
		public Pr_AnnotationArgumentContext _pr_AnnotationArgument;
		public IList<Pr_AnnotationArgumentContext> _e_Arguments2 = new List<Pr_AnnotationArgumentContext>();
		public IToken e_TRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentContext[] pr_AnnotationArgument() {
			return GetRuleContexts<Pr_AnnotationArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentContext pr_AnnotationArgument(int i) {
			return GetRuleContext<Pr_AnnotationArgumentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(CompilerParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(CompilerParser.LR_TComma, i);
		}
		public Pr_AnnotationArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
		Pr_AnnotationArgumentsContext _localctx = new Pr_AnnotationArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_pr_AnnotationArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			_localctx.e_TLParen = Match(LR_TLParen);
			State = 326;
			_localctx.e_Arguments1 = pr_AnnotationArgument();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 327;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._e_TComma1.Add(_localctx._LR_TComma);
				State = 328;
				_localctx._pr_AnnotationArgument = pr_AnnotationArgument();
				_localctx._e_Arguments2.Add(_localctx._pr_AnnotationArgument);
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 334;
			_localctx.e_TRParen = Match(LR_TRParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentContext : ParserRuleContext {
		public Pr_AnnotationArgumentBlock1Context e_Block;
		public Pr_ExpressionContext e_Value;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentBlock1Context pr_AnnotationArgumentBlock1() {
			return GetRuleContext<Pr_AnnotationArgumentBlock1Context>(0);
		}
		public Pr_AnnotationArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
		Pr_AnnotationArgumentContext _localctx = new Pr_AnnotationArgumentContext(Context, State);
		EnterRule(_localctx, 36, RULE_pr_AnnotationArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				{
				State = 336;
				_localctx.e_Block = pr_AnnotationArgumentBlock1();
				}
				break;
			}
			State = 339;
			_localctx.e_Value = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ReturnTypeIdentifierContext : ParserRuleContext {
		public Pr_ReturnTypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ReturnTypeIdentifier; } }
	 
		public Pr_ReturnTypeIdentifierContext() { }
		public virtual void CopyFrom(Pr_ReturnTypeIdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ReturnTypeIdentifierAlt1Context : Pr_ReturnTypeIdentifierContext {
		public IToken e_TPrimitiveType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPrimitiveType() { return GetToken(CompilerParser.LR_TPrimitiveType, 0); }
		public Pr_ReturnTypeIdentifierAlt1Context(Pr_ReturnTypeIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeIdentifierAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ReturnTypeIdentifierAlt2Context : Pr_ReturnTypeIdentifierContext {
		public Pr_IdentifierContext e_Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_ReturnTypeIdentifierAlt2Context(Pr_ReturnTypeIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeIdentifierAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ReturnTypeIdentifierContext pr_ReturnTypeIdentifier() {
		Pr_ReturnTypeIdentifierContext _localctx = new Pr_ReturnTypeIdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_pr_ReturnTypeIdentifier);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TPrimitiveType:
				_localctx = new Pr_ReturnTypeIdentifierAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 341;
				((Pr_ReturnTypeIdentifierAlt1Context)_localctx).e_TPrimitiveType = Match(LR_TPrimitiveType);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ReturnTypeIdentifierAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 342;
				((Pr_ReturnTypeIdentifierAlt2Context)_localctx).e_Identifier = pr_Identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ReturnTypeQualifierContext : ParserRuleContext {
		public Pr_ReturnTypeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ReturnTypeQualifier; } }
	 
		public Pr_ReturnTypeQualifierContext() { }
		public virtual void CopyFrom(Pr_ReturnTypeQualifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ReturnTypeQualifierAlt1Context : Pr_ReturnTypeQualifierContext {
		public IToken e_TPrimitiveType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPrimitiveType() { return GetToken(CompilerParser.LR_TPrimitiveType, 0); }
		public Pr_ReturnTypeQualifierAlt1Context(Pr_ReturnTypeQualifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeQualifierAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ReturnTypeQualifierAlt2Context : Pr_ReturnTypeQualifierContext {
		public Pr_QualifierContext e_Qualifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ReturnTypeQualifierAlt2Context(Pr_ReturnTypeQualifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeQualifierAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
		Pr_ReturnTypeQualifierContext _localctx = new Pr_ReturnTypeQualifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_pr_ReturnTypeQualifier);
		try {
			State = 347;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TPrimitiveType:
				_localctx = new Pr_ReturnTypeQualifierAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 345;
				((Pr_ReturnTypeQualifierAlt1Context)_localctx).e_TPrimitiveType = Match(LR_TPrimitiveType);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ReturnTypeQualifierAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 346;
				((Pr_ReturnTypeQualifierAlt2Context)_localctx).e_Qualifier = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext e_Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 42, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			_localctx.e_Identifier = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext e_Identifier;
		public IToken _LR_TDot;
		public IList<IToken> _e_TDot1 = new List<IToken>();
		public Pr_IdentifierContext _pr_Identifier;
		public IList<Pr_IdentifierContext> _e_Identifier1 = new List<Pr_IdentifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext[] pr_Identifier() {
			return GetRuleContexts<Pr_IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier(int i) {
			return GetRuleContext<Pr_IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TDot() { return GetTokens(CompilerParser.LR_TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot(int i) {
			return GetToken(CompilerParser.LR_TDot, i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_pr_Qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			_localctx.e_Identifier = pr_Identifier();
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TDot) {
				{
				{
				State = 352;
				_localctx._LR_TDot = Match(LR_TDot);
				_localctx._e_TDot1.Add(_localctx._LR_TDot);
				State = 353;
				_localctx._pr_Identifier = pr_Identifier();
				_localctx._e_Identifier1.Add(_localctx._pr_Identifier);
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public IToken e_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(CompilerParser.LR_TIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TVerbatimIdentifier() { return GetToken(CompilerParser.LR_TVerbatimIdentifier, 0); }
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_pr_Identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			_localctx.e_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) ) {
				_localctx.e_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SimpleIdentifierContext : ParserRuleContext {
		public IToken e_TIdentifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(CompilerParser.LR_TIdentifier, 0); }
		public Pr_SimpleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SimpleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SimpleIdentifierContext pr_SimpleIdentifier() {
		Pr_SimpleIdentifierContext _localctx = new Pr_SimpleIdentifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_pr_SimpleIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			_localctx.e_TIdentifier = Match(LR_TIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleBlock1Context : ParserRuleContext {
		public Pr_RuleBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_RuleBlock1; } }
	 
		public Pr_RuleBlock1Context() { }
		public virtual void CopyFrom(Pr_RuleBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_RuleBlock1Alt1Context : Pr_RuleBlock1Context {
		public Pr_ReturnTypeIdentifierContext e_ReturnType;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeIdentifierContext pr_ReturnTypeIdentifier() {
			return GetRuleContext<Pr_ReturnTypeIdentifierContext>(0);
		}
		public Pr_RuleBlock1Alt1Context(Pr_RuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_RuleBlock1Alt2Context : Pr_RuleBlock1Context {
		public Pr_IdentifierContext e_Identifier;
		public IToken e_KReturns;
		public Pr_ReturnTypeQualifierContext e_ReturnType1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_RuleBlock1Alt2Context(Pr_RuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleBlock1Context pr_RuleBlock1() {
		Pr_RuleBlock1Context _localctx = new Pr_RuleBlock1Context(Context, State);
		EnterRule(_localctx, 50, RULE_pr_RuleBlock1);
		try {
			State = 368;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new Pr_RuleBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 363;
				((Pr_RuleBlock1Alt1Context)_localctx).e_ReturnType = pr_ReturnTypeIdentifier();
				}
				break;
			case 2:
				_localctx = new Pr_RuleBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 364;
				((Pr_RuleBlock1Alt2Context)_localctx).e_Identifier = pr_Identifier();
				State = 365;
				((Pr_RuleBlock1Alt2Context)_localctx).e_KReturns = Match(LR_KReturns);
				State = 366;
				((Pr_RuleBlock1Alt2Context)_localctx).e_ReturnType1 = pr_ReturnTypeQualifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleAlternativesBlockContext : ParserRuleContext {
		public IToken e_TBar1;
		public Pr_AlternativeContext e_Alternatives2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative() {
			return GetRuleContext<Pr_AlternativeContext>(0);
		}
		public Pr_RuleAlternativesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_RuleAlternativesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleAlternativesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleAlternativesBlockContext pr_RuleAlternativesBlock() {
		Pr_RuleAlternativesBlockContext _localctx = new Pr_RuleAlternativesBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_pr_RuleAlternativesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_localctx.e_TBar1 = Match(LR_TBar);
			State = 371;
			_localctx.e_Alternatives2 = pr_Alternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BlockBlock1Context : ParserRuleContext {
		public IToken e_KReturns;
		public Pr_ReturnTypeQualifierContext e_ReturnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_BlockBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BlockBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BlockBlock1Context pr_BlockBlock1() {
		Pr_BlockBlock1Context _localctx = new Pr_BlockBlock1Context(Context, State);
		EnterRule(_localctx, 54, RULE_pr_BlockBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			_localctx.e_KReturns = Match(LR_KReturns);
			State = 374;
			_localctx.e_ReturnType = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BlockAlternativesBlockContext : ParserRuleContext {
		public IToken e_TBar1;
		public Pr_AlternativeContext e_Alternatives2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative() {
			return GetRuleContext<Pr_AlternativeContext>(0);
		}
		public Pr_BlockAlternativesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BlockAlternativesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockAlternativesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BlockAlternativesBlockContext pr_BlockAlternativesBlock() {
		Pr_BlockAlternativesBlockContext _localctx = new Pr_BlockAlternativesBlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_pr_BlockAlternativesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			_localctx.e_TBar1 = Match(LR_TBar);
			State = 377;
			_localctx.e_Alternatives2 = pr_Alternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BlockInlineAlternativesBlockContext : ParserRuleContext {
		public IToken e_TBar1;
		public Pr_AlternativeContext e_Alternatives2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative() {
			return GetRuleContext<Pr_AlternativeContext>(0);
		}
		public Pr_BlockInlineAlternativesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BlockInlineAlternativesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockInlineAlternativesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BlockInlineAlternativesBlockContext pr_BlockInlineAlternativesBlock() {
		Pr_BlockInlineAlternativesBlockContext _localctx = new Pr_BlockInlineAlternativesBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_pr_BlockInlineAlternativesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			_localctx.e_TBar1 = Match(LR_TBar);
			State = 380;
			_localctx.e_Alternatives2 = pr_Alternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AlternativeBlock1Context : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _e_Annotations = new List<Pr_ParserAnnotationContext>();
		public IToken e_KAlt;
		public Pr_NameContext e_Name;
		public Pr_AlternativeBlock1Block1Context e_Block;
		public IToken e_TColon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAlt() { return GetToken(CompilerParser.LR_KAlt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeBlock1Block1Context pr_AlternativeBlock1Block1() {
			return GetRuleContext<Pr_AlternativeBlock1Block1Context>(0);
		}
		public Pr_AlternativeBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AlternativeBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AlternativeBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AlternativeBlock1Context pr_AlternativeBlock1() {
		Pr_AlternativeBlock1Context _localctx = new Pr_AlternativeBlock1Context(Context, State);
		EnterRule(_localctx, 60, RULE_pr_AlternativeBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 382;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._e_Annotations.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 388;
			_localctx.e_KAlt = Match(LR_KAlt);
			State = 389;
			_localctx.e_Name = pr_Name();
			State = 391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KReturns) {
				{
				State = 390;
				_localctx.e_Block = pr_AlternativeBlock1Block1();
				}
			}

			State = 393;
			_localctx.e_TColon = Match(LR_TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AlternativeBlock1Block1Context : ParserRuleContext {
		public IToken e_KReturns;
		public Pr_ReturnTypeQualifierContext e_ReturnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_AlternativeBlock1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AlternativeBlock1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AlternativeBlock1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AlternativeBlock1Block1Context pr_AlternativeBlock1Block1() {
		Pr_AlternativeBlock1Block1Context _localctx = new Pr_AlternativeBlock1Block1Context(Context, State);
		EnterRule(_localctx, 62, RULE_pr_AlternativeBlock1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_localctx.e_KReturns = Match(LR_KReturns);
			State = 396;
			_localctx.e_ReturnType = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AlternativeBlock2Context : ParserRuleContext {
		public IToken e_TEqGt;
		public Pr_ExpressionContext e_ReturnValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEqGt() { return GetToken(CompilerParser.LR_TEqGt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		public Pr_AlternativeBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AlternativeBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AlternativeBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AlternativeBlock2Context pr_AlternativeBlock2() {
		Pr_AlternativeBlock2Context _localctx = new Pr_AlternativeBlock2Context(Context, State);
		EnterRule(_localctx, 64, RULE_pr_AlternativeBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			_localctx.e_TEqGt = Match(LR_TEqGt);
			State = 399;
			_localctx.e_ReturnValue = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ElementBlock1Context : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _e_NameAnnotations = new List<Pr_ParserAnnotationContext>();
		public Pr_IdentifierContext e_SymbolProperty;
		public IToken e_Assignment;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEq() { return GetToken(CompilerParser.LR_TEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionEq() { return GetToken(CompilerParser.LR_TQuestionEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TExclEq() { return GetToken(CompilerParser.LR_TExclEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusEq() { return GetToken(CompilerParser.LR_TPlusEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		public Pr_ElementBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ElementBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ElementBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ElementBlock1Context pr_ElementBlock1() {
		Pr_ElementBlock1Context _localctx = new Pr_ElementBlock1Context(Context, State);
		EnterRule(_localctx, 66, RULE_pr_ElementBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 401;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._e_NameAnnotations.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 407;
			_localctx.e_SymbolProperty = pr_Identifier();
			State = 408;
			_localctx.e_Assignment = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0)) ) {
				_localctx.e_Assignment = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleRefAlt3ReferencedTypesBlockContext : ParserRuleContext {
		public IToken e_TComma1;
		public Pr_ReturnTypeQualifierContext e_ReferencedTypes2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_RuleRefAlt3ReferencedTypesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_RuleRefAlt3ReferencedTypesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleRefAlt3ReferencedTypesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleRefAlt3ReferencedTypesBlockContext pr_RuleRefAlt3ReferencedTypesBlock() {
		Pr_RuleRefAlt3ReferencedTypesBlockContext _localctx = new Pr_RuleRefAlt3ReferencedTypesBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_pr_RuleRefAlt3ReferencedTypesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_localctx.e_TComma1 = Match(LR_TComma);
			State = 411;
			_localctx.e_ReferencedTypes2 = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TokenBlock1Context : ParserRuleContext {
		public Pr_TokenBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TokenBlock1; } }
	 
		public Pr_TokenBlock1Context() { }
		public virtual void CopyFrom(Pr_TokenBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_TokenBlock1Alt1Context : Pr_TokenBlock1Context {
		public IToken e_KToken;
		public Pr_NameContext e_Name;
		public Pr_TokenBlock1Alt1Block1Context e_Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KToken() { return GetToken(CompilerParser.LR_KToken, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TokenBlock1Alt1Block1Context pr_TokenBlock1Alt1Block1() {
			return GetRuleContext<Pr_TokenBlock1Alt1Block1Context>(0);
		}
		public Pr_TokenBlock1Alt1Context(Pr_TokenBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TokenBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_TokenBlock1Alt2Context : Pr_TokenBlock1Context {
		public IToken e_IsTrivia;
		public Pr_NameContext e_Name1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KHidden() { return GetToken(CompilerParser.LR_KHidden, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_TokenBlock1Alt2Context(Pr_TokenBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TokenBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TokenBlock1Context pr_TokenBlock1() {
		Pr_TokenBlock1Context _localctx = new Pr_TokenBlock1Context(Context, State);
		EnterRule(_localctx, 70, RULE_pr_TokenBlock1);
		int _la;
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KToken:
				_localctx = new Pr_TokenBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 413;
				((Pr_TokenBlock1Alt1Context)_localctx).e_KToken = Match(LR_KToken);
				State = 414;
				((Pr_TokenBlock1Alt1Context)_localctx).e_Name = pr_Name();
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KReturns) {
					{
					State = 415;
					((Pr_TokenBlock1Alt1Context)_localctx).e_Block = pr_TokenBlock1Alt1Block1();
					}
				}

				}
				break;
			case LR_KHidden:
				_localctx = new Pr_TokenBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 418;
				((Pr_TokenBlock1Alt2Context)_localctx).e_IsTrivia = Match(LR_KHidden);
				State = 419;
				((Pr_TokenBlock1Alt2Context)_localctx).e_Name1 = pr_Name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TokenBlock1Alt1Block1Context : ParserRuleContext {
		public IToken e_KReturns;
		public Pr_ReturnTypeQualifierContext e_ReturnType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_TokenBlock1Alt1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TokenBlock1Alt1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TokenBlock1Alt1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TokenBlock1Alt1Block1Context pr_TokenBlock1Alt1Block1() {
		Pr_TokenBlock1Alt1Block1Context _localctx = new Pr_TokenBlock1Alt1Block1Context(Context, State);
		EnterRule(_localctx, 72, RULE_pr_TokenBlock1Alt1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			_localctx.e_KReturns = Match(LR_KReturns);
			State = 423;
			_localctx.e_ReturnType = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TokenAlternativesBlockContext : ParserRuleContext {
		public IToken e_TBar2;
		public Pr_LAlternativeContext e_Alternatives4;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_TokenAlternativesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TokenAlternativesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TokenAlternativesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TokenAlternativesBlockContext pr_TokenAlternativesBlock() {
		Pr_TokenAlternativesBlockContext _localctx = new Pr_TokenAlternativesBlockContext(Context, State);
		EnterRule(_localctx, 74, RULE_pr_TokenAlternativesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			_localctx.e_TBar2 = Match(LR_TBar);
			State = 426;
			_localctx.e_Alternatives4 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_FragmentAlternativesBlockContext : ParserRuleContext {
		public IToken e_TBar3;
		public Pr_LAlternativeContext e_Alternatives6;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_FragmentAlternativesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_FragmentAlternativesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_FragmentAlternativesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_FragmentAlternativesBlockContext pr_FragmentAlternativesBlock() {
		Pr_FragmentAlternativesBlockContext _localctx = new Pr_FragmentAlternativesBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_pr_FragmentAlternativesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			_localctx.e_TBar3 = Match(LR_TBar);
			State = 429;
			_localctx.e_Alternatives6 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LBlockAlternativesBlockContext : ParserRuleContext {
		public IToken e_TBar1;
		public Pr_LAlternativeContext e_Alternatives2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_LBlockAlternativesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LBlockAlternativesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LBlockAlternativesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LBlockAlternativesBlockContext pr_LBlockAlternativesBlock() {
		Pr_LBlockAlternativesBlockContext _localctx = new Pr_LBlockAlternativesBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_pr_LBlockAlternativesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_localctx.e_TBar1 = Match(LR_TBar);
			State = 432;
			_localctx.e_Alternatives2 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SingleExpressionBlock1Context : ParserRuleContext {
		public Pr_SingleExpressionBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SingleExpressionBlock1; } }
	 
		public Pr_SingleExpressionBlock1Context() { }
		public virtual void CopyFrom(Pr_SingleExpressionBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_SimpleQualifierContext : Pr_SingleExpressionBlock1Context {
		public Pr_SimpleIdentifierContext e_SimpleIdentifier;
		public IToken _LR_TDot;
		public IList<IToken> _e_TDot1 = new List<IToken>();
		public Pr_SimpleIdentifierContext _pr_SimpleIdentifier;
		public IList<Pr_SimpleIdentifierContext> _e_SimpleIdentifier1 = new List<Pr_SimpleIdentifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleIdentifierContext[] pr_SimpleIdentifier() {
			return GetRuleContexts<Pr_SimpleIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleIdentifierContext pr_SimpleIdentifier(int i) {
			return GetRuleContext<Pr_SimpleIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TDot() { return GetTokens(CompilerParser.LR_TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot(int i) {
			return GetToken(CompilerParser.LR_TDot, i);
		}
		public Pr_SimpleQualifierContext(Pr_SingleExpressionBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_TokensContext : Pr_SingleExpressionBlock1Context {
		public IToken e_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNull() { return GetToken(CompilerParser.LR_KNull, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KTrue() { return GetToken(CompilerParser.LR_KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFalse() { return GetToken(CompilerParser.LR_KFalse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TInteger() { return GetToken(CompilerParser.LR_TInteger, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_TokensContext(Pr_SingleExpressionBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Tokens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SingleExpressionBlock1Context pr_SingleExpressionBlock1() {
		Pr_SingleExpressionBlock1Context _localctx = new Pr_SingleExpressionBlock1Context(Context, State);
		EnterRule(_localctx, 80, RULE_pr_SingleExpressionBlock1);
		int _la;
		try {
			State = 443;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KNull:
			case LR_KTrue:
			case LR_KFalse:
			case LR_TInteger:
			case LR_TString:
				_localctx = new Pr_TokensContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 434;
				((Pr_TokensContext)_localctx).e_Token = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 297967651127296L) != 0)) ) {
					((Pr_TokensContext)_localctx).e_Token = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LR_TIdentifier:
				_localctx = new Pr_SimpleQualifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 435;
				((Pr_SimpleQualifierContext)_localctx).e_SimpleIdentifier = pr_SimpleIdentifier();
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TDot) {
					{
					{
					State = 436;
					((Pr_SimpleQualifierContext)_localctx)._LR_TDot = Match(LR_TDot);
					((Pr_SimpleQualifierContext)_localctx)._e_TDot1.Add(((Pr_SimpleQualifierContext)_localctx)._LR_TDot);
					State = 437;
					((Pr_SimpleQualifierContext)_localctx)._pr_SimpleIdentifier = pr_SimpleIdentifier();
					((Pr_SimpleQualifierContext)_localctx)._e_SimpleIdentifier1.Add(((Pr_SimpleQualifierContext)_localctx)._pr_SimpleIdentifier);
					}
					}
					State = 442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ArrayExpressionItemsBlockContext : ParserRuleContext {
		public IToken e_TComma1;
		public Pr_SingleExpressionContext e_Items2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleExpressionContext pr_SingleExpression() {
			return GetRuleContext<Pr_SingleExpressionContext>(0);
		}
		public Pr_ArrayExpressionItemsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ArrayExpressionItemsBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpressionItemsBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ArrayExpressionItemsBlockContext pr_ArrayExpressionItemsBlock() {
		Pr_ArrayExpressionItemsBlockContext _localctx = new Pr_ArrayExpressionItemsBlockContext(Context, State);
		EnterRule(_localctx, 82, RULE_pr_ArrayExpressionItemsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445;
			_localctx.e_TComma1 = Match(LR_TComma);
			State = 446;
			_localctx.e_Items2 = pr_SingleExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentsArgumentsBlockContext : ParserRuleContext {
		public IToken e_TComma1;
		public Pr_AnnotationArgumentContext e_Arguments2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
			return GetRuleContext<Pr_AnnotationArgumentContext>(0);
		}
		public Pr_AnnotationArgumentsArgumentsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgumentsArgumentsBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgumentsArgumentsBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentsArgumentsBlockContext pr_AnnotationArgumentsArgumentsBlock() {
		Pr_AnnotationArgumentsArgumentsBlockContext _localctx = new Pr_AnnotationArgumentsArgumentsBlockContext(Context, State);
		EnterRule(_localctx, 84, RULE_pr_AnnotationArgumentsArgumentsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448;
			_localctx.e_TComma1 = Match(LR_TComma);
			State = 449;
			_localctx.e_Arguments2 = pr_AnnotationArgument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentBlock1Context : ParserRuleContext {
		public Pr_IdentifierContext e_NamedParameter;
		public IToken e_TColon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		public Pr_AnnotationArgumentBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgumentBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgumentBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentBlock1Context pr_AnnotationArgumentBlock1() {
		Pr_AnnotationArgumentBlock1Context _localctx = new Pr_AnnotationArgumentBlock1Context(Context, State);
		EnterRule(_localctx, 86, RULE_pr_AnnotationArgumentBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451;
			_localctx.e_NamedParameter = pr_Identifier();
			State = 452;
			_localctx.e_TColon = Match(LR_TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierIdentifierBlockContext : ParserRuleContext {
		public IToken e_TDot1;
		public Pr_IdentifierContext e_Identifier1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierIdentifierBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierIdentifierBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierIdentifierBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierIdentifierBlockContext pr_QualifierIdentifierBlock() {
		Pr_QualifierIdentifierBlockContext _localctx = new Pr_QualifierIdentifierBlockContext(Context, State);
		EnterRule(_localctx, 88, RULE_pr_QualifierIdentifierBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			_localctx.e_TDot1 = Match(LR_TDot);
			State = 455;
			_localctx.e_Identifier1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SimpleQualifierSimpleIdentifierBlock1Context : ParserRuleContext {
		public IToken e_TDot1;
		public Pr_SimpleIdentifierContext e_SimpleIdentifier1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleIdentifierContext pr_SimpleIdentifier() {
			return GetRuleContext<Pr_SimpleIdentifierContext>(0);
		}
		public Pr_SimpleQualifierSimpleIdentifierBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SimpleQualifierSimpleIdentifierBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleQualifierSimpleIdentifierBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SimpleQualifierSimpleIdentifierBlock1Context pr_SimpleQualifierSimpleIdentifierBlock1() {
		Pr_SimpleQualifierSimpleIdentifierBlock1Context _localctx = new Pr_SimpleQualifierSimpleIdentifierBlock1Context(Context, State);
		EnterRule(_localctx, 90, RULE_pr_SimpleQualifierSimpleIdentifierBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457;
			_localctx.e_TDot1 = Match(LR_TDot);
			State = 458;
			_localctx.e_SimpleIdentifier1 = pr_SimpleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,53,461,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,0,5,0,97,8,0,10,0,12,0,100,
		9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,3,1,119,8,1,1,2,1,2,5,2,123,8,2,10,2,12,2,126,9,2,1,3,1,3,1,3,1,3,1,
		3,1,4,5,4,134,8,4,10,4,12,4,137,9,4,1,5,1,5,5,5,141,8,5,10,5,12,5,144,
		9,5,1,5,1,5,1,5,3,5,149,8,5,1,5,1,5,1,5,1,5,5,5,155,8,5,10,5,12,5,158,
		9,5,1,5,1,5,1,5,5,5,163,8,5,10,5,12,5,166,9,5,1,5,1,5,1,5,1,5,1,5,5,5,
		173,8,5,10,5,12,5,176,9,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,186,8,5,
		10,5,12,5,189,9,5,1,5,1,5,3,5,193,8,5,1,6,5,6,196,8,6,10,6,12,6,199,9,
		6,1,6,1,6,1,6,1,6,1,6,5,6,206,8,6,10,6,12,6,209,9,6,1,6,1,6,1,7,3,7,214,
		8,7,1,7,4,7,217,8,7,11,7,12,7,218,1,7,3,7,222,8,7,1,8,3,8,225,8,8,1,8,
		5,8,228,8,8,10,8,12,8,231,9,8,1,8,1,8,3,8,235,8,8,1,9,1,9,1,9,1,9,1,9,
		5,9,242,8,9,10,9,12,9,245,9,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,
		256,8,9,10,9,12,9,259,9,9,1,9,1,9,3,9,263,8,9,1,10,5,10,266,8,10,10,10,
		12,10,269,9,10,1,11,3,11,272,8,11,1,11,1,11,3,11,276,8,11,1,12,1,12,1,
		12,1,12,1,12,5,12,283,8,12,10,12,12,12,286,9,12,1,12,1,12,1,12,1,12,1,
		12,1,12,3,12,294,8,12,1,13,1,13,1,13,1,13,1,13,5,13,301,8,13,10,13,12,
		13,304,9,13,1,13,1,13,3,13,308,8,13,1,14,1,14,1,15,1,15,1,15,3,15,315,
		8,15,1,15,1,15,1,16,1,16,1,16,3,16,322,8,16,1,16,1,16,1,17,1,17,1,17,1,
		17,5,17,330,8,17,10,17,12,17,333,9,17,1,17,1,17,1,18,3,18,338,8,18,1,18,
		1,18,1,19,1,19,3,19,344,8,19,1,20,1,20,3,20,348,8,20,1,21,1,21,1,22,1,
		22,1,22,5,22,355,8,22,10,22,12,22,358,9,22,1,23,1,23,1,24,1,24,1,25,1,
		25,1,25,1,25,1,25,3,25,369,8,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,
		1,28,1,29,1,29,1,29,1,30,5,30,384,8,30,10,30,12,30,387,9,30,1,30,1,30,
		1,30,3,30,392,8,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,5,33,403,
		8,33,10,33,12,33,406,9,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
		3,35,417,8,35,1,35,1,35,3,35,421,8,35,1,36,1,36,1,36,1,37,1,37,1,37,1,
		38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,439,8,40,10,40,12,
		40,442,9,40,3,40,444,8,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,
		1,44,1,44,1,44,1,45,1,45,1,45,1,45,0,0,46,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,86,88,90,0,6,1,0,28,33,2,0,16,16,48,48,2,0,19,
		19,48,48,1,0,46,47,1,0,24,27,2,0,40,43,48,48,466,0,92,1,0,0,0,2,118,1,
		0,0,0,4,120,1,0,0,0,6,127,1,0,0,0,8,135,1,0,0,0,10,192,1,0,0,0,12,197,
		1,0,0,0,14,213,1,0,0,0,16,224,1,0,0,0,18,262,1,0,0,0,20,267,1,0,0,0,22,
		271,1,0,0,0,24,293,1,0,0,0,26,307,1,0,0,0,28,309,1,0,0,0,30,311,1,0,0,
		0,32,318,1,0,0,0,34,325,1,0,0,0,36,337,1,0,0,0,38,343,1,0,0,0,40,347,1,
		0,0,0,42,349,1,0,0,0,44,351,1,0,0,0,46,359,1,0,0,0,48,361,1,0,0,0,50,368,
		1,0,0,0,52,370,1,0,0,0,54,373,1,0,0,0,56,376,1,0,0,0,58,379,1,0,0,0,60,
		385,1,0,0,0,62,395,1,0,0,0,64,398,1,0,0,0,66,404,1,0,0,0,68,410,1,0,0,
		0,70,420,1,0,0,0,72,422,1,0,0,0,74,425,1,0,0,0,76,428,1,0,0,0,78,431,1,
		0,0,0,80,443,1,0,0,0,82,445,1,0,0,0,84,448,1,0,0,0,86,451,1,0,0,0,88,454,
		1,0,0,0,90,457,1,0,0,0,92,93,5,3,0,0,93,94,3,44,22,0,94,98,5,4,0,0,95,
		97,3,2,1,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,
		101,1,0,0,0,100,98,1,0,0,0,101,102,3,4,2,0,102,103,5,0,0,1,103,1,1,0,0,
		0,104,105,5,5,0,0,105,106,3,44,22,0,106,107,5,4,0,0,107,119,1,0,0,0,108,
		109,5,5,0,0,109,110,5,6,0,0,110,111,3,44,22,0,111,112,5,4,0,0,112,119,
		1,0,0,0,113,114,5,5,0,0,114,115,5,7,0,0,115,116,3,44,22,0,116,117,5,4,
		0,0,117,119,1,0,0,0,118,104,1,0,0,0,118,108,1,0,0,0,118,113,1,0,0,0,119,
		3,1,0,0,0,120,124,3,6,3,0,121,123,3,12,6,0,122,121,1,0,0,0,123,126,1,0,
		0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,5,1,0,0,0,126,124,1,0,0,0,127,
		128,5,8,0,0,128,129,3,42,21,0,129,130,5,4,0,0,130,131,3,8,4,0,131,7,1,
		0,0,0,132,134,3,10,5,0,133,132,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,
		135,136,1,0,0,0,136,9,1,0,0,0,137,135,1,0,0,0,138,193,3,12,6,0,139,141,
		3,30,15,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,
		0,0,143,145,1,0,0,0,144,142,1,0,0,0,145,146,5,10,0,0,146,148,3,42,21,0,
		147,149,3,54,27,0,148,147,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,
		151,5,9,0,0,151,156,3,14,7,0,152,153,5,35,0,0,153,155,3,14,7,0,154,152,
		1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,
		0,158,156,1,0,0,0,159,160,5,4,0,0,160,193,1,0,0,0,161,163,3,32,16,0,162,
		161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,167,1,
		0,0,0,166,164,1,0,0,0,167,168,3,70,35,0,168,169,5,9,0,0,169,174,3,20,10,
		0,170,171,5,35,0,0,171,173,3,20,10,0,172,170,1,0,0,0,173,176,1,0,0,0,174,
		172,1,0,0,0,174,175,1,0,0,0,175,177,1,0,0,0,176,174,1,0,0,0,177,178,5,
		4,0,0,178,193,1,0,0,0,179,180,5,17,0,0,180,181,3,42,21,0,181,182,5,9,0,
		0,182,187,3,20,10,0,183,184,5,35,0,0,184,186,3,20,10,0,185,183,1,0,0,0,
		186,189,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,187,
		1,0,0,0,190,191,5,4,0,0,191,193,1,0,0,0,192,138,1,0,0,0,192,142,1,0,0,
		0,192,164,1,0,0,0,192,179,1,0,0,0,193,11,1,0,0,0,194,196,3,30,15,0,195,
		194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,1,
		0,0,0,199,197,1,0,0,0,200,201,3,50,25,0,201,202,5,9,0,0,202,207,3,14,7,
		0,203,204,5,35,0,0,204,206,3,14,7,0,205,203,1,0,0,0,206,209,1,0,0,0,207,
		205,1,0,0,0,207,208,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,5,
		4,0,0,211,13,1,0,0,0,212,214,3,60,30,0,213,212,1,0,0,0,213,214,1,0,0,0,
		214,216,1,0,0,0,215,217,3,16,8,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,
		1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,222,3,64,32,0,221,220,1,0,
		0,0,221,222,1,0,0,0,222,15,1,0,0,0,223,225,3,66,33,0,224,223,1,0,0,0,224,
		225,1,0,0,0,225,229,1,0,0,0,226,228,3,30,15,0,227,226,1,0,0,0,228,231,
		1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,
		0,232,234,3,18,9,0,233,235,7,0,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,
		17,1,0,0,0,236,263,7,1,0,0,237,238,5,11,0,0,238,243,3,14,7,0,239,240,5,
		35,0,0,240,242,3,14,7,0,241,239,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,
		0,243,244,1,0,0,0,244,246,1,0,0,0,245,243,1,0,0,0,246,247,5,12,0,0,247,
		263,1,0,0,0,248,263,3,46,23,0,249,250,5,13,0,0,250,263,3,40,20,0,251,252,
		5,14,0,0,252,257,3,40,20,0,253,254,5,1,0,0,254,256,3,40,20,0,255,253,1,
		0,0,0,256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,
		259,257,1,0,0,0,260,261,5,15,0,0,261,263,1,0,0,0,262,236,1,0,0,0,262,237,
		1,0,0,0,262,248,1,0,0,0,262,249,1,0,0,0,262,251,1,0,0,0,263,19,1,0,0,0,
		264,266,3,22,11,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,
		268,1,0,0,0,268,21,1,0,0,0,269,267,1,0,0,0,270,272,5,18,0,0,271,270,1,
		0,0,0,271,272,1,0,0,0,272,273,1,0,0,0,273,275,3,24,12,0,274,276,7,0,0,
		0,275,274,1,0,0,0,275,276,1,0,0,0,276,23,1,0,0,0,277,294,7,2,0,0,278,279,
		5,11,0,0,279,284,3,20,10,0,280,281,5,35,0,0,281,283,3,20,10,0,282,280,
		1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,287,1,0,0,
		0,286,284,1,0,0,0,287,288,5,12,0,0,288,294,1,0,0,0,289,290,5,48,0,0,290,
		291,5,20,0,0,291,294,5,48,0,0,292,294,3,46,23,0,293,277,1,0,0,0,293,278,
		1,0,0,0,293,289,1,0,0,0,293,292,1,0,0,0,294,25,1,0,0,0,295,308,3,28,14,
		0,296,297,5,21,0,0,297,302,3,28,14,0,298,299,5,1,0,0,299,301,3,28,14,0,
		300,298,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,305,
		1,0,0,0,304,302,1,0,0,0,305,306,5,15,0,0,306,308,1,0,0,0,307,295,1,0,0,
		0,307,296,1,0,0,0,308,27,1,0,0,0,309,310,3,80,40,0,310,29,1,0,0,0,311,
		312,5,22,0,0,312,314,3,44,22,0,313,315,3,34,17,0,314,313,1,0,0,0,314,315,
		1,0,0,0,315,316,1,0,0,0,316,317,5,23,0,0,317,31,1,0,0,0,318,319,5,22,0,
		0,319,321,3,44,22,0,320,322,3,34,17,0,321,320,1,0,0,0,321,322,1,0,0,0,
		322,323,1,0,0,0,323,324,5,23,0,0,324,33,1,0,0,0,325,326,5,11,0,0,326,331,
		3,36,18,0,327,328,5,1,0,0,328,330,3,36,18,0,329,327,1,0,0,0,330,333,1,
		0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,334,1,0,0,0,333,331,1,0,0,0,
		334,335,5,12,0,0,335,35,1,0,0,0,336,338,3,86,43,0,337,336,1,0,0,0,337,
		338,1,0,0,0,338,339,1,0,0,0,339,340,3,26,13,0,340,37,1,0,0,0,341,344,5,
		45,0,0,342,344,3,46,23,0,343,341,1,0,0,0,343,342,1,0,0,0,344,39,1,0,0,
		0,345,348,5,45,0,0,346,348,3,44,22,0,347,345,1,0,0,0,347,346,1,0,0,0,348,
		41,1,0,0,0,349,350,3,46,23,0,350,43,1,0,0,0,351,356,3,46,23,0,352,353,
		5,19,0,0,353,355,3,46,23,0,354,352,1,0,0,0,355,358,1,0,0,0,356,354,1,0,
		0,0,356,357,1,0,0,0,357,45,1,0,0,0,358,356,1,0,0,0,359,360,7,3,0,0,360,
		47,1,0,0,0,361,362,5,46,0,0,362,49,1,0,0,0,363,369,3,38,19,0,364,365,3,
		46,23,0,365,366,5,34,0,0,366,367,3,40,20,0,367,369,1,0,0,0,368,363,1,0,
		0,0,368,364,1,0,0,0,369,51,1,0,0,0,370,371,5,35,0,0,371,372,3,14,7,0,372,
		53,1,0,0,0,373,374,5,34,0,0,374,375,3,40,20,0,375,55,1,0,0,0,376,377,5,
		35,0,0,377,378,3,14,7,0,378,57,1,0,0,0,379,380,5,35,0,0,380,381,3,14,7,
		0,381,59,1,0,0,0,382,384,3,30,15,0,383,382,1,0,0,0,384,387,1,0,0,0,385,
		383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,1,0,0,0,388,389,5,
		36,0,0,389,391,3,42,21,0,390,392,3,62,31,0,391,390,1,0,0,0,391,392,1,0,
		0,0,392,393,1,0,0,0,393,394,5,9,0,0,394,61,1,0,0,0,395,396,5,34,0,0,396,
		397,3,40,20,0,397,63,1,0,0,0,398,399,5,37,0,0,399,400,3,26,13,0,400,65,
		1,0,0,0,401,403,3,30,15,0,402,401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,
		0,0,404,405,1,0,0,0,405,407,1,0,0,0,406,404,1,0,0,0,407,408,3,46,23,0,
		408,409,7,4,0,0,409,67,1,0,0,0,410,411,5,1,0,0,411,412,3,40,20,0,412,69,
		1,0,0,0,413,414,5,38,0,0,414,416,3,42,21,0,415,417,3,72,36,0,416,415,1,
		0,0,0,416,417,1,0,0,0,417,421,1,0,0,0,418,419,5,39,0,0,419,421,3,42,21,
		0,420,413,1,0,0,0,420,418,1,0,0,0,421,71,1,0,0,0,422,423,5,34,0,0,423,
		424,3,40,20,0,424,73,1,0,0,0,425,426,5,35,0,0,426,427,3,20,10,0,427,75,
		1,0,0,0,428,429,5,35,0,0,429,430,3,20,10,0,430,77,1,0,0,0,431,432,5,35,
		0,0,432,433,3,20,10,0,433,79,1,0,0,0,434,444,7,5,0,0,435,440,3,48,24,0,
		436,437,5,19,0,0,437,439,3,48,24,0,438,436,1,0,0,0,439,442,1,0,0,0,440,
		438,1,0,0,0,440,441,1,0,0,0,441,444,1,0,0,0,442,440,1,0,0,0,443,434,1,
		0,0,0,443,435,1,0,0,0,444,81,1,0,0,0,445,446,5,1,0,0,446,447,3,28,14,0,
		447,83,1,0,0,0,448,449,5,1,0,0,449,450,3,36,18,0,450,85,1,0,0,0,451,452,
		3,46,23,0,452,453,5,9,0,0,453,87,1,0,0,0,454,455,5,19,0,0,455,456,3,46,
		23,0,456,89,1,0,0,0,457,458,5,19,0,0,458,459,3,48,24,0,459,91,1,0,0,0,
		44,98,118,124,135,142,148,156,164,174,187,192,197,207,213,218,221,224,
		229,234,243,257,262,267,271,275,284,293,302,307,314,321,331,337,343,347,
		356,368,385,391,404,416,420,440,443
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaCompiler.Compiler
