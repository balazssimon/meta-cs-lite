//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CompilerParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaCompiler.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CompilerParser : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_KNamespace=2, LR_TSemicolon=3, LR_KUsing=4, LR_KMetamodel=5, 
		LR_KLanguage=6, LR_KReturns=7, LR_TColon=8, LR_TBar=9, LR_KBlock=10, LR_TLBrace=11, 
		LR_TRBrace=12, LR_TEqGt=13, LR_KNull=14, LR_KTrue=15, LR_KFalse=16, LR_TDot=17, 
		LR_TInteger=18, LR_TDecimal=19, LR_TIdentifier=20, LR_TString=21, LR_TWhitespace=22, 
		LR_TLineEnd=23, LR_TSingleLineComment=24, LR_TMultiLineComment=25;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Declarations = 2, RULE_pr_LanguageDeclaration = 3, 
		RULE_pr_Rule = 4, RULE_pr_ParserRuleAlternative = 5, RULE_pr_ParserRuleElement = 6, 
		RULE_pr_Expression = 7, RULE_pr_Name = 8, RULE_pr_Qualifier = 9, RULE_pr_QualifierList = 10, 
		RULE_pr_Identifier = 11, RULE_pr_UsingBlock1 = 12, RULE_pr_ParserRuleBlock1 = 13, 
		RULE_pr_ParserRuleBlock2 = 14, RULE_pr_BlockRuleBlock1 = 15, RULE_pr_ParserRuleAlternativeBlock1 = 16, 
		RULE_pr_ParserRuleAlternativeBlock2 = 17, RULE_pr_QualifierBlock1 = 18, 
		RULE_pr_QualifierListBlock1 = 19;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Declarations", "pr_LanguageDeclaration", "pr_Rule", 
		"pr_ParserRuleAlternative", "pr_ParserRuleElement", "pr_Expression", "pr_Name", 
		"pr_Qualifier", "pr_QualifierList", "pr_Identifier", "pr_UsingBlock1", 
		"pr_ParserRuleBlock1", "pr_ParserRuleBlock2", "pr_BlockRuleBlock1", "pr_ParserRuleAlternativeBlock1", 
		"pr_ParserRuleAlternativeBlock2", "pr_QualifierBlock1", "pr_QualifierListBlock1"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'namespace'", "';'", "'using'", "'metamodel'", "'language'", 
		"'returns'", "':'", "'|'", "'block'", "'{'", "'}'", "'=>'", "'null'", 
		"'true'", "'false'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KLanguage", "LR_KReturns", "LR_TColon", "LR_TBar", "LR_KBlock", "LR_TLBrace", 
		"LR_TRBrace", "LR_TEqGt", "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TDot", 
		"LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken kNamespace;
		public Pr_QualifierContext qualifierAntlr1;
		public IToken tSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _usingAntlr1 = new List<Pr_UsingContext>();
		public Pr_DeclarationsContext declarationsAntlr1;
		public IToken eof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(CompilerParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationsContext pr_Declarations() {
			return GetRuleContext<Pr_DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CompilerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_localctx.kNamespace = Match(LR_KNamespace);
			State = 41;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			State = 42;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 43;
				_localctx._pr_Using = pr_Using();
				_localctx._usingAntlr1.Add(_localctx._pr_Using);
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49;
			_localctx.declarationsAntlr1 = pr_Declarations();
			State = 50;
			_localctx.eof = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken kUsing;
		public Pr_UsingBlock1Context usingBlock1Antlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(CompilerParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingBlock1Context pr_UsingBlock1() {
			return GetRuleContext<Pr_UsingBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_localctx.kUsing = Match(LR_KUsing);
			State = 53;
			_localctx.usingBlock1Antlr1 = pr_UsingBlock1();
			State = 54;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_DeclarationsContext : ParserRuleContext {
		public Pr_LanguageDeclarationContext declarationsAntlr1;
		public Pr_RuleContext _pr_Rule;
		public IList<Pr_RuleContext> _declarations1Antlr1 = new List<Pr_RuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
			return GetRuleContext<Pr_LanguageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext[] pr_Rule() {
			return GetRuleContexts<Pr_RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext pr_Rule(int i) {
			return GetRuleContext<Pr_RuleContext>(i);
		}
		public Pr_DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_DeclarationsContext pr_Declarations() {
		Pr_DeclarationsContext _localctx = new Pr_DeclarationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_localctx.declarationsAntlr1 = pr_LanguageDeclaration();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KBlock || _la==LR_TIdentifier) {
				{
				{
				State = 57;
				_localctx._pr_Rule = pr_Rule();
				_localctx._declarations1Antlr1.Add(_localctx._pr_Rule);
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LanguageDeclarationContext : ParserRuleContext {
		public IToken kLanguage;
		public Pr_NameContext nameAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KLanguage() { return GetToken(CompilerParser.LR_KLanguage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		public Pr_LanguageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LanguageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LanguageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
		Pr_LanguageDeclarationContext _localctx = new Pr_LanguageDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_LanguageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_localctx.kLanguage = Match(LR_KLanguage);
			State = 64;
			_localctx.nameAntlr1 = pr_Name();
			State = 65;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleContext : ParserRuleContext {
		public Pr_RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Rule; } }
	 
		public Pr_RuleContext() { }
		public virtual void CopyFrom(Pr_RuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_BlockRuleContext : Pr_RuleContext {
		public IToken isBlock;
		public Pr_NameContext nameAntlr1;
		public IToken tColon;
		public Pr_ParserRuleAlternativeContext alternativesAntlr1;
		public Pr_BlockRuleBlock1Context _pr_BlockRuleBlock1;
		public IList<Pr_BlockRuleBlock1Context> _blockRuleBlock1Antlr1 = new List<Pr_BlockRuleBlock1Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBlock() { return GetToken(CompilerParser.LR_KBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleAlternativeContext pr_ParserRuleAlternative() {
			return GetRuleContext<Pr_ParserRuleAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BlockRuleBlock1Context[] pr_BlockRuleBlock1() {
			return GetRuleContexts<Pr_BlockRuleBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BlockRuleBlock1Context pr_BlockRuleBlock1(int i) {
			return GetRuleContext<Pr_BlockRuleBlock1Context>(i);
		}
		public Pr_BlockRuleContext(Pr_RuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ParserRuleContext : Pr_RuleContext {
		public Pr_NameContext nameAntlr1;
		public Pr_ParserRuleBlock1Context parserRuleBlock1Antlr1;
		public IToken tColon;
		public Pr_ParserRuleAlternativeContext alternativesAntlr1;
		public Pr_ParserRuleBlock2Context _pr_ParserRuleBlock2;
		public IList<Pr_ParserRuleBlock2Context> _parserRuleBlock2Antlr1 = new List<Pr_ParserRuleBlock2Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleAlternativeContext pr_ParserRuleAlternative() {
			return GetRuleContext<Pr_ParserRuleAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleBlock1Context pr_ParserRuleBlock1() {
			return GetRuleContext<Pr_ParserRuleBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleBlock2Context[] pr_ParserRuleBlock2() {
			return GetRuleContexts<Pr_ParserRuleBlock2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleBlock2Context pr_ParserRuleBlock2(int i) {
			return GetRuleContext<Pr_ParserRuleBlock2Context>(i);
		}
		public Pr_ParserRuleContext(Pr_RuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleContext pr_Rule() {
		Pr_RuleContext _localctx = new Pr_RuleContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_Rule);
		int _la;
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TIdentifier:
				_localctx = new Pr_ParserRuleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				((Pr_ParserRuleContext)_localctx).nameAntlr1 = pr_Name();
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KReturns) {
					{
					State = 68;
					((Pr_ParserRuleContext)_localctx).parserRuleBlock1Antlr1 = pr_ParserRuleBlock1();
					}
				}

				State = 71;
				((Pr_ParserRuleContext)_localctx).tColon = Match(LR_TColon);
				State = 72;
				((Pr_ParserRuleContext)_localctx).alternativesAntlr1 = pr_ParserRuleAlternative();
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 73;
					((Pr_ParserRuleContext)_localctx)._pr_ParserRuleBlock2 = pr_ParserRuleBlock2();
					((Pr_ParserRuleContext)_localctx)._parserRuleBlock2Antlr1.Add(((Pr_ParserRuleContext)_localctx)._pr_ParserRuleBlock2);
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 79;
				((Pr_ParserRuleContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			case LR_KBlock:
				_localctx = new Pr_BlockRuleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				((Pr_BlockRuleContext)_localctx).isBlock = Match(LR_KBlock);
				State = 82;
				((Pr_BlockRuleContext)_localctx).nameAntlr1 = pr_Name();
				State = 83;
				((Pr_BlockRuleContext)_localctx).tColon = Match(LR_TColon);
				State = 84;
				((Pr_BlockRuleContext)_localctx).alternativesAntlr1 = pr_ParserRuleAlternative();
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 85;
					((Pr_BlockRuleContext)_localctx)._pr_BlockRuleBlock1 = pr_BlockRuleBlock1();
					((Pr_BlockRuleContext)_localctx)._blockRuleBlock1Antlr1.Add(((Pr_BlockRuleContext)_localctx)._pr_BlockRuleBlock1);
					}
					}
					State = 90;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 91;
				((Pr_BlockRuleContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleAlternativeContext : ParserRuleContext {
		public Pr_ParserRuleAlternativeBlock1Context parserRuleAlternativeBlock1Antlr1;
		public Pr_ParserRuleElementContext _pr_ParserRuleElement;
		public IList<Pr_ParserRuleElementContext> _elementsAntlr1 = new List<Pr_ParserRuleElementContext>();
		public Pr_ParserRuleAlternativeBlock2Context parserRuleAlternativeBlock2Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleAlternativeBlock2Context pr_ParserRuleAlternativeBlock2() {
			return GetRuleContext<Pr_ParserRuleAlternativeBlock2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleAlternativeBlock1Context pr_ParserRuleAlternativeBlock1() {
			return GetRuleContext<Pr_ParserRuleAlternativeBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleElementContext[] pr_ParserRuleElement() {
			return GetRuleContexts<Pr_ParserRuleElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleElementContext pr_ParserRuleElement(int i) {
			return GetRuleContext<Pr_ParserRuleElementContext>(i);
		}
		public Pr_ParserRuleAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleAlternativeContext pr_ParserRuleAlternative() {
		Pr_ParserRuleAlternativeContext _localctx = new Pr_ParserRuleAlternativeContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_ParserRuleAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLBrace) {
				{
				State = 95;
				_localctx.parserRuleAlternativeBlock1Antlr1 = pr_ParserRuleAlternativeBlock1();
				}
			}

			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TIdentifier) {
				{
				{
				State = 98;
				_localctx._pr_ParserRuleElement = pr_ParserRuleElement();
				_localctx._elementsAntlr1.Add(_localctx._pr_ParserRuleElement);
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104;
			_localctx.parserRuleAlternativeBlock2Antlr1 = pr_ParserRuleAlternativeBlock2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleElementContext : ParserRuleContext {
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_ParserRuleElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleElementContext pr_ParserRuleElement() {
		Pr_ParserRuleElementContext _localctx = new Pr_ParserRuleElementContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_ParserRuleElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_localctx.nameAntlr1 = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ExpressionContext : ParserRuleContext {
		public Pr_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Expression; } }
	 
		public Pr_ExpressionContext() { }
		public virtual void CopyFrom(Pr_ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ReferenceExpressionContext : Pr_ExpressionContext {
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ReferenceExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ExpressionTokensContext : Pr_ExpressionContext {
		public IToken kNull;
		public IToken boolValue;
		public IToken kFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNull() { return GetToken(CompilerParser.LR_KNull, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KTrue() { return GetToken(CompilerParser.LR_KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFalse() { return GetToken(CompilerParser.LR_KFalse, 0); }
		public Pr_ExpressionTokensContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ExpressionTokens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_IntExpressionContext : Pr_ExpressionContext {
		public IToken intValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TInteger() { return GetToken(CompilerParser.LR_TInteger, 0); }
		public Pr_IntExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IntExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_StringExpressionContext : Pr_ExpressionContext {
		public IToken stringValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_StringExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_StringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ExpressionContext pr_Expression() {
		Pr_ExpressionContext _localctx = new Pr_ExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_Expression);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TInteger:
				_localctx = new Pr_IntExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 108;
				((Pr_IntExpressionContext)_localctx).intValueAntlr1 = Match(LR_TInteger);
				}
				break;
			case LR_TString:
				_localctx = new Pr_StringExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 109;
				((Pr_StringExpressionContext)_localctx).stringValueAntlr1 = Match(LR_TString);
				}
				break;
			case LR_TIdentifier:
				_localctx = new Pr_ReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 110;
				((Pr_ReferenceExpressionContext)_localctx).qualifierAntlr1 = pr_Qualifier();
				}
				break;
			case LR_KNull:
			case LR_KTrue:
			case LR_KFalse:
				_localctx = new Pr_ExpressionTokensContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_KNull:
					{
					State = 111;
					((Pr_ExpressionTokensContext)_localctx).kNull = Match(LR_KNull);
					}
					break;
				case LR_KTrue:
					{
					State = 112;
					((Pr_ExpressionTokensContext)_localctx).boolValue = Match(LR_KTrue);
					}
					break;
				case LR_KFalse:
					{
					State = 113;
					((Pr_ExpressionTokensContext)_localctx).kFalse = Match(LR_KFalse);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		public Pr_QualifierBlock1Context _pr_QualifierBlock1;
		public IList<Pr_QualifierBlock1Context> _qualifierBlock1Antlr1 = new List<Pr_QualifierBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context[] pr_QualifierBlock1() {
			return GetRuleContexts<Pr_QualifierBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context pr_QualifierBlock1(int i) {
			return GetRuleContext<Pr_QualifierBlock1Context>(i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_Qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_localctx.identifierAntlr1 = pr_Identifier();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TDot) {
				{
				{
				State = 121;
				_localctx._pr_QualifierBlock1 = pr_QualifierBlock1();
				_localctx._qualifierBlock1Antlr1.Add(_localctx._pr_QualifierBlock1);
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListContext : ParserRuleContext {
		public Pr_QualifierContext qualifierAntlr1;
		public Pr_QualifierListBlock1Context _pr_QualifierListBlock1;
		public IList<Pr_QualifierListBlock1Context> _qualifierListBlock1Antlr1 = new List<Pr_QualifierListBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context[] pr_QualifierListBlock1() {
			return GetRuleContexts<Pr_QualifierListBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context pr_QualifierListBlock1(int i) {
			return GetRuleContext<Pr_QualifierListBlock1Context>(i);
		}
		public Pr_QualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListContext pr_QualifierList() {
		Pr_QualifierListContext _localctx = new Pr_QualifierListContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_QualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 128;
				_localctx._pr_QualifierListBlock1 = pr_QualifierListBlock1();
				_localctx._qualifierListBlock1Antlr1.Add(_localctx._pr_QualifierListBlock1);
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public IToken tIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(CompilerParser.LR_TIdentifier, 0); }
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_Identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			_localctx.tIdentifierAntlr1 = Match(LR_TIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingBlock1Context : ParserRuleContext {
		public Pr_UsingBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_UsingBlock1; } }
	 
		public Pr_UsingBlock1Context() { }
		public virtual void CopyFrom(Pr_UsingBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_UsingBlock1Alt2Context : Pr_UsingBlock1Context {
		public IToken kMetamodel;
		public Pr_QualifierContext metaModelsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KMetamodel() { return GetToken(CompilerParser.LR_KMetamodel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_UsingBlock1Alt2Context(Pr_UsingBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_UsingBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_UsingBlock1Alt1Context : Pr_UsingBlock1Context {
		public Pr_QualifierContext namespacesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_UsingBlock1Alt1Context(Pr_UsingBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_UsingBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingBlock1Context pr_UsingBlock1() {
		Pr_UsingBlock1Context _localctx = new Pr_UsingBlock1Context(Context, State);
		EnterRule(_localctx, 24, RULE_pr_UsingBlock1);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TIdentifier:
				_localctx = new Pr_UsingBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 136;
				((Pr_UsingBlock1Alt1Context)_localctx).namespacesAntlr1 = pr_Qualifier();
				}
				break;
			case LR_KMetamodel:
				_localctx = new Pr_UsingBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 137;
				((Pr_UsingBlock1Alt2Context)_localctx).kMetamodel = Match(LR_KMetamodel);
				State = 138;
				((Pr_UsingBlock1Alt2Context)_localctx).metaModelsAntlr1 = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleBlock1Context : ParserRuleContext {
		public IToken kReturns;
		public Pr_QualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ParserRuleBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleBlock1Context pr_ParserRuleBlock1() {
		Pr_ParserRuleBlock1Context _localctx = new Pr_ParserRuleBlock1Context(Context, State);
		EnterRule(_localctx, 26, RULE_pr_ParserRuleBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			_localctx.kReturns = Match(LR_KReturns);
			State = 142;
			_localctx.returnTypeAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleBlock2Context : ParserRuleContext {
		public IToken tBar;
		public Pr_ParserRuleAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleAlternativeContext pr_ParserRuleAlternative() {
			return GetRuleContext<Pr_ParserRuleAlternativeContext>(0);
		}
		public Pr_ParserRuleBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleBlock2Context pr_ParserRuleBlock2() {
		Pr_ParserRuleBlock2Context _localctx = new Pr_ParserRuleBlock2Context(Context, State);
		EnterRule(_localctx, 28, RULE_pr_ParserRuleBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_localctx.tBar = Match(LR_TBar);
			State = 145;
			_localctx.alternativesAntlr1 = pr_ParserRuleAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BlockRuleBlock1Context : ParserRuleContext {
		public IToken tBar;
		public Pr_ParserRuleAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleAlternativeContext pr_ParserRuleAlternative() {
			return GetRuleContext<Pr_ParserRuleAlternativeContext>(0);
		}
		public Pr_BlockRuleBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BlockRuleBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockRuleBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BlockRuleBlock1Context pr_BlockRuleBlock1() {
		Pr_BlockRuleBlock1Context _localctx = new Pr_BlockRuleBlock1Context(Context, State);
		EnterRule(_localctx, 30, RULE_pr_BlockRuleBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			_localctx.tBar = Match(LR_TBar);
			State = 148;
			_localctx.alternativesAntlr1 = pr_ParserRuleAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleAlternativeBlock1Context : ParserRuleContext {
		public IToken tLBrace;
		public Pr_QualifierContext returnTypeAntlr1;
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(CompilerParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(CompilerParser.LR_TRBrace, 0); }
		public Pr_ParserRuleAlternativeBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleAlternativeBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleAlternativeBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleAlternativeBlock1Context pr_ParserRuleAlternativeBlock1() {
		Pr_ParserRuleAlternativeBlock1Context _localctx = new Pr_ParserRuleAlternativeBlock1Context(Context, State);
		EnterRule(_localctx, 32, RULE_pr_ParserRuleAlternativeBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			_localctx.tLBrace = Match(LR_TLBrace);
			State = 151;
			_localctx.returnTypeAntlr1 = pr_Qualifier();
			State = 152;
			_localctx.tRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleAlternativeBlock2Context : ParserRuleContext {
		public IToken tEqGt;
		public Pr_ExpressionContext returnValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEqGt() { return GetToken(CompilerParser.LR_TEqGt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		public Pr_ParserRuleAlternativeBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleAlternativeBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleAlternativeBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleAlternativeBlock2Context pr_ParserRuleAlternativeBlock2() {
		Pr_ParserRuleAlternativeBlock2Context _localctx = new Pr_ParserRuleAlternativeBlock2Context(Context, State);
		EnterRule(_localctx, 34, RULE_pr_ParserRuleAlternativeBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_localctx.tEqGt = Match(LR_TEqGt);
			State = 155;
			_localctx.returnValueAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierBlock1Context : ParserRuleContext {
		public IToken tDot;
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierBlock1Context pr_QualifierBlock1() {
		Pr_QualifierBlock1Context _localctx = new Pr_QualifierBlock1Context(Context, State);
		EnterRule(_localctx, 36, RULE_pr_QualifierBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_localctx.tDot = Match(LR_TDot);
			State = 158;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_QualifierListBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierListBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierListBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListBlock1Context pr_QualifierListBlock1() {
		Pr_QualifierListBlock1Context _localctx = new Pr_QualifierListBlock1Context(Context, State);
		EnterRule(_localctx, 38, RULE_pr_QualifierListBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_localctx.tComma = Match(LR_TComma);
			State = 161;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,25,164,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,5,0,
		45,8,0,10,0,12,0,48,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,5,2,59,8,2,
		10,2,12,2,62,9,2,1,3,1,3,1,3,1,3,1,4,1,4,3,4,70,8,4,1,4,1,4,1,4,5,4,75,
		8,4,10,4,12,4,78,9,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,87,8,4,10,4,12,4,
		90,9,4,1,4,1,4,3,4,94,8,4,1,5,3,5,97,8,5,1,5,5,5,100,8,5,10,5,12,5,103,
		9,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,115,8,7,3,7,117,8,7,1,
		8,1,8,1,9,1,9,5,9,123,8,9,10,9,12,9,126,9,9,1,10,1,10,5,10,130,8,10,10,
		10,12,10,133,9,10,1,11,1,11,1,12,1,12,1,12,3,12,140,8,12,1,13,1,13,1,13,
		1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
		1,18,1,18,1,19,1,19,1,19,1,19,0,0,20,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,0,0,159,0,40,1,0,0,0,2,52,1,0,0,0,4,56,1,0,0,0,6,
		63,1,0,0,0,8,93,1,0,0,0,10,96,1,0,0,0,12,106,1,0,0,0,14,116,1,0,0,0,16,
		118,1,0,0,0,18,120,1,0,0,0,20,127,1,0,0,0,22,134,1,0,0,0,24,139,1,0,0,
		0,26,141,1,0,0,0,28,144,1,0,0,0,30,147,1,0,0,0,32,150,1,0,0,0,34,154,1,
		0,0,0,36,157,1,0,0,0,38,160,1,0,0,0,40,41,5,2,0,0,41,42,3,18,9,0,42,46,
		5,3,0,0,43,45,3,2,1,0,44,43,1,0,0,0,45,48,1,0,0,0,46,44,1,0,0,0,46,47,
		1,0,0,0,47,49,1,0,0,0,48,46,1,0,0,0,49,50,3,4,2,0,50,51,5,0,0,1,51,1,1,
		0,0,0,52,53,5,4,0,0,53,54,3,24,12,0,54,55,5,3,0,0,55,3,1,0,0,0,56,60,3,
		6,3,0,57,59,3,8,4,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,
		0,0,0,61,5,1,0,0,0,62,60,1,0,0,0,63,64,5,6,0,0,64,65,3,16,8,0,65,66,5,
		3,0,0,66,7,1,0,0,0,67,69,3,16,8,0,68,70,3,26,13,0,69,68,1,0,0,0,69,70,
		1,0,0,0,70,71,1,0,0,0,71,72,5,8,0,0,72,76,3,10,5,0,73,75,3,28,14,0,74,
		73,1,0,0,0,75,78,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,79,1,0,0,0,78,
		76,1,0,0,0,79,80,5,3,0,0,80,94,1,0,0,0,81,82,5,10,0,0,82,83,3,16,8,0,83,
		84,5,8,0,0,84,88,3,10,5,0,85,87,3,30,15,0,86,85,1,0,0,0,87,90,1,0,0,0,
		88,86,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,92,5,3,0,0,
		92,94,1,0,0,0,93,67,1,0,0,0,93,81,1,0,0,0,94,9,1,0,0,0,95,97,3,32,16,0,
		96,95,1,0,0,0,96,97,1,0,0,0,97,101,1,0,0,0,98,100,3,12,6,0,99,98,1,0,0,
		0,100,103,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,101,
		1,0,0,0,104,105,3,34,17,0,105,11,1,0,0,0,106,107,3,16,8,0,107,13,1,0,0,
		0,108,117,5,18,0,0,109,117,5,21,0,0,110,117,3,18,9,0,111,115,5,14,0,0,
		112,115,5,15,0,0,113,115,5,16,0,0,114,111,1,0,0,0,114,112,1,0,0,0,114,
		113,1,0,0,0,115,117,1,0,0,0,116,108,1,0,0,0,116,109,1,0,0,0,116,110,1,
		0,0,0,116,114,1,0,0,0,117,15,1,0,0,0,118,119,3,22,11,0,119,17,1,0,0,0,
		120,124,3,22,11,0,121,123,3,36,18,0,122,121,1,0,0,0,123,126,1,0,0,0,124,
		122,1,0,0,0,124,125,1,0,0,0,125,19,1,0,0,0,126,124,1,0,0,0,127,131,3,18,
		9,0,128,130,3,38,19,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,
		131,132,1,0,0,0,132,21,1,0,0,0,133,131,1,0,0,0,134,135,5,20,0,0,135,23,
		1,0,0,0,136,140,3,18,9,0,137,138,5,5,0,0,138,140,3,18,9,0,139,136,1,0,
		0,0,139,137,1,0,0,0,140,25,1,0,0,0,141,142,5,7,0,0,142,143,3,18,9,0,143,
		27,1,0,0,0,144,145,5,9,0,0,145,146,3,10,5,0,146,29,1,0,0,0,147,148,5,9,
		0,0,148,149,3,10,5,0,149,31,1,0,0,0,150,151,5,11,0,0,151,152,3,18,9,0,
		152,153,5,12,0,0,153,33,1,0,0,0,154,155,5,13,0,0,155,156,3,14,7,0,156,
		35,1,0,0,0,157,158,5,17,0,0,158,159,3,22,11,0,159,37,1,0,0,0,160,161,5,
		1,0,0,161,162,3,18,9,0,162,39,1,0,0,0,13,46,60,69,76,88,93,96,101,114,
		116,124,131,139
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaCompiler.Compiler
