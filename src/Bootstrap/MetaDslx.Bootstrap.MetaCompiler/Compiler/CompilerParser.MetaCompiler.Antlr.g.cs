//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CompilerParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaCompiler.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CompilerParser : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_Utf8Bom=2, LR_KNamespace=3, LR_TSemicolon=4, LR_KUsing=5, 
		LR_KLanguage=6, LR_KBlock=7, LR_KReturns=8, LR_TColon=9, LR_TBar=10, LR_KAlt=11, 
		LR_TEqGt=12, LR_THash=13, LR_THashLBrace=14, LR_TRBrace=15, LR_KEof=16, 
		LR_TLParen=17, LR_TRParen=18, LR_KToken=19, LR_KHidden=20, LR_KFragment=21, 
		LR_TTilde=22, LR_TDot=23, LR_TDotDot=24, LR_KNull=25, LR_KTrue=26, LR_KFalse=27, 
		LR_TLBrace=28, LR_TLBracket=29, LR_TRBracket=30, LR_TEq=31, LR_TQuestionEq=32, 
		LR_TExclEq=33, LR_TPlusEq=34, LR_TQuestion=35, LR_TAsterisk=36, LR_TPlus=37, 
		LR_TQuestionQuestion=38, LR_TAsteriskQuestion=39, LR_TPlusQuestion=40, 
		LR_TInteger=41, LR_TDecimal=42, LR_TPrimitiveType=43, LR_TIdentifier=44, 
		LR_TVerbatimIdentifier=45, LR_TString=46, LR_TWhitespace=47, LR_TLineEnd=48, 
		LR_TSingleLineComment=49, LR_TMultiLineComment=50, LR_TInvalidToken=51;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Declarations = 2, RULE_pr_LanguageDeclaration = 3, 
		RULE_pr_Grammar = 4, RULE_pr_Rule = 5, RULE_pr_PAlternative = 6, RULE_pr_PElement = 7, 
		RULE_pr_PElementValue = 8, RULE_pr_PBlockAlternative = 9, RULE_pr_LAlternative = 10, 
		RULE_pr_LElement = 11, RULE_pr_LElementValue = 12, RULE_pr_Expression = 13, 
		RULE_pr_ParserAnnotation = 14, RULE_pr_LexerAnnotation = 15, RULE_pr_AnnotationArguments = 16, 
		RULE_pr_AnnotationArgument = 17, RULE_pr_Name = 18, RULE_pr_Qualifier = 19, 
		RULE_pr_QualifierList = 20, RULE_pr_Identifier = 21, RULE_pr_GrammarBlock1 = 22, 
		RULE_pr_ParserRuleBlock1 = 23, RULE_pr_ParserRuleBlock2 = 24, RULE_pr_PAlternativeBlock1 = 25, 
		RULE_pr_PAlternativeBlock2 = 26, RULE_pr_PElementBlock1 = 27, RULE_pr_PReferenceAlt3Block1 = 28, 
		RULE_pr_PBlockBlock1 = 29, RULE_pr_PBlockAlternativeBlock1 = 30, RULE_pr_LexerRuleBlock1 = 31, 
		RULE_pr_LexerRuleBlock2 = 32, RULE_pr_LBlockBlock1 = 33, RULE_pr_ArrayExpressionBlock1 = 34, 
		RULE_pr_AnnotationArgumentsBlock1 = 35, RULE_pr_AnnotationArgumentBlock1 = 36, 
		RULE_pr_QualifierBlock1 = 37, RULE_pr_QualifierListBlock1 = 38, RULE_pr_PAlternativeBlock1Block1 = 39, 
		RULE_pr_LexerRuleBlock1Alt1Block1 = 40, RULE_pr_ArrayExpressionBlock1Block1 = 41;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Declarations", "pr_LanguageDeclaration", "pr_Grammar", 
		"pr_Rule", "pr_PAlternative", "pr_PElement", "pr_PElementValue", "pr_PBlockAlternative", 
		"pr_LAlternative", "pr_LElement", "pr_LElementValue", "pr_Expression", 
		"pr_ParserAnnotation", "pr_LexerAnnotation", "pr_AnnotationArguments", 
		"pr_AnnotationArgument", "pr_Name", "pr_Qualifier", "pr_QualifierList", 
		"pr_Identifier", "pr_GrammarBlock1", "pr_ParserRuleBlock1", "pr_ParserRuleBlock2", 
		"pr_PAlternativeBlock1", "pr_PAlternativeBlock2", "pr_PElementBlock1", 
		"pr_PReferenceAlt3Block1", "pr_PBlockBlock1", "pr_PBlockAlternativeBlock1", 
		"pr_LexerRuleBlock1", "pr_LexerRuleBlock2", "pr_LBlockBlock1", "pr_ArrayExpressionBlock1", 
		"pr_AnnotationArgumentsBlock1", "pr_AnnotationArgumentBlock1", "pr_QualifierBlock1", 
		"pr_QualifierListBlock1", "pr_PAlternativeBlock1Block1", "pr_LexerRuleBlock1Alt1Block1", 
		"pr_ArrayExpressionBlock1Block1"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, "'namespace'", "';'", "'using'", "'language'", "'block'", 
		"'returns'", "':'", "'|'", "'alt'", "'=>'", "'#'", "'#{'", "'}'", "'eof'", 
		"'('", "')'", "'token'", "'hidden'", "'fragment'", "'~'", "'.'", "'..'", 
		"'null'", "'true'", "'false'", "'{'", "'['", "']'", "'='", "'?='", "'!='", 
		"'+='", "'?'", "'*'", "'+'", "'??'", "'*?'", "'+?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_Utf8Bom", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", 
		"LR_KLanguage", "LR_KBlock", "LR_KReturns", "LR_TColon", "LR_TBar", "LR_KAlt", 
		"LR_TEqGt", "LR_THash", "LR_THashLBrace", "LR_TRBrace", "LR_KEof", "LR_TLParen", 
		"LR_TRParen", "LR_KToken", "LR_KHidden", "LR_KFragment", "LR_TTilde", 
		"LR_TDot", "LR_TDotDot", "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TLBrace", 
		"LR_TLBracket", "LR_TRBracket", "LR_TEq", "LR_TQuestionEq", "LR_TExclEq", 
		"LR_TPlusEq", "LR_TQuestion", "LR_TAsterisk", "LR_TPlus", "LR_TQuestionQuestion", 
		"LR_TAsteriskQuestion", "LR_TPlusQuestion", "LR_TInteger", "LR_TDecimal", 
		"LR_TPrimitiveType", "LR_TIdentifier", "LR_TVerbatimIdentifier", "LR_TString", 
		"LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", 
		"LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken kNamespace;
		public Pr_QualifierContext nameAntlr1;
		public IToken tSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _usingAntlr1 = new List<Pr_UsingContext>();
		public Pr_DeclarationsContext declarationsAntlr1;
		public IToken eof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(CompilerParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationsContext pr_Declarations() {
			return GetRuleContext<Pr_DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CompilerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_localctx.kNamespace = Match(LR_KNamespace);
			State = 85;
			_localctx.nameAntlr1 = pr_Qualifier();
			State = 86;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 87;
				_localctx._pr_Using = pr_Using();
				_localctx._usingAntlr1.Add(_localctx._pr_Using);
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 93;
			_localctx.declarationsAntlr1 = pr_Declarations();
			State = 94;
			_localctx.eof = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken kUsing;
		public Pr_QualifierContext namespacesAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(CompilerParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_localctx.kUsing = Match(LR_KUsing);
			State = 97;
			_localctx.namespacesAntlr1 = pr_Qualifier();
			State = 98;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_DeclarationsContext : ParserRuleContext {
		public Pr_LanguageDeclarationContext declarationsAntlr1;
		public Pr_RuleContext _pr_Rule;
		public IList<Pr_RuleContext> _declarations1Antlr1 = new List<Pr_RuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
			return GetRuleContext<Pr_LanguageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext[] pr_Rule() {
			return GetRuleContexts<Pr_RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext pr_Rule(int i) {
			return GetRuleContext<Pr_RuleContext>(i);
		}
		public Pr_DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_DeclarationsContext pr_Declarations() {
		Pr_DeclarationsContext _localctx = new Pr_DeclarationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			_localctx.declarationsAntlr1 = pr_LanguageDeclaration();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 61573191696512L) != 0)) {
				{
				{
				State = 101;
				_localctx._pr_Rule = pr_Rule();
				_localctx._declarations1Antlr1.Add(_localctx._pr_Rule);
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LanguageDeclarationContext : ParserRuleContext {
		public IToken kLanguage;
		public Pr_NameContext nameAntlr1;
		public IToken tSemicolon;
		public Pr_GrammarContext grammarAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KLanguage() { return GetToken(CompilerParser.LR_KLanguage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarContext pr_Grammar() {
			return GetRuleContext<Pr_GrammarContext>(0);
		}
		public Pr_LanguageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LanguageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LanguageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
		Pr_LanguageDeclarationContext _localctx = new Pr_LanguageDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_LanguageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_localctx.kLanguage = Match(LR_KLanguage);
			State = 108;
			_localctx.nameAntlr1 = pr_Name();
			State = 109;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			State = 110;
			_localctx.grammarAntlr1 = pr_Grammar();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_GrammarContext : ParserRuleContext {
		public Pr_GrammarBlock1Context grammarBlock1Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarBlock1Context pr_GrammarBlock1() {
			return GetRuleContext<Pr_GrammarBlock1Context>(0);
		}
		public Pr_GrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Grammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Grammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_GrammarContext pr_Grammar() {
		Pr_GrammarContext _localctx = new Pr_GrammarContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_Grammar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_localctx.grammarBlock1Antlr1 = pr_GrammarBlock1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleContext : ParserRuleContext {
		public Pr_RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Rule; } }
	 
		public Pr_RuleContext() { }
		public virtual void CopyFrom(Pr_RuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_LexerRuleContext : Pr_RuleContext {
		public Pr_LexerAnnotationContext _pr_LexerAnnotation;
		public IList<Pr_LexerAnnotationContext> _annotations1Antlr1 = new List<Pr_LexerAnnotationContext>();
		public Pr_LexerRuleBlock1Context lexerRuleBlock1Antlr1;
		public IToken tColon;
		public Pr_LAlternativeContext alternativesAntlr1;
		public Pr_LexerRuleBlock2Context _pr_LexerRuleBlock2;
		public IList<Pr_LexerRuleBlock2Context> _lexerRuleBlock2Antlr1 = new List<Pr_LexerRuleBlock2Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerRuleBlock1Context pr_LexerRuleBlock1() {
			return GetRuleContext<Pr_LexerRuleBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerAnnotationContext[] pr_LexerAnnotation() {
			return GetRuleContexts<Pr_LexerAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerAnnotationContext pr_LexerAnnotation(int i) {
			return GetRuleContext<Pr_LexerAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerRuleBlock2Context[] pr_LexerRuleBlock2() {
			return GetRuleContexts<Pr_LexerRuleBlock2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerRuleBlock2Context pr_LexerRuleBlock2(int i) {
			return GetRuleContext<Pr_LexerRuleBlock2Context>(i);
		}
		public Pr_LexerRuleContext(Pr_RuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ParserRuleContext : Pr_RuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _annotations1Antlr1 = new List<Pr_ParserAnnotationContext>();
		public Pr_ParserRuleBlock1Context parserRuleBlock1Antlr1;
		public IToken tColon;
		public Pr_PAlternativeContext alternativesAntlr1;
		public Pr_ParserRuleBlock2Context _pr_ParserRuleBlock2;
		public IList<Pr_ParserRuleBlock2Context> _parserRuleBlock2Antlr1 = new List<Pr_ParserRuleBlock2Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleBlock1Context pr_ParserRuleBlock1() {
			return GetRuleContext<Pr_ParserRuleBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeContext pr_PAlternative() {
			return GetRuleContext<Pr_PAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleBlock2Context[] pr_ParserRuleBlock2() {
			return GetRuleContexts<Pr_ParserRuleBlock2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleBlock2Context pr_ParserRuleBlock2(int i) {
			return GetRuleContext<Pr_ParserRuleBlock2Context>(i);
		}
		public Pr_ParserRuleContext(Pr_RuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleContext pr_Rule() {
		Pr_RuleContext _localctx = new Pr_RuleContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_Rule);
		int _la;
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new Pr_ParserRuleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TLBracket) {
					{
					{
					State = 114;
					((Pr_ParserRuleContext)_localctx)._pr_ParserAnnotation = pr_ParserAnnotation();
					((Pr_ParserRuleContext)_localctx)._annotations1Antlr1.Add(((Pr_ParserRuleContext)_localctx)._pr_ParserAnnotation);
					}
					}
					State = 119;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 120;
				((Pr_ParserRuleContext)_localctx).parserRuleBlock1Antlr1 = pr_ParserRuleBlock1();
				State = 121;
				((Pr_ParserRuleContext)_localctx).tColon = Match(LR_TColon);
				State = 122;
				((Pr_ParserRuleContext)_localctx).alternativesAntlr1 = pr_PAlternative();
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 123;
					((Pr_ParserRuleContext)_localctx)._pr_ParserRuleBlock2 = pr_ParserRuleBlock2();
					((Pr_ParserRuleContext)_localctx)._parserRuleBlock2Antlr1.Add(((Pr_ParserRuleContext)_localctx)._pr_ParserRuleBlock2);
					}
					}
					State = 128;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 129;
				((Pr_ParserRuleContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			case 2:
				_localctx = new Pr_LexerRuleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TLBracket) {
					{
					{
					State = 131;
					((Pr_LexerRuleContext)_localctx)._pr_LexerAnnotation = pr_LexerAnnotation();
					((Pr_LexerRuleContext)_localctx)._annotations1Antlr1.Add(((Pr_LexerRuleContext)_localctx)._pr_LexerAnnotation);
					}
					}
					State = 136;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 137;
				((Pr_LexerRuleContext)_localctx).lexerRuleBlock1Antlr1 = pr_LexerRuleBlock1();
				State = 138;
				((Pr_LexerRuleContext)_localctx).tColon = Match(LR_TColon);
				State = 139;
				((Pr_LexerRuleContext)_localctx).alternativesAntlr1 = pr_LAlternative();
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 140;
					((Pr_LexerRuleContext)_localctx)._pr_LexerRuleBlock2 = pr_LexerRuleBlock2();
					((Pr_LexerRuleContext)_localctx)._lexerRuleBlock2Antlr1.Add(((Pr_LexerRuleContext)_localctx)._pr_LexerRuleBlock2);
					}
					}
					State = 145;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 146;
				((Pr_LexerRuleContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PAlternativeContext : ParserRuleContext {
		public Pr_PAlternativeBlock1Context pAlternativeBlock1Antlr1;
		public Pr_PElementContext _pr_PElement;
		public IList<Pr_PElementContext> _elementsAntlr1 = new List<Pr_PElementContext>();
		public Pr_PAlternativeBlock2Context pAlternativeBlock2Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeBlock1Context pr_PAlternativeBlock1() {
			return GetRuleContext<Pr_PAlternativeBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementContext[] pr_PElement() {
			return GetRuleContexts<Pr_PElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementContext pr_PElement(int i) {
			return GetRuleContext<Pr_PElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeBlock2Context pr_PAlternativeBlock2() {
			return GetRuleContext<Pr_PAlternativeBlock2Context>(0);
		}
		public Pr_PAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PAlternativeContext pr_PAlternative() {
		Pr_PAlternativeContext _localctx = new Pr_PAlternativeContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_PAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 150;
				_localctx.pAlternativeBlock1Antlr1 = pr_PAlternativeBlock1();
				}
				break;
			}
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131941932425216L) != 0)) {
				{
				{
				State = 153;
				_localctx._pr_PElement = pr_PElement();
				_localctx._elementsAntlr1.Add(_localctx._pr_PElement);
				}
				}
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TEqGt) {
				{
				State = 159;
				_localctx.pAlternativeBlock2Antlr1 = pr_PAlternativeBlock2();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PElementContext : ParserRuleContext {
		public Pr_PElementBlock1Context pElementBlock1Antlr1;
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _valueAnnotationsAntlr1 = new List<Pr_ParserAnnotationContext>();
		public Pr_PElementValueContext valueAntlr1;
		public IToken tQuestion;
		public IToken tAsterisk;
		public IToken tPlus;
		public IToken tQuestionQuestion;
		public IToken tAsteriskQuestion;
		public IToken tPlusQuestion;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementValueContext pr_PElementValue() {
			return GetRuleContext<Pr_PElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementBlock1Context pr_PElementBlock1() {
			return GetRuleContext<Pr_PElementBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(CompilerParser.LR_TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsterisk() { return GetToken(CompilerParser.LR_TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlus() { return GetToken(CompilerParser.LR_TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionQuestion() { return GetToken(CompilerParser.LR_TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsteriskQuestion() { return GetToken(CompilerParser.LR_TAsteriskQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusQuestion() { return GetToken(CompilerParser.LR_TPlusQuestion, 0); }
		public Pr_PElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PElementContext pr_PElement() {
		Pr_PElementContext _localctx = new Pr_PElementContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_PElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 162;
				_localctx.pElementBlock1Antlr1 = pr_PElementBlock1();
				}
				break;
			}
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 165;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._valueAnnotationsAntlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171;
			_localctx.valueAntlr1 = pr_PElementValue();
			State = 178;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TQuestion:
				{
				State = 172;
				_localctx.tQuestion = Match(LR_TQuestion);
				}
				break;
			case LR_TAsterisk:
				{
				State = 173;
				_localctx.tAsterisk = Match(LR_TAsterisk);
				}
				break;
			case LR_TPlus:
				{
				State = 174;
				_localctx.tPlus = Match(LR_TPlus);
				}
				break;
			case LR_TQuestionQuestion:
				{
				State = 175;
				_localctx.tQuestionQuestion = Match(LR_TQuestionQuestion);
				}
				break;
			case LR_TAsteriskQuestion:
				{
				State = 176;
				_localctx.tAsteriskQuestion = Match(LR_TAsteriskQuestion);
				}
				break;
			case LR_TPlusQuestion:
				{
				State = 177;
				_localctx.tPlusQuestion = Match(LR_TPlusQuestion);
				}
				break;
			case LR_TSemicolon:
			case LR_TBar:
			case LR_TEqGt:
			case LR_THash:
			case LR_THashLBrace:
			case LR_KEof:
			case LR_TLParen:
			case LR_TRParen:
			case LR_TLBracket:
			case LR_TPrimitiveType:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
			case LR_TString:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PElementValueContext : ParserRuleContext {
		public Pr_PElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PElementValue; } }
	 
		public Pr_PElementValueContext() { }
		public virtual void CopyFrom(Pr_PElementValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_PReferenceAlt1Context : Pr_PElementValueContext {
		public Pr_IdentifierContext ruleAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_PReferenceAlt1Context(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PReferenceAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PBlockContext : Pr_PElementValueContext {
		public IToken tLParen;
		public Pr_PBlockAlternativeContext alternativesAntlr1;
		public Pr_PBlockBlock1Context _pr_PBlockBlock1;
		public IList<Pr_PBlockBlock1Context> _pBlockBlock1Antlr1 = new List<Pr_PBlockBlock1Context>();
		public IToken tRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PBlockAlternativeContext pr_PBlockAlternative() {
			return GetRuleContext<Pr_PBlockAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PBlockBlock1Context[] pr_PBlockBlock1() {
			return GetRuleContexts<Pr_PBlockBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PBlockBlock1Context pr_PBlockBlock1(int i) {
			return GetRuleContext<Pr_PBlockBlock1Context>(i);
		}
		public Pr_PBlockContext(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PKeywordContext : Pr_PElementValueContext {
		public IToken textAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_PKeywordContext(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PReferenceAlt2Context : Pr_PElementValueContext {
		public IToken tHash;
		public Pr_QualifierContext referencedTypesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_THash() { return GetToken(CompilerParser.LR_THash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PReferenceAlt2Context(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PReferenceAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PReferenceAlt3Context : Pr_PElementValueContext {
		public IToken tHashLBrace;
		public Pr_QualifierContext referencedTypesAntlr1;
		public Pr_PReferenceAlt3Block1Context _pr_PReferenceAlt3Block1;
		public IList<Pr_PReferenceAlt3Block1Context> _pReferenceAlt3Block1Antlr1 = new List<Pr_PReferenceAlt3Block1Context>();
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_THashLBrace() { return GetToken(CompilerParser.LR_THashLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(CompilerParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PReferenceAlt3Block1Context[] pr_PReferenceAlt3Block1() {
			return GetRuleContexts<Pr_PReferenceAlt3Block1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PReferenceAlt3Block1Context pr_PReferenceAlt3Block1(int i) {
			return GetRuleContext<Pr_PReferenceAlt3Block1Context>(i);
		}
		public Pr_PReferenceAlt3Context(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PReferenceAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PEofContext : Pr_PElementValueContext {
		public IToken kEof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KEof() { return GetToken(CompilerParser.LR_KEof, 0); }
		public Pr_PEofContext(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PEof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PElementValueContext pr_PElementValue() {
		Pr_PElementValueContext _localctx = new Pr_PElementValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_PElementValue);
		int _la;
		try {
			State = 205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TLParen:
				_localctx = new Pr_PBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				((Pr_PBlockContext)_localctx).tLParen = Match(LR_TLParen);
				State = 181;
				((Pr_PBlockContext)_localctx).alternativesAntlr1 = pr_PBlockAlternative();
				State = 185;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 182;
					((Pr_PBlockContext)_localctx)._pr_PBlockBlock1 = pr_PBlockBlock1();
					((Pr_PBlockContext)_localctx)._pBlockBlock1Antlr1.Add(((Pr_PBlockContext)_localctx)._pr_PBlockBlock1);
					}
					}
					State = 187;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 188;
				((Pr_PBlockContext)_localctx).tRParen = Match(LR_TRParen);
				}
				break;
			case LR_KEof:
				_localctx = new Pr_PEofContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 190;
				((Pr_PEofContext)_localctx).kEof = Match(LR_KEof);
				}
				break;
			case LR_TString:
				_localctx = new Pr_PKeywordContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 191;
				((Pr_PKeywordContext)_localctx).textAntlr1 = Match(LR_TString);
				}
				break;
			case LR_TPrimitiveType:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_PReferenceAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 192;
				((Pr_PReferenceAlt1Context)_localctx).ruleAntlr1 = pr_Identifier();
				}
				break;
			case LR_THash:
				_localctx = new Pr_PReferenceAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 193;
				((Pr_PReferenceAlt2Context)_localctx).tHash = Match(LR_THash);
				State = 194;
				((Pr_PReferenceAlt2Context)_localctx).referencedTypesAntlr1 = pr_Qualifier();
				}
				break;
			case LR_THashLBrace:
				_localctx = new Pr_PReferenceAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 195;
				((Pr_PReferenceAlt3Context)_localctx).tHashLBrace = Match(LR_THashLBrace);
				State = 196;
				((Pr_PReferenceAlt3Context)_localctx).referencedTypesAntlr1 = pr_Qualifier();
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 197;
					((Pr_PReferenceAlt3Context)_localctx)._pr_PReferenceAlt3Block1 = pr_PReferenceAlt3Block1();
					((Pr_PReferenceAlt3Context)_localctx)._pReferenceAlt3Block1Antlr1.Add(((Pr_PReferenceAlt3Context)_localctx)._pr_PReferenceAlt3Block1);
					}
					}
					State = 202;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 203;
				((Pr_PReferenceAlt3Context)_localctx).tRBrace = Match(LR_TRBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PBlockAlternativeContext : ParserRuleContext {
		public Pr_PElementContext _pr_PElement;
		public IList<Pr_PElementContext> _elementsAntlr1 = new List<Pr_PElementContext>();
		public Pr_PBlockAlternativeBlock1Context pBlockAlternativeBlock1Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementContext[] pr_PElement() {
			return GetRuleContexts<Pr_PElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementContext pr_PElement(int i) {
			return GetRuleContext<Pr_PElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PBlockAlternativeBlock1Context pr_PBlockAlternativeBlock1() {
			return GetRuleContext<Pr_PBlockAlternativeBlock1Context>(0);
		}
		public Pr_PBlockAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PBlockAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PBlockAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PBlockAlternativeContext pr_PBlockAlternative() {
		Pr_PBlockAlternativeContext _localctx = new Pr_PBlockAlternativeContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_PBlockAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131941932425216L) != 0)) {
				{
				{
				State = 207;
				_localctx._pr_PElement = pr_PElement();
				_localctx._elementsAntlr1.Add(_localctx._pr_PElement);
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TEqGt) {
				{
				State = 213;
				_localctx.pBlockAlternativeBlock1Antlr1 = pr_PBlockAlternativeBlock1();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LAlternativeContext : ParserRuleContext {
		public Pr_LElementContext _pr_LElement;
		public IList<Pr_LElementContext> _elementsAntlr1 = new List<Pr_LElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementContext[] pr_LElement() {
			return GetRuleContexts<Pr_LElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementContext pr_LElement(int i) {
			return GetRuleContext<Pr_LElementContext>(i);
		}
		public Pr_LAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LAlternativeContext pr_LAlternative() {
		Pr_LAlternativeContext _localctx = new Pr_LAlternativeContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_LAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 131941408047104L) != 0)) {
				{
				{
				State = 216;
				_localctx._pr_LElement = pr_LElement();
				_localctx._elementsAntlr1.Add(_localctx._pr_LElement);
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LElementContext : ParserRuleContext {
		public IToken isNegated;
		public Pr_LElementValueContext valueAntlr1;
		public IToken tQuestion;
		public IToken tAsterisk;
		public IToken tPlus;
		public IToken tQuestionQuestion;
		public IToken tAsteriskQuestion;
		public IToken tPlusQuestion;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementValueContext pr_LElementValue() {
			return GetRuleContext<Pr_LElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TTilde() { return GetToken(CompilerParser.LR_TTilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(CompilerParser.LR_TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsterisk() { return GetToken(CompilerParser.LR_TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlus() { return GetToken(CompilerParser.LR_TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionQuestion() { return GetToken(CompilerParser.LR_TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsteriskQuestion() { return GetToken(CompilerParser.LR_TAsteriskQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusQuestion() { return GetToken(CompilerParser.LR_TPlusQuestion, 0); }
		public Pr_LElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LElementContext pr_LElement() {
		Pr_LElementContext _localctx = new Pr_LElementContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_LElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TTilde) {
				{
				State = 222;
				_localctx.isNegated = Match(LR_TTilde);
				}
			}

			State = 225;
			_localctx.valueAntlr1 = pr_LElementValue();
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TQuestion:
				{
				State = 226;
				_localctx.tQuestion = Match(LR_TQuestion);
				}
				break;
			case LR_TAsterisk:
				{
				State = 227;
				_localctx.tAsterisk = Match(LR_TAsterisk);
				}
				break;
			case LR_TPlus:
				{
				State = 228;
				_localctx.tPlus = Match(LR_TPlus);
				}
				break;
			case LR_TQuestionQuestion:
				{
				State = 229;
				_localctx.tQuestionQuestion = Match(LR_TQuestionQuestion);
				}
				break;
			case LR_TAsteriskQuestion:
				{
				State = 230;
				_localctx.tAsteriskQuestion = Match(LR_TAsteriskQuestion);
				}
				break;
			case LR_TPlusQuestion:
				{
				State = 231;
				_localctx.tPlusQuestion = Match(LR_TPlusQuestion);
				}
				break;
			case LR_TSemicolon:
			case LR_TBar:
			case LR_TLParen:
			case LR_TRParen:
			case LR_TTilde:
			case LR_TDot:
			case LR_TPrimitiveType:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
			case LR_TString:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LElementValueContext : ParserRuleContext {
		public Pr_LElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LElementValue; } }
	 
		public Pr_LElementValueContext() { }
		public virtual void CopyFrom(Pr_LElementValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_LBlockContext : Pr_LElementValueContext {
		public IToken tLParen;
		public Pr_LAlternativeContext alternativesAntlr1;
		public Pr_LBlockBlock1Context _pr_LBlockBlock1;
		public IList<Pr_LBlockBlock1Context> _lBlockBlock1Antlr1 = new List<Pr_LBlockBlock1Context>();
		public IToken tRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LBlockBlock1Context[] pr_LBlockBlock1() {
			return GetRuleContexts<Pr_LBlockBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LBlockBlock1Context pr_LBlockBlock1(int i) {
			return GetRuleContext<Pr_LBlockBlock1Context>(i);
		}
		public Pr_LBlockContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LRangeContext : Pr_LElementValueContext {
		public IToken StartCharAntlr1;
		public IToken tDotDot;
		public IToken EndCharAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TString() { return GetTokens(CompilerParser.LR_TString); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString(int i) {
			return GetToken(CompilerParser.LR_TString, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDotDot() { return GetToken(CompilerParser.LR_TDotDot, 0); }
		public Pr_LRangeContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LFixedContext : Pr_LElementValueContext {
		public IToken textAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_LFixedContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LFixed(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LWildCardContext : Pr_LElementValueContext {
		public IToken tDot;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		public Pr_LWildCardContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LWildCard(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LReferenceContext : Pr_LElementValueContext {
		public Pr_IdentifierContext ruleAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_LReferenceContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LElementValueContext pr_LElementValue() {
		Pr_LElementValueContext _localctx = new Pr_LElementValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_LElementValue);
		int _la;
		try {
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new Pr_LBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				((Pr_LBlockContext)_localctx).tLParen = Match(LR_TLParen);
				State = 235;
				((Pr_LBlockContext)_localctx).alternativesAntlr1 = pr_LAlternative();
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 236;
					((Pr_LBlockContext)_localctx)._pr_LBlockBlock1 = pr_LBlockBlock1();
					((Pr_LBlockContext)_localctx)._lBlockBlock1Antlr1.Add(((Pr_LBlockContext)_localctx)._pr_LBlockBlock1);
					}
					}
					State = 241;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 242;
				((Pr_LBlockContext)_localctx).tRParen = Match(LR_TRParen);
				}
				break;
			case 2:
				_localctx = new Pr_LFixedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 244;
				((Pr_LFixedContext)_localctx).textAntlr1 = Match(LR_TString);
				}
				break;
			case 3:
				_localctx = new Pr_LWildCardContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 245;
				((Pr_LWildCardContext)_localctx).tDot = Match(LR_TDot);
				}
				break;
			case 4:
				_localctx = new Pr_LRangeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 246;
				((Pr_LRangeContext)_localctx).StartCharAntlr1 = Match(LR_TString);
				State = 247;
				((Pr_LRangeContext)_localctx).tDotDot = Match(LR_TDotDot);
				State = 248;
				((Pr_LRangeContext)_localctx).EndCharAntlr1 = Match(LR_TString);
				}
				break;
			case 5:
				_localctx = new Pr_LReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 249;
				((Pr_LReferenceContext)_localctx).ruleAntlr1 = pr_Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ExpressionContext : ParserRuleContext {
		public Pr_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Expression; } }
	 
		public Pr_ExpressionContext() { }
		public virtual void CopyFrom(Pr_ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ReferenceExpressionContext : Pr_ExpressionContext {
		public Pr_QualifierContext symbolValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ReferenceExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ExpressionTokensContext : Pr_ExpressionContext {
		public IToken kNull;
		public IToken boolValue;
		public IToken kFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNull() { return GetToken(CompilerParser.LR_KNull, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KTrue() { return GetToken(CompilerParser.LR_KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFalse() { return GetToken(CompilerParser.LR_KFalse, 0); }
		public Pr_ExpressionTokensContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ExpressionTokens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ArrayExpressionContext : Pr_ExpressionContext {
		public IToken tLBrace;
		public Pr_ArrayExpressionBlock1Context arrayExpressionBlock1Antlr1;
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(CompilerParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(CompilerParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayExpressionBlock1Context pr_ArrayExpressionBlock1() {
			return GetRuleContext<Pr_ArrayExpressionBlock1Context>(0);
		}
		public Pr_ArrayExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_IntExpressionContext : Pr_ExpressionContext {
		public IToken intValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TInteger() { return GetToken(CompilerParser.LR_TInteger, 0); }
		public Pr_IntExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IntExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_StringExpressionContext : Pr_ExpressionContext {
		public IToken stringValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_StringExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_StringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ExpressionContext pr_Expression() {
		Pr_ExpressionContext _localctx = new Pr_ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_Expression);
		int _la;
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TInteger:
				_localctx = new Pr_IntExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 252;
				((Pr_IntExpressionContext)_localctx).intValueAntlr1 = Match(LR_TInteger);
				}
				break;
			case LR_TString:
				_localctx = new Pr_StringExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 253;
				((Pr_StringExpressionContext)_localctx).stringValueAntlr1 = Match(LR_TString);
				}
				break;
			case LR_TPrimitiveType:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 254;
				((Pr_ReferenceExpressionContext)_localctx).symbolValueAntlr1 = pr_Qualifier();
				}
				break;
			case LR_TLBrace:
				_localctx = new Pr_ArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 255;
				((Pr_ArrayExpressionContext)_localctx).tLBrace = Match(LR_TLBrace);
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 134140921905152L) != 0)) {
					{
					State = 256;
					((Pr_ArrayExpressionContext)_localctx).arrayExpressionBlock1Antlr1 = pr_ArrayExpressionBlock1();
					}
				}

				State = 259;
				((Pr_ArrayExpressionContext)_localctx).tRBrace = Match(LR_TRBrace);
				}
				break;
			case LR_KNull:
			case LR_KTrue:
			case LR_KFalse:
				_localctx = new Pr_ExpressionTokensContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 263;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_KNull:
					{
					State = 260;
					((Pr_ExpressionTokensContext)_localctx).kNull = Match(LR_KNull);
					}
					break;
				case LR_KTrue:
					{
					State = 261;
					((Pr_ExpressionTokensContext)_localctx).boolValue = Match(LR_KTrue);
					}
					break;
				case LR_KFalse:
					{
					State = 262;
					((Pr_ExpressionTokensContext)_localctx).kFalse = Match(LR_KFalse);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserAnnotationContext : ParserRuleContext {
		public IToken tLBracket;
		public Pr_QualifierContext typeAntlr1;
		public Pr_AnnotationArgumentsContext annotationArgumentsAntlr1;
		public IToken tRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(CompilerParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(CompilerParser.LR_TRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
			return GetRuleContext<Pr_AnnotationArgumentsContext>(0);
		}
		public Pr_ParserAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserAnnotationContext pr_ParserAnnotation() {
		Pr_ParserAnnotationContext _localctx = new Pr_ParserAnnotationContext(Context, State);
		EnterRule(_localctx, 28, RULE_pr_ParserAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_localctx.tLBracket = Match(LR_TLBracket);
			State = 268;
			_localctx.typeAntlr1 = pr_Qualifier();
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLParen) {
				{
				State = 269;
				_localctx.annotationArgumentsAntlr1 = pr_AnnotationArguments();
				}
			}

			State = 272;
			_localctx.tRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerAnnotationContext : ParserRuleContext {
		public IToken tLBracket;
		public Pr_QualifierContext typeAntlr1;
		public Pr_AnnotationArgumentsContext annotationArgumentsAntlr1;
		public IToken tRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(CompilerParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(CompilerParser.LR_TRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
			return GetRuleContext<Pr_AnnotationArgumentsContext>(0);
		}
		public Pr_LexerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerAnnotationContext pr_LexerAnnotation() {
		Pr_LexerAnnotationContext _localctx = new Pr_LexerAnnotationContext(Context, State);
		EnterRule(_localctx, 30, RULE_pr_LexerAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274;
			_localctx.tLBracket = Match(LR_TLBracket);
			State = 275;
			_localctx.typeAntlr1 = pr_Qualifier();
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLParen) {
				{
				State = 276;
				_localctx.annotationArgumentsAntlr1 = pr_AnnotationArguments();
				}
			}

			State = 279;
			_localctx.tRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentsContext : ParserRuleContext {
		public IToken tLParen;
		public Pr_AnnotationArgumentContext argumentsAntlr1;
		public Pr_AnnotationArgumentsBlock1Context _pr_AnnotationArgumentsBlock1;
		public IList<Pr_AnnotationArgumentsBlock1Context> _annotationArgumentsBlock1Antlr1 = new List<Pr_AnnotationArgumentsBlock1Context>();
		public IToken tRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
			return GetRuleContext<Pr_AnnotationArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsBlock1Context[] pr_AnnotationArgumentsBlock1() {
			return GetRuleContexts<Pr_AnnotationArgumentsBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsBlock1Context pr_AnnotationArgumentsBlock1(int i) {
			return GetRuleContext<Pr_AnnotationArgumentsBlock1Context>(i);
		}
		public Pr_AnnotationArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
		Pr_AnnotationArgumentsContext _localctx = new Pr_AnnotationArgumentsContext(Context, State);
		EnterRule(_localctx, 32, RULE_pr_AnnotationArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			_localctx.tLParen = Match(LR_TLParen);
			State = 282;
			_localctx.argumentsAntlr1 = pr_AnnotationArgument();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 283;
				_localctx._pr_AnnotationArgumentsBlock1 = pr_AnnotationArgumentsBlock1();
				_localctx._annotationArgumentsBlock1Antlr1.Add(_localctx._pr_AnnotationArgumentsBlock1);
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 289;
			_localctx.tRParen = Match(LR_TRParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentContext : ParserRuleContext {
		public Pr_AnnotationArgumentBlock1Context annotationArgumentBlock1Antlr1;
		public Pr_ExpressionContext valueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentBlock1Context pr_AnnotationArgumentBlock1() {
			return GetRuleContext<Pr_AnnotationArgumentBlock1Context>(0);
		}
		public Pr_AnnotationArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
		Pr_AnnotationArgumentContext _localctx = new Pr_AnnotationArgumentContext(Context, State);
		EnterRule(_localctx, 34, RULE_pr_AnnotationArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 291;
				_localctx.annotationArgumentBlock1Antlr1 = pr_AnnotationArgumentBlock1();
				}
				break;
			}
			State = 294;
			_localctx.valueAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 36, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		public Pr_QualifierBlock1Context _pr_QualifierBlock1;
		public IList<Pr_QualifierBlock1Context> _qualifierBlock1Antlr1 = new List<Pr_QualifierBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context[] pr_QualifierBlock1() {
			return GetRuleContexts<Pr_QualifierBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context pr_QualifierBlock1(int i) {
			return GetRuleContext<Pr_QualifierBlock1Context>(i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_pr_Qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			_localctx.identifierAntlr1 = pr_Identifier();
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TDot) {
				{
				{
				State = 299;
				_localctx._pr_QualifierBlock1 = pr_QualifierBlock1();
				_localctx._qualifierBlock1Antlr1.Add(_localctx._pr_QualifierBlock1);
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListContext : ParserRuleContext {
		public Pr_QualifierContext qualifierAntlr1;
		public Pr_QualifierListBlock1Context _pr_QualifierListBlock1;
		public IList<Pr_QualifierListBlock1Context> _qualifierListBlock1Antlr1 = new List<Pr_QualifierListBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context[] pr_QualifierListBlock1() {
			return GetRuleContexts<Pr_QualifierListBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context pr_QualifierListBlock1(int i) {
			return GetRuleContext<Pr_QualifierListBlock1Context>(i);
		}
		public Pr_QualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListContext pr_QualifierList() {
		Pr_QualifierListContext _localctx = new Pr_QualifierListContext(Context, State);
		EnterRule(_localctx, 40, RULE_pr_QualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			State = 309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 306;
				_localctx._pr_QualifierListBlock1 = pr_QualifierListBlock1();
				_localctx._qualifierListBlock1Antlr1.Add(_localctx._pr_QualifierListBlock1);
				}
				}
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
	 
		public Pr_IdentifierContext() { }
		public virtual void CopyFrom(Pr_IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_IdentifierAlt1Context : Pr_IdentifierContext {
		public IToken tPrimitiveTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPrimitiveType() { return GetToken(CompilerParser.LR_TPrimitiveType, 0); }
		public Pr_IdentifierAlt1Context(Pr_IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IdentifierAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_IdentifierAlt2Context : Pr_IdentifierContext {
		public IToken tIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(CompilerParser.LR_TIdentifier, 0); }
		public Pr_IdentifierAlt2Context(Pr_IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IdentifierAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_IdentifierAlt3Context : Pr_IdentifierContext {
		public IToken tVerbatimIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TVerbatimIdentifier() { return GetToken(CompilerParser.LR_TVerbatimIdentifier, 0); }
		public Pr_IdentifierAlt3Context(Pr_IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IdentifierAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_pr_Identifier);
		try {
			State = 315;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TPrimitiveType:
				_localctx = new Pr_IdentifierAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				((Pr_IdentifierAlt1Context)_localctx).tPrimitiveTypeAntlr1 = Match(LR_TPrimitiveType);
				}
				break;
			case LR_TIdentifier:
				_localctx = new Pr_IdentifierAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				((Pr_IdentifierAlt2Context)_localctx).tIdentifierAntlr1 = Match(LR_TIdentifier);
				}
				break;
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_IdentifierAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 314;
				((Pr_IdentifierAlt3Context)_localctx).tVerbatimIdentifierAntlr1 = Match(LR_TVerbatimIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_GrammarBlock1Context : ParserRuleContext {
		public Pr_RuleContext _pr_Rule;
		public IList<Pr_RuleContext> _rulesAntlr1 = new List<Pr_RuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext[] pr_Rule() {
			return GetRuleContexts<Pr_RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext pr_Rule(int i) {
			return GetRuleContext<Pr_RuleContext>(i);
		}
		public Pr_GrammarBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_GrammarBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_GrammarBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_GrammarBlock1Context pr_GrammarBlock1() {
		Pr_GrammarBlock1Context _localctx = new Pr_GrammarBlock1Context(Context, State);
		EnterRule(_localctx, 44, RULE_pr_GrammarBlock1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 317;
					_localctx._pr_Rule = pr_Rule();
					_localctx._rulesAntlr1.Add(_localctx._pr_Rule);
					}
					} 
				}
				State = 322;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleBlock1Context : ParserRuleContext {
		public Pr_ParserRuleBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleBlock1; } }
	 
		public Pr_ParserRuleBlock1Context() { }
		public virtual void CopyFrom(Pr_ParserRuleBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ParserRuleBlock1Alt3Context : Pr_ParserRuleBlock1Context {
		public Pr_NameContext nameAntlr1;
		public IToken kReturns;
		public Pr_QualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ParserRuleBlock1Alt3Context(Pr_ParserRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleBlock1Alt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ParserRuleBlock1Alt1Context : Pr_ParserRuleBlock1Context {
		public IToken isBlock;
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBlock() { return GetToken(CompilerParser.LR_KBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_ParserRuleBlock1Alt1Context(Pr_ParserRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ParserRuleBlock1Alt2Context : Pr_ParserRuleBlock1Context {
		public Pr_IdentifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_ParserRuleBlock1Alt2Context(Pr_ParserRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleBlock1Context pr_ParserRuleBlock1() {
		Pr_ParserRuleBlock1Context _localctx = new Pr_ParserRuleBlock1Context(Context, State);
		EnterRule(_localctx, 46, RULE_pr_ParserRuleBlock1);
		try {
			State = 330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				_localctx = new Pr_ParserRuleBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 323;
				((Pr_ParserRuleBlock1Alt1Context)_localctx).isBlock = Match(LR_KBlock);
				State = 324;
				((Pr_ParserRuleBlock1Alt1Context)_localctx).nameAntlr1 = pr_Name();
				}
				break;
			case 2:
				_localctx = new Pr_ParserRuleBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 325;
				((Pr_ParserRuleBlock1Alt2Context)_localctx).returnTypeAntlr1 = pr_Identifier();
				}
				break;
			case 3:
				_localctx = new Pr_ParserRuleBlock1Alt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 326;
				((Pr_ParserRuleBlock1Alt3Context)_localctx).nameAntlr1 = pr_Name();
				State = 327;
				((Pr_ParserRuleBlock1Alt3Context)_localctx).kReturns = Match(LR_KReturns);
				State = 328;
				((Pr_ParserRuleBlock1Alt3Context)_localctx).returnTypeAntlr1 = pr_Qualifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleBlock2Context : ParserRuleContext {
		public IToken tBar;
		public Pr_PAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeContext pr_PAlternative() {
			return GetRuleContext<Pr_PAlternativeContext>(0);
		}
		public Pr_ParserRuleBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleBlock2Context pr_ParserRuleBlock2() {
		Pr_ParserRuleBlock2Context _localctx = new Pr_ParserRuleBlock2Context(Context, State);
		EnterRule(_localctx, 48, RULE_pr_ParserRuleBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332;
			_localctx.tBar = Match(LR_TBar);
			State = 333;
			_localctx.alternativesAntlr1 = pr_PAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PAlternativeBlock1Context : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _annotations1Antlr1 = new List<Pr_ParserAnnotationContext>();
		public IToken kAlt;
		public Pr_NameContext nameAntlr1;
		public Pr_PAlternativeBlock1Block1Context pAlternativeBlock1Block1Antlr1;
		public IToken tColon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAlt() { return GetToken(CompilerParser.LR_KAlt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeBlock1Block1Context pr_PAlternativeBlock1Block1() {
			return GetRuleContext<Pr_PAlternativeBlock1Block1Context>(0);
		}
		public Pr_PAlternativeBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PAlternativeBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PAlternativeBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PAlternativeBlock1Context pr_PAlternativeBlock1() {
		Pr_PAlternativeBlock1Context _localctx = new Pr_PAlternativeBlock1Context(Context, State);
		EnterRule(_localctx, 50, RULE_pr_PAlternativeBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 335;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._annotations1Antlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 341;
			_localctx.kAlt = Match(LR_KAlt);
			State = 342;
			_localctx.nameAntlr1 = pr_Name();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KReturns) {
				{
				State = 343;
				_localctx.pAlternativeBlock1Block1Antlr1 = pr_PAlternativeBlock1Block1();
				}
			}

			State = 346;
			_localctx.tColon = Match(LR_TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PAlternativeBlock2Context : ParserRuleContext {
		public IToken tEqGt;
		public Pr_ExpressionContext returnValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEqGt() { return GetToken(CompilerParser.LR_TEqGt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		public Pr_PAlternativeBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PAlternativeBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PAlternativeBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PAlternativeBlock2Context pr_PAlternativeBlock2() {
		Pr_PAlternativeBlock2Context _localctx = new Pr_PAlternativeBlock2Context(Context, State);
		EnterRule(_localctx, 52, RULE_pr_PAlternativeBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_localctx.tEqGt = Match(LR_TEqGt);
			State = 349;
			_localctx.returnValueAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PElementBlock1Context : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _nameAnnotationsAntlr1 = new List<Pr_ParserAnnotationContext>();
		public Pr_IdentifierContext symbolPropertyAntlr1;
		public IToken tEq;
		public IToken tQuestionEq;
		public IToken tExclEq;
		public IToken tPlusEq;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEq() { return GetToken(CompilerParser.LR_TEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionEq() { return GetToken(CompilerParser.LR_TQuestionEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TExclEq() { return GetToken(CompilerParser.LR_TExclEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusEq() { return GetToken(CompilerParser.LR_TPlusEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		public Pr_PElementBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PElementBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PElementBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PElementBlock1Context pr_PElementBlock1() {
		Pr_PElementBlock1Context _localctx = new Pr_PElementBlock1Context(Context, State);
		EnterRule(_localctx, 54, RULE_pr_PElementBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 351;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._nameAnnotationsAntlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 357;
			_localctx.symbolPropertyAntlr1 = pr_Identifier();
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TEq:
				{
				State = 358;
				_localctx.tEq = Match(LR_TEq);
				}
				break;
			case LR_TQuestionEq:
				{
				State = 359;
				_localctx.tQuestionEq = Match(LR_TQuestionEq);
				}
				break;
			case LR_TExclEq:
				{
				State = 360;
				_localctx.tExclEq = Match(LR_TExclEq);
				}
				break;
			case LR_TPlusEq:
				{
				State = 361;
				_localctx.tPlusEq = Match(LR_TPlusEq);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PReferenceAlt3Block1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext referencedTypesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PReferenceAlt3Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PReferenceAlt3Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PReferenceAlt3Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PReferenceAlt3Block1Context pr_PReferenceAlt3Block1() {
		Pr_PReferenceAlt3Block1Context _localctx = new Pr_PReferenceAlt3Block1Context(Context, State);
		EnterRule(_localctx, 56, RULE_pr_PReferenceAlt3Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_localctx.tComma = Match(LR_TComma);
			State = 365;
			_localctx.referencedTypesAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PBlockBlock1Context : ParserRuleContext {
		public IToken tBar;
		public Pr_PBlockAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PBlockAlternativeContext pr_PBlockAlternative() {
			return GetRuleContext<Pr_PBlockAlternativeContext>(0);
		}
		public Pr_PBlockBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PBlockBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PBlockBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PBlockBlock1Context pr_PBlockBlock1() {
		Pr_PBlockBlock1Context _localctx = new Pr_PBlockBlock1Context(Context, State);
		EnterRule(_localctx, 58, RULE_pr_PBlockBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			_localctx.tBar = Match(LR_TBar);
			State = 368;
			_localctx.alternativesAntlr1 = pr_PBlockAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PBlockAlternativeBlock1Context : ParserRuleContext {
		public IToken tEqGt;
		public Pr_ExpressionContext returnValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEqGt() { return GetToken(CompilerParser.LR_TEqGt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		public Pr_PBlockAlternativeBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PBlockAlternativeBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PBlockAlternativeBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PBlockAlternativeBlock1Context pr_PBlockAlternativeBlock1() {
		Pr_PBlockAlternativeBlock1Context _localctx = new Pr_PBlockAlternativeBlock1Context(Context, State);
		EnterRule(_localctx, 60, RULE_pr_PBlockAlternativeBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_localctx.tEqGt = Match(LR_TEqGt);
			State = 371;
			_localctx.returnValueAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerRuleBlock1Context : ParserRuleContext {
		public Pr_LexerRuleBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerRuleBlock1; } }
	 
		public Pr_LexerRuleBlock1Context() { }
		public virtual void CopyFrom(Pr_LexerRuleBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_LexerRuleBlock1Alt3Context : Pr_LexerRuleBlock1Context {
		public IToken isFragment;
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFragment() { return GetToken(CompilerParser.LR_KFragment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_LexerRuleBlock1Alt3Context(Pr_LexerRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock1Alt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LexerRuleBlock1Alt2Context : Pr_LexerRuleBlock1Context {
		public IToken isHidden;
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KHidden() { return GetToken(CompilerParser.LR_KHidden, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_LexerRuleBlock1Alt2Context(Pr_LexerRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LexerRuleBlock1Alt1Context : Pr_LexerRuleBlock1Context {
		public IToken kToken;
		public Pr_NameContext nameAntlr1;
		public Pr_LexerRuleBlock1Alt1Block1Context lexerRuleBlock1Alt1Block1Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KToken() { return GetToken(CompilerParser.LR_KToken, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerRuleBlock1Alt1Block1Context pr_LexerRuleBlock1Alt1Block1() {
			return GetRuleContext<Pr_LexerRuleBlock1Alt1Block1Context>(0);
		}
		public Pr_LexerRuleBlock1Alt1Context(Pr_LexerRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerRuleBlock1Context pr_LexerRuleBlock1() {
		Pr_LexerRuleBlock1Context _localctx = new Pr_LexerRuleBlock1Context(Context, State);
		EnterRule(_localctx, 62, RULE_pr_LexerRuleBlock1);
		int _la;
		try {
			State = 382;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KToken:
				_localctx = new Pr_LexerRuleBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 373;
				((Pr_LexerRuleBlock1Alt1Context)_localctx).kToken = Match(LR_KToken);
				State = 374;
				((Pr_LexerRuleBlock1Alt1Context)_localctx).nameAntlr1 = pr_Name();
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KReturns) {
					{
					State = 375;
					((Pr_LexerRuleBlock1Alt1Context)_localctx).lexerRuleBlock1Alt1Block1Antlr1 = pr_LexerRuleBlock1Alt1Block1();
					}
				}

				}
				break;
			case LR_KHidden:
				_localctx = new Pr_LexerRuleBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 378;
				((Pr_LexerRuleBlock1Alt2Context)_localctx).isHidden = Match(LR_KHidden);
				State = 379;
				((Pr_LexerRuleBlock1Alt2Context)_localctx).nameAntlr1 = pr_Name();
				}
				break;
			case LR_KFragment:
				_localctx = new Pr_LexerRuleBlock1Alt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 380;
				((Pr_LexerRuleBlock1Alt3Context)_localctx).isFragment = Match(LR_KFragment);
				State = 381;
				((Pr_LexerRuleBlock1Alt3Context)_localctx).nameAntlr1 = pr_Name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerRuleBlock2Context : ParserRuleContext {
		public IToken tBar;
		public Pr_LAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_LexerRuleBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerRuleBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerRuleBlock2Context pr_LexerRuleBlock2() {
		Pr_LexerRuleBlock2Context _localctx = new Pr_LexerRuleBlock2Context(Context, State);
		EnterRule(_localctx, 64, RULE_pr_LexerRuleBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384;
			_localctx.tBar = Match(LR_TBar);
			State = 385;
			_localctx.alternativesAntlr1 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LBlockBlock1Context : ParserRuleContext {
		public IToken tBar;
		public Pr_LAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_LBlockBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LBlockBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LBlockBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LBlockBlock1Context pr_LBlockBlock1() {
		Pr_LBlockBlock1Context _localctx = new Pr_LBlockBlock1Context(Context, State);
		EnterRule(_localctx, 66, RULE_pr_LBlockBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			_localctx.tBar = Match(LR_TBar);
			State = 388;
			_localctx.alternativesAntlr1 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ArrayExpressionBlock1Context : ParserRuleContext {
		public Pr_ExpressionContext itemsAntlr1;
		public Pr_ArrayExpressionBlock1Block1Context _pr_ArrayExpressionBlock1Block1;
		public IList<Pr_ArrayExpressionBlock1Block1Context> _arrayExpressionBlock1Block1Antlr1 = new List<Pr_ArrayExpressionBlock1Block1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayExpressionBlock1Block1Context[] pr_ArrayExpressionBlock1Block1() {
			return GetRuleContexts<Pr_ArrayExpressionBlock1Block1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayExpressionBlock1Block1Context pr_ArrayExpressionBlock1Block1(int i) {
			return GetRuleContext<Pr_ArrayExpressionBlock1Block1Context>(i);
		}
		public Pr_ArrayExpressionBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ArrayExpressionBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpressionBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ArrayExpressionBlock1Context pr_ArrayExpressionBlock1() {
		Pr_ArrayExpressionBlock1Context _localctx = new Pr_ArrayExpressionBlock1Context(Context, State);
		EnterRule(_localctx, 68, RULE_pr_ArrayExpressionBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 390;
			_localctx.itemsAntlr1 = pr_Expression();
			State = 394;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 391;
				_localctx._pr_ArrayExpressionBlock1Block1 = pr_ArrayExpressionBlock1Block1();
				_localctx._arrayExpressionBlock1Block1Antlr1.Add(_localctx._pr_ArrayExpressionBlock1Block1);
				}
				}
				State = 396;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentsBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_AnnotationArgumentContext argumentsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
			return GetRuleContext<Pr_AnnotationArgumentContext>(0);
		}
		public Pr_AnnotationArgumentsBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgumentsBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgumentsBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentsBlock1Context pr_AnnotationArgumentsBlock1() {
		Pr_AnnotationArgumentsBlock1Context _localctx = new Pr_AnnotationArgumentsBlock1Context(Context, State);
		EnterRule(_localctx, 70, RULE_pr_AnnotationArgumentsBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397;
			_localctx.tComma = Match(LR_TComma);
			State = 398;
			_localctx.argumentsAntlr1 = pr_AnnotationArgument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentBlock1Context : ParserRuleContext {
		public Pr_IdentifierContext namedParameterAntlr1;
		public IToken tColon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		public Pr_AnnotationArgumentBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgumentBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgumentBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentBlock1Context pr_AnnotationArgumentBlock1() {
		Pr_AnnotationArgumentBlock1Context _localctx = new Pr_AnnotationArgumentBlock1Context(Context, State);
		EnterRule(_localctx, 72, RULE_pr_AnnotationArgumentBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_localctx.namedParameterAntlr1 = pr_Identifier();
			State = 401;
			_localctx.tColon = Match(LR_TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierBlock1Context : ParserRuleContext {
		public IToken tDot;
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierBlock1Context pr_QualifierBlock1() {
		Pr_QualifierBlock1Context _localctx = new Pr_QualifierBlock1Context(Context, State);
		EnterRule(_localctx, 74, RULE_pr_QualifierBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			_localctx.tDot = Match(LR_TDot);
			State = 404;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_QualifierListBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierListBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierListBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListBlock1Context pr_QualifierListBlock1() {
		Pr_QualifierListBlock1Context _localctx = new Pr_QualifierListBlock1Context(Context, State);
		EnterRule(_localctx, 76, RULE_pr_QualifierListBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_localctx.tComma = Match(LR_TComma);
			State = 407;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PAlternativeBlock1Block1Context : ParserRuleContext {
		public IToken kReturns;
		public Pr_QualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PAlternativeBlock1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PAlternativeBlock1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PAlternativeBlock1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PAlternativeBlock1Block1Context pr_PAlternativeBlock1Block1() {
		Pr_PAlternativeBlock1Block1Context _localctx = new Pr_PAlternativeBlock1Block1Context(Context, State);
		EnterRule(_localctx, 78, RULE_pr_PAlternativeBlock1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409;
			_localctx.kReturns = Match(LR_KReturns);
			State = 410;
			_localctx.returnTypeAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerRuleBlock1Alt1Block1Context : ParserRuleContext {
		public IToken kReturns;
		public Pr_QualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_LexerRuleBlock1Alt1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerRuleBlock1Alt1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock1Alt1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerRuleBlock1Alt1Block1Context pr_LexerRuleBlock1Alt1Block1() {
		Pr_LexerRuleBlock1Alt1Block1Context _localctx = new Pr_LexerRuleBlock1Alt1Block1Context(Context, State);
		EnterRule(_localctx, 80, RULE_pr_LexerRuleBlock1Alt1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 412;
			_localctx.kReturns = Match(LR_KReturns);
			State = 413;
			_localctx.returnTypeAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ArrayExpressionBlock1Block1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_ExpressionContext itemsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		public Pr_ArrayExpressionBlock1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ArrayExpressionBlock1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpressionBlock1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ArrayExpressionBlock1Block1Context pr_ArrayExpressionBlock1Block1() {
		Pr_ArrayExpressionBlock1Block1Context _localctx = new Pr_ArrayExpressionBlock1Block1Context(Context, State);
		EnterRule(_localctx, 82, RULE_pr_ArrayExpressionBlock1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415;
			_localctx.tComma = Match(LR_TComma);
			State = 416;
			_localctx.itemsAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,419,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,
		0,1,0,5,0,89,8,0,10,0,12,0,92,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,
		5,2,103,8,2,10,2,12,2,106,9,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,5,5,116,
		8,5,10,5,12,5,119,9,5,1,5,1,5,1,5,1,5,5,5,125,8,5,10,5,12,5,128,9,5,1,
		5,1,5,1,5,5,5,133,8,5,10,5,12,5,136,9,5,1,5,1,5,1,5,1,5,5,5,142,8,5,10,
		5,12,5,145,9,5,1,5,1,5,3,5,149,8,5,1,6,3,6,152,8,6,1,6,5,6,155,8,6,10,
		6,12,6,158,9,6,1,6,3,6,161,8,6,1,7,3,7,164,8,7,1,7,5,7,167,8,7,10,7,12,
		7,170,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,179,8,7,1,8,1,8,1,8,5,8,184,
		8,8,10,8,12,8,187,9,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,199,
		8,8,10,8,12,8,202,9,8,1,8,1,8,3,8,206,8,8,1,9,5,9,209,8,9,10,9,12,9,212,
		9,9,1,9,3,9,215,8,9,1,10,5,10,218,8,10,10,10,12,10,221,9,10,1,11,3,11,
		224,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,233,8,11,1,12,1,12,1,
		12,5,12,238,8,12,10,12,12,12,241,9,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,3,12,251,8,12,1,13,1,13,1,13,1,13,1,13,3,13,258,8,13,1,13,1,13,
		1,13,1,13,3,13,264,8,13,3,13,266,8,13,1,14,1,14,1,14,3,14,271,8,14,1,14,
		1,14,1,15,1,15,1,15,3,15,278,8,15,1,15,1,15,1,16,1,16,1,16,5,16,285,8,
		16,10,16,12,16,288,9,16,1,16,1,16,1,17,3,17,293,8,17,1,17,1,17,1,18,1,
		18,1,19,1,19,5,19,301,8,19,10,19,12,19,304,9,19,1,20,1,20,5,20,308,8,20,
		10,20,12,20,311,9,20,1,21,1,21,1,21,3,21,316,8,21,1,22,5,22,319,8,22,10,
		22,12,22,322,9,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,331,8,23,1,24,
		1,24,1,24,1,25,5,25,337,8,25,10,25,12,25,340,9,25,1,25,1,25,1,25,3,25,
		345,8,25,1,25,1,25,1,26,1,26,1,26,1,27,5,27,353,8,27,10,27,12,27,356,9,
		27,1,27,1,27,1,27,1,27,1,27,3,27,363,8,27,1,28,1,28,1,28,1,29,1,29,1,29,
		1,30,1,30,1,30,1,31,1,31,1,31,3,31,377,8,31,1,31,1,31,1,31,1,31,3,31,383,
		8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,5,34,393,8,34,10,34,12,34,
		396,9,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,
		39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,0,0,42,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
		62,64,66,68,70,72,74,76,78,80,82,0,0,444,0,84,1,0,0,0,2,96,1,0,0,0,4,100,
		1,0,0,0,6,107,1,0,0,0,8,112,1,0,0,0,10,148,1,0,0,0,12,151,1,0,0,0,14,163,
		1,0,0,0,16,205,1,0,0,0,18,210,1,0,0,0,20,219,1,0,0,0,22,223,1,0,0,0,24,
		250,1,0,0,0,26,265,1,0,0,0,28,267,1,0,0,0,30,274,1,0,0,0,32,281,1,0,0,
		0,34,292,1,0,0,0,36,296,1,0,0,0,38,298,1,0,0,0,40,305,1,0,0,0,42,315,1,
		0,0,0,44,320,1,0,0,0,46,330,1,0,0,0,48,332,1,0,0,0,50,338,1,0,0,0,52,348,
		1,0,0,0,54,354,1,0,0,0,56,364,1,0,0,0,58,367,1,0,0,0,60,370,1,0,0,0,62,
		382,1,0,0,0,64,384,1,0,0,0,66,387,1,0,0,0,68,390,1,0,0,0,70,397,1,0,0,
		0,72,400,1,0,0,0,74,403,1,0,0,0,76,406,1,0,0,0,78,409,1,0,0,0,80,412,1,
		0,0,0,82,415,1,0,0,0,84,85,5,3,0,0,85,86,3,38,19,0,86,90,5,4,0,0,87,89,
		3,2,1,0,88,87,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,93,
		1,0,0,0,92,90,1,0,0,0,93,94,3,4,2,0,94,95,5,0,0,1,95,1,1,0,0,0,96,97,5,
		5,0,0,97,98,3,38,19,0,98,99,5,4,0,0,99,3,1,0,0,0,100,104,3,6,3,0,101,103,
		3,10,5,0,102,101,1,0,0,0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,
		0,105,5,1,0,0,0,106,104,1,0,0,0,107,108,5,6,0,0,108,109,3,36,18,0,109,
		110,5,4,0,0,110,111,3,8,4,0,111,7,1,0,0,0,112,113,3,44,22,0,113,9,1,0,
		0,0,114,116,3,28,14,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,
		117,118,1,0,0,0,118,120,1,0,0,0,119,117,1,0,0,0,120,121,3,46,23,0,121,
		122,5,9,0,0,122,126,3,12,6,0,123,125,3,48,24,0,124,123,1,0,0,0,125,128,
		1,0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,126,1,0,0,
		0,129,130,5,4,0,0,130,149,1,0,0,0,131,133,3,30,15,0,132,131,1,0,0,0,133,
		136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,134,1,
		0,0,0,137,138,3,62,31,0,138,139,5,9,0,0,139,143,3,20,10,0,140,142,3,64,
		32,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,
		146,1,0,0,0,145,143,1,0,0,0,146,147,5,4,0,0,147,149,1,0,0,0,148,117,1,
		0,0,0,148,134,1,0,0,0,149,11,1,0,0,0,150,152,3,50,25,0,151,150,1,0,0,0,
		151,152,1,0,0,0,152,156,1,0,0,0,153,155,3,14,7,0,154,153,1,0,0,0,155,158,
		1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,
		0,159,161,3,52,26,0,160,159,1,0,0,0,160,161,1,0,0,0,161,13,1,0,0,0,162,
		164,3,54,27,0,163,162,1,0,0,0,163,164,1,0,0,0,164,168,1,0,0,0,165,167,
		3,28,14,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,
		0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,178,3,16,8,0,172,179,5,35,0,0,
		173,179,5,36,0,0,174,179,5,37,0,0,175,179,5,38,0,0,176,179,5,39,0,0,177,
		179,5,40,0,0,178,172,1,0,0,0,178,173,1,0,0,0,178,174,1,0,0,0,178,175,1,
		0,0,0,178,176,1,0,0,0,178,177,1,0,0,0,178,179,1,0,0,0,179,15,1,0,0,0,180,
		181,5,17,0,0,181,185,3,18,9,0,182,184,3,58,29,0,183,182,1,0,0,0,184,187,
		1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,188,1,0,0,0,187,185,1,0,0,
		0,188,189,5,18,0,0,189,206,1,0,0,0,190,206,5,16,0,0,191,206,5,46,0,0,192,
		206,3,42,21,0,193,194,5,13,0,0,194,206,3,38,19,0,195,196,5,14,0,0,196,
		200,3,38,19,0,197,199,3,56,28,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,
		1,0,0,0,200,201,1,0,0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,5,15,0,
		0,204,206,1,0,0,0,205,180,1,0,0,0,205,190,1,0,0,0,205,191,1,0,0,0,205,
		192,1,0,0,0,205,193,1,0,0,0,205,195,1,0,0,0,206,17,1,0,0,0,207,209,3,14,
		7,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,
		214,1,0,0,0,212,210,1,0,0,0,213,215,3,60,30,0,214,213,1,0,0,0,214,215,
		1,0,0,0,215,19,1,0,0,0,216,218,3,22,11,0,217,216,1,0,0,0,218,221,1,0,0,
		0,219,217,1,0,0,0,219,220,1,0,0,0,220,21,1,0,0,0,221,219,1,0,0,0,222,224,
		5,22,0,0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,232,3,24,
		12,0,226,233,5,35,0,0,227,233,5,36,0,0,228,233,5,37,0,0,229,233,5,38,0,
		0,230,233,5,39,0,0,231,233,5,40,0,0,232,226,1,0,0,0,232,227,1,0,0,0,232,
		228,1,0,0,0,232,229,1,0,0,0,232,230,1,0,0,0,232,231,1,0,0,0,232,233,1,
		0,0,0,233,23,1,0,0,0,234,235,5,17,0,0,235,239,3,20,10,0,236,238,3,66,33,
		0,237,236,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,
		242,1,0,0,0,241,239,1,0,0,0,242,243,5,18,0,0,243,251,1,0,0,0,244,251,5,
		46,0,0,245,251,5,23,0,0,246,247,5,46,0,0,247,248,5,24,0,0,248,251,5,46,
		0,0,249,251,3,42,21,0,250,234,1,0,0,0,250,244,1,0,0,0,250,245,1,0,0,0,
		250,246,1,0,0,0,250,249,1,0,0,0,251,25,1,0,0,0,252,266,5,41,0,0,253,266,
		5,46,0,0,254,266,3,38,19,0,255,257,5,28,0,0,256,258,3,68,34,0,257,256,
		1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,266,5,15,0,0,260,264,5,25,
		0,0,261,264,5,26,0,0,262,264,5,27,0,0,263,260,1,0,0,0,263,261,1,0,0,0,
		263,262,1,0,0,0,264,266,1,0,0,0,265,252,1,0,0,0,265,253,1,0,0,0,265,254,
		1,0,0,0,265,255,1,0,0,0,265,263,1,0,0,0,266,27,1,0,0,0,267,268,5,29,0,
		0,268,270,3,38,19,0,269,271,3,32,16,0,270,269,1,0,0,0,270,271,1,0,0,0,
		271,272,1,0,0,0,272,273,5,30,0,0,273,29,1,0,0,0,274,275,5,29,0,0,275,277,
		3,38,19,0,276,278,3,32,16,0,277,276,1,0,0,0,277,278,1,0,0,0,278,279,1,
		0,0,0,279,280,5,30,0,0,280,31,1,0,0,0,281,282,5,17,0,0,282,286,3,34,17,
		0,283,285,3,70,35,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,
		287,1,0,0,0,287,289,1,0,0,0,288,286,1,0,0,0,289,290,5,18,0,0,290,33,1,
		0,0,0,291,293,3,72,36,0,292,291,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,
		0,294,295,3,26,13,0,295,35,1,0,0,0,296,297,3,42,21,0,297,37,1,0,0,0,298,
		302,3,42,21,0,299,301,3,74,37,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,
		1,0,0,0,302,303,1,0,0,0,303,39,1,0,0,0,304,302,1,0,0,0,305,309,3,38,19,
		0,306,308,3,76,38,0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,
		310,1,0,0,0,310,41,1,0,0,0,311,309,1,0,0,0,312,316,5,43,0,0,313,316,5,
		44,0,0,314,316,5,45,0,0,315,312,1,0,0,0,315,313,1,0,0,0,315,314,1,0,0,
		0,316,43,1,0,0,0,317,319,3,10,5,0,318,317,1,0,0,0,319,322,1,0,0,0,320,
		318,1,0,0,0,320,321,1,0,0,0,321,45,1,0,0,0,322,320,1,0,0,0,323,324,5,7,
		0,0,324,331,3,36,18,0,325,331,3,42,21,0,326,327,3,36,18,0,327,328,5,8,
		0,0,328,329,3,38,19,0,329,331,1,0,0,0,330,323,1,0,0,0,330,325,1,0,0,0,
		330,326,1,0,0,0,331,47,1,0,0,0,332,333,5,10,0,0,333,334,3,12,6,0,334,49,
		1,0,0,0,335,337,3,28,14,0,336,335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,
		0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,338,1,0,0,0,341,342,5,11,0,0,342,
		344,3,36,18,0,343,345,3,78,39,0,344,343,1,0,0,0,344,345,1,0,0,0,345,346,
		1,0,0,0,346,347,5,9,0,0,347,51,1,0,0,0,348,349,5,12,0,0,349,350,3,26,13,
		0,350,53,1,0,0,0,351,353,3,28,14,0,352,351,1,0,0,0,353,356,1,0,0,0,354,
		352,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,354,1,0,0,0,357,362,3,
		42,21,0,358,363,5,31,0,0,359,363,5,32,0,0,360,363,5,33,0,0,361,363,5,34,
		0,0,362,358,1,0,0,0,362,359,1,0,0,0,362,360,1,0,0,0,362,361,1,0,0,0,363,
		55,1,0,0,0,364,365,5,1,0,0,365,366,3,38,19,0,366,57,1,0,0,0,367,368,5,
		10,0,0,368,369,3,18,9,0,369,59,1,0,0,0,370,371,5,12,0,0,371,372,3,26,13,
		0,372,61,1,0,0,0,373,374,5,19,0,0,374,376,3,36,18,0,375,377,3,80,40,0,
		376,375,1,0,0,0,376,377,1,0,0,0,377,383,1,0,0,0,378,379,5,20,0,0,379,383,
		3,36,18,0,380,381,5,21,0,0,381,383,3,36,18,0,382,373,1,0,0,0,382,378,1,
		0,0,0,382,380,1,0,0,0,383,63,1,0,0,0,384,385,5,10,0,0,385,386,3,20,10,
		0,386,65,1,0,0,0,387,388,5,10,0,0,388,389,3,20,10,0,389,67,1,0,0,0,390,
		394,3,26,13,0,391,393,3,82,41,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,
		1,0,0,0,394,395,1,0,0,0,395,69,1,0,0,0,396,394,1,0,0,0,397,398,5,1,0,0,
		398,399,3,34,17,0,399,71,1,0,0,0,400,401,3,42,21,0,401,402,5,9,0,0,402,
		73,1,0,0,0,403,404,5,23,0,0,404,405,3,42,21,0,405,75,1,0,0,0,406,407,5,
		1,0,0,407,408,3,38,19,0,408,77,1,0,0,0,409,410,5,8,0,0,410,411,3,38,19,
		0,411,79,1,0,0,0,412,413,5,8,0,0,413,414,3,38,19,0,414,81,1,0,0,0,415,
		416,5,1,0,0,416,417,3,26,13,0,417,83,1,0,0,0,42,90,104,117,126,134,143,
		148,151,156,160,163,168,178,185,200,205,210,214,219,223,232,239,250,257,
		263,265,270,277,286,292,302,309,315,320,330,338,344,354,362,376,382,394
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaCompiler.Compiler
