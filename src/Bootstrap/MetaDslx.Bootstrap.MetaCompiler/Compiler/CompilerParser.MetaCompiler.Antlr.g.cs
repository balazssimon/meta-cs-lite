//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CompilerParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaCompiler.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CompilerParser : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_Utf8Bom=2, LR_KNamespace=3, LR_TSemicolon=4, LR_KUsing=5, 
		LR_KLanguage=6, LR_KReturns=7, LR_TColon=8, LR_TBar=9, LR_KBlock=10, LR_TLParen=11, 
		LR_TRParen=12, LR_KAlt=13, LR_TEqGt=14, LR_THash=15, LR_THashLBrace=16, 
		LR_TRBrace=17, LR_KEof=18, LR_KToken=19, LR_KHidden=20, LR_KFragment=21, 
		LR_TTilde=22, LR_TDot=23, LR_TDotDot=24, LR_KNull=25, LR_KTrue=26, LR_KFalse=27, 
		LR_TLBrace=28, LR_TLBracket=29, LR_TRBracket=30, LR_TEq=31, LR_TQuestionEq=32, 
		LR_TExclEq=33, LR_TPlusEq=34, LR_TQuestion=35, LR_TAsterisk=36, LR_TPlus=37, 
		LR_TQuestionQuestion=38, LR_TAsteriskQuestion=39, LR_TPlusQuestion=40, 
		LR_TInteger=41, LR_TDecimal=42, LR_TPrimitiveType=43, LR_TIdentifier=44, 
		LR_TVerbatimIdentifier=45, LR_TString=46, LR_TWhitespace=47, LR_TLineEnd=48, 
		LR_TSingleLineComment=49, LR_TMultiLineComment=50, LR_TInvalidToken=51;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Declarations = 2, RULE_pr_LanguageDeclaration = 3, 
		RULE_pr_Grammar = 4, RULE_pr_GrammarRule = 5, RULE_pr_Rule = 6, RULE_pr_Alternative = 7, 
		RULE_pr_Element = 8, RULE_pr_ElementValue = 9, RULE_pr_LAlternative = 10, 
		RULE_pr_LElement = 11, RULE_pr_LElementValue = 12, RULE_pr_Expression = 13, 
		RULE_pr_SingleExpression = 14, RULE_pr_ParserAnnotation = 15, RULE_pr_LexerAnnotation = 16, 
		RULE_pr_AnnotationArguments = 17, RULE_pr_AnnotationArgument = 18, RULE_pr_ReturnTypeIdentifier = 19, 
		RULE_pr_ReturnTypeQualifier = 20, RULE_pr_Name = 21, RULE_pr_Qualifier = 22, 
		RULE_pr_QualifierList = 23, RULE_pr_Identifier = 24, RULE_pr_SimpleQualifier = 25, 
		RULE_pr_SimpleIdentifier = 26, RULE_pr_GrammarBlock1 = 27, RULE_pr_RuleBlock1 = 28, 
		RULE_pr_RuleBlock2 = 29, RULE_pr_BlockBlock1 = 30, RULE_pr_BlockBlock2 = 31, 
		RULE_pr_BlockInlineBlock1 = 32, RULE_pr_AlternativeBlock1 = 33, RULE_pr_AlternativeBlock2 = 34, 
		RULE_pr_ElementBlock1 = 35, RULE_pr_RuleRefAlt3Block1 = 36, RULE_pr_TokenBlock1 = 37, 
		RULE_pr_TokenBlock2 = 38, RULE_pr_FragmentBlock1 = 39, RULE_pr_LBlockBlock1 = 40, 
		RULE_pr_SingleExpressionBlock1 = 41, RULE_pr_ArrayExpressionBlock1 = 42, 
		RULE_pr_AnnotationArgumentsBlock1 = 43, RULE_pr_AnnotationArgumentBlock1 = 44, 
		RULE_pr_QualifierBlock1 = 45, RULE_pr_QualifierListBlock1 = 46, RULE_pr_SimpleQualifierBlock1 = 47, 
		RULE_pr_AlternativeBlock1Block1 = 48, RULE_pr_TokenBlock1Alt1Block1 = 49, 
		RULE_pr_ArrayExpressionBlock1Block1 = 50;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Declarations", "pr_LanguageDeclaration", "pr_Grammar", 
		"pr_GrammarRule", "pr_Rule", "pr_Alternative", "pr_Element", "pr_ElementValue", 
		"pr_LAlternative", "pr_LElement", "pr_LElementValue", "pr_Expression", 
		"pr_SingleExpression", "pr_ParserAnnotation", "pr_LexerAnnotation", "pr_AnnotationArguments", 
		"pr_AnnotationArgument", "pr_ReturnTypeIdentifier", "pr_ReturnTypeQualifier", 
		"pr_Name", "pr_Qualifier", "pr_QualifierList", "pr_Identifier", "pr_SimpleQualifier", 
		"pr_SimpleIdentifier", "pr_GrammarBlock1", "pr_RuleBlock1", "pr_RuleBlock2", 
		"pr_BlockBlock1", "pr_BlockBlock2", "pr_BlockInlineBlock1", "pr_AlternativeBlock1", 
		"pr_AlternativeBlock2", "pr_ElementBlock1", "pr_RuleRefAlt3Block1", "pr_TokenBlock1", 
		"pr_TokenBlock2", "pr_FragmentBlock1", "pr_LBlockBlock1", "pr_SingleExpressionBlock1", 
		"pr_ArrayExpressionBlock1", "pr_AnnotationArgumentsBlock1", "pr_AnnotationArgumentBlock1", 
		"pr_QualifierBlock1", "pr_QualifierListBlock1", "pr_SimpleQualifierBlock1", 
		"pr_AlternativeBlock1Block1", "pr_TokenBlock1Alt1Block1", "pr_ArrayExpressionBlock1Block1"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, "'namespace'", "';'", "'using'", "'language'", "'returns'", 
		"':'", "'|'", "'block'", "'('", "')'", "'alt'", "'=>'", "'#'", "'#{'", 
		"'}'", "'eof'", "'token'", "'hidden'", "'fragment'", "'~'", "'.'", "'..'", 
		"'null'", "'true'", "'false'", "'{'", "'['", "']'", "'='", "'?='", "'!='", 
		"'+='", "'?'", "'*'", "'+'", "'??'", "'*?'", "'+?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_Utf8Bom", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", 
		"LR_KLanguage", "LR_KReturns", "LR_TColon", "LR_TBar", "LR_KBlock", "LR_TLParen", 
		"LR_TRParen", "LR_KAlt", "LR_TEqGt", "LR_THash", "LR_THashLBrace", "LR_TRBrace", 
		"LR_KEof", "LR_KToken", "LR_KHidden", "LR_KFragment", "LR_TTilde", "LR_TDot", 
		"LR_TDotDot", "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TLBrace", "LR_TLBracket", 
		"LR_TRBracket", "LR_TEq", "LR_TQuestionEq", "LR_TExclEq", "LR_TPlusEq", 
		"LR_TQuestion", "LR_TAsterisk", "LR_TPlus", "LR_TQuestionQuestion", "LR_TAsteriskQuestion", 
		"LR_TPlusQuestion", "LR_TInteger", "LR_TDecimal", "LR_TPrimitiveType", 
		"LR_TIdentifier", "LR_TVerbatimIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken kNamespace;
		public Pr_QualifierContext nameAntlr1;
		public IToken tSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _usingAntlr1 = new List<Pr_UsingContext>();
		public Pr_DeclarationsContext declarationsAntlr1;
		public IToken eof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(CompilerParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationsContext pr_Declarations() {
			return GetRuleContext<Pr_DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CompilerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			_localctx.kNamespace = Match(LR_KNamespace);
			State = 103;
			_localctx.nameAntlr1 = pr_Qualifier();
			State = 104;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 105;
				_localctx._pr_Using = pr_Using();
				_localctx._usingAntlr1.Add(_localctx._pr_Using);
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 111;
			_localctx.declarationsAntlr1 = pr_Declarations();
			State = 112;
			_localctx.eof = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken kUsing;
		public Pr_QualifierContext namespacesAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(CompilerParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_localctx.kUsing = Match(LR_KUsing);
			State = 115;
			_localctx.namespacesAntlr1 = pr_Qualifier();
			State = 116;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_DeclarationsContext : ParserRuleContext {
		public Pr_LanguageDeclarationContext declarationsAntlr1;
		public Pr_RuleContext _pr_Rule;
		public IList<Pr_RuleContext> _declarations1Antlr1 = new List<Pr_RuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
			return GetRuleContext<Pr_LanguageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext[] pr_Rule() {
			return GetRuleContexts<Pr_RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext pr_Rule(int i) {
			return GetRuleContext<Pr_RuleContext>(i);
		}
		public Pr_DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_DeclarationsContext pr_Declarations() {
		Pr_DeclarationsContext _localctx = new Pr_DeclarationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_localctx.declarationsAntlr1 = pr_LanguageDeclaration();
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 61573188026368L) != 0)) {
				{
				{
				State = 119;
				_localctx._pr_Rule = pr_Rule();
				_localctx._declarations1Antlr1.Add(_localctx._pr_Rule);
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LanguageDeclarationContext : ParserRuleContext {
		public IToken kLanguage;
		public Pr_NameContext nameAntlr1;
		public IToken tSemicolon;
		public Pr_GrammarContext grammarAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KLanguage() { return GetToken(CompilerParser.LR_KLanguage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarContext pr_Grammar() {
			return GetRuleContext<Pr_GrammarContext>(0);
		}
		public Pr_LanguageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LanguageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LanguageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
		Pr_LanguageDeclarationContext _localctx = new Pr_LanguageDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_LanguageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			_localctx.kLanguage = Match(LR_KLanguage);
			State = 126;
			_localctx.nameAntlr1 = pr_Name();
			State = 127;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			State = 128;
			_localctx.grammarAntlr1 = pr_Grammar();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_GrammarContext : ParserRuleContext {
		public Pr_GrammarBlock1Context grammarBlock1Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarBlock1Context pr_GrammarBlock1() {
			return GetRuleContext<Pr_GrammarBlock1Context>(0);
		}
		public Pr_GrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Grammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Grammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_GrammarContext pr_Grammar() {
		Pr_GrammarContext _localctx = new Pr_GrammarContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_Grammar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			_localctx.grammarBlock1Antlr1 = pr_GrammarBlock1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_GrammarRuleContext : ParserRuleContext {
		public Pr_GrammarRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_GrammarRule; } }
	 
		public Pr_GrammarRuleContext() { }
		public virtual void CopyFrom(Pr_GrammarRuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_TokenContext : Pr_GrammarRuleContext {
		public Pr_LexerAnnotationContext _pr_LexerAnnotation;
		public IList<Pr_LexerAnnotationContext> _annotations1Antlr1 = new List<Pr_LexerAnnotationContext>();
		public Pr_TokenBlock1Context tokenBlock1Antlr1;
		public IToken tColon;
		public Pr_LAlternativeContext alternativesAntlr1;
		public Pr_TokenBlock2Context _pr_TokenBlock2;
		public IList<Pr_TokenBlock2Context> _tokenBlock2Antlr1 = new List<Pr_TokenBlock2Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TokenBlock1Context pr_TokenBlock1() {
			return GetRuleContext<Pr_TokenBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerAnnotationContext[] pr_LexerAnnotation() {
			return GetRuleContexts<Pr_LexerAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerAnnotationContext pr_LexerAnnotation(int i) {
			return GetRuleContext<Pr_LexerAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TokenBlock2Context[] pr_TokenBlock2() {
			return GetRuleContexts<Pr_TokenBlock2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TokenBlock2Context pr_TokenBlock2(int i) {
			return GetRuleContext<Pr_TokenBlock2Context>(i);
		}
		public Pr_TokenContext(Pr_GrammarRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Token(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_FragmentContext : Pr_GrammarRuleContext {
		public IToken kFragment;
		public Pr_NameContext nameAntlr1;
		public IToken tColon;
		public Pr_LAlternativeContext alternativesAntlr1;
		public Pr_FragmentBlock1Context _pr_FragmentBlock1;
		public IList<Pr_FragmentBlock1Context> _fragmentBlock1Antlr1 = new List<Pr_FragmentBlock1Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFragment() { return GetToken(CompilerParser.LR_KFragment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_FragmentBlock1Context[] pr_FragmentBlock1() {
			return GetRuleContexts<Pr_FragmentBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_FragmentBlock1Context pr_FragmentBlock1(int i) {
			return GetRuleContext<Pr_FragmentBlock1Context>(i);
		}
		public Pr_FragmentContext(Pr_GrammarRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Fragment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_BlockContext : Pr_GrammarRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _annotations1Antlr1 = new List<Pr_ParserAnnotationContext>();
		public IToken kBlock;
		public Pr_NameContext nameAntlr1;
		public Pr_BlockBlock1Context blockBlock1Antlr1;
		public IToken tColon;
		public Pr_AlternativeContext alternativesAntlr1;
		public Pr_BlockBlock2Context _pr_BlockBlock2;
		public IList<Pr_BlockBlock2Context> _blockBlock2Antlr1 = new List<Pr_BlockBlock2Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBlock() { return GetToken(CompilerParser.LR_KBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative() {
			return GetRuleContext<Pr_AlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BlockBlock1Context pr_BlockBlock1() {
			return GetRuleContext<Pr_BlockBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BlockBlock2Context[] pr_BlockBlock2() {
			return GetRuleContexts<Pr_BlockBlock2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BlockBlock2Context pr_BlockBlock2(int i) {
			return GetRuleContext<Pr_BlockBlock2Context>(i);
		}
		public Pr_BlockContext(Pr_GrammarRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Block(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_GrammarRuleAlt1Context : Pr_GrammarRuleContext {
		public Pr_RuleContext ruleAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext pr_Rule() {
			return GetRuleContext<Pr_RuleContext>(0);
		}
		public Pr_GrammarRuleAlt1Context(Pr_GrammarRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_GrammarRuleAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_GrammarRuleContext pr_GrammarRule() {
		Pr_GrammarRuleContext _localctx = new Pr_GrammarRuleContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_GrammarRule);
		int _la;
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new Pr_GrammarRuleAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				((Pr_GrammarRuleAlt1Context)_localctx).ruleAntlr1 = pr_Rule();
				}
				break;
			case 2:
				_localctx = new Pr_BlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TLBracket) {
					{
					{
					State = 133;
					((Pr_BlockContext)_localctx)._pr_ParserAnnotation = pr_ParserAnnotation();
					((Pr_BlockContext)_localctx)._annotations1Antlr1.Add(((Pr_BlockContext)_localctx)._pr_ParserAnnotation);
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 139;
				((Pr_BlockContext)_localctx).kBlock = Match(LR_KBlock);
				State = 140;
				((Pr_BlockContext)_localctx).nameAntlr1 = pr_Name();
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KReturns) {
					{
					State = 141;
					((Pr_BlockContext)_localctx).blockBlock1Antlr1 = pr_BlockBlock1();
					}
				}

				State = 144;
				((Pr_BlockContext)_localctx).tColon = Match(LR_TColon);
				State = 145;
				((Pr_BlockContext)_localctx).alternativesAntlr1 = pr_Alternative();
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 146;
					((Pr_BlockContext)_localctx)._pr_BlockBlock2 = pr_BlockBlock2();
					((Pr_BlockContext)_localctx)._blockBlock2Antlr1.Add(((Pr_BlockContext)_localctx)._pr_BlockBlock2);
					}
					}
					State = 151;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 152;
				((Pr_BlockContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			case 3:
				_localctx = new Pr_TokenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TLBracket) {
					{
					{
					State = 154;
					((Pr_TokenContext)_localctx)._pr_LexerAnnotation = pr_LexerAnnotation();
					((Pr_TokenContext)_localctx)._annotations1Antlr1.Add(((Pr_TokenContext)_localctx)._pr_LexerAnnotation);
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 160;
				((Pr_TokenContext)_localctx).tokenBlock1Antlr1 = pr_TokenBlock1();
				State = 161;
				((Pr_TokenContext)_localctx).tColon = Match(LR_TColon);
				State = 162;
				((Pr_TokenContext)_localctx).alternativesAntlr1 = pr_LAlternative();
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 163;
					((Pr_TokenContext)_localctx)._pr_TokenBlock2 = pr_TokenBlock2();
					((Pr_TokenContext)_localctx)._tokenBlock2Antlr1.Add(((Pr_TokenContext)_localctx)._pr_TokenBlock2);
					}
					}
					State = 168;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 169;
				((Pr_TokenContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			case 4:
				_localctx = new Pr_FragmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 171;
				((Pr_FragmentContext)_localctx).kFragment = Match(LR_KFragment);
				State = 172;
				((Pr_FragmentContext)_localctx).nameAntlr1 = pr_Name();
				State = 173;
				((Pr_FragmentContext)_localctx).tColon = Match(LR_TColon);
				State = 174;
				((Pr_FragmentContext)_localctx).alternativesAntlr1 = pr_LAlternative();
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 175;
					((Pr_FragmentContext)_localctx)._pr_FragmentBlock1 = pr_FragmentBlock1();
					((Pr_FragmentContext)_localctx)._fragmentBlock1Antlr1.Add(((Pr_FragmentContext)_localctx)._pr_FragmentBlock1);
					}
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 181;
				((Pr_FragmentContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleContext : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _annotations1Antlr1 = new List<Pr_ParserAnnotationContext>();
		public Pr_RuleBlock1Context ruleBlock1Antlr1;
		public IToken tColon;
		public Pr_AlternativeContext alternativesAntlr1;
		public Pr_RuleBlock2Context _pr_RuleBlock2;
		public IList<Pr_RuleBlock2Context> _ruleBlock2Antlr1 = new List<Pr_RuleBlock2Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleBlock1Context pr_RuleBlock1() {
			return GetRuleContext<Pr_RuleBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative() {
			return GetRuleContext<Pr_AlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleBlock2Context[] pr_RuleBlock2() {
			return GetRuleContexts<Pr_RuleBlock2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleBlock2Context pr_RuleBlock2(int i) {
			return GetRuleContext<Pr_RuleBlock2Context>(i);
		}
		public Pr_RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleContext pr_Rule() {
		Pr_RuleContext _localctx = new Pr_RuleContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_Rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 185;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._annotations1Antlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 191;
			_localctx.ruleBlock1Antlr1 = pr_RuleBlock1();
			State = 192;
			_localctx.tColon = Match(LR_TColon);
			State = 193;
			_localctx.alternativesAntlr1 = pr_Alternative();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TBar) {
				{
				{
				State = 194;
				_localctx._pr_RuleBlock2 = pr_RuleBlock2();
				_localctx._ruleBlock2Antlr1.Add(_localctx._pr_RuleBlock2);
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 200;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AlternativeContext : ParserRuleContext {
		public Pr_AlternativeBlock1Context alternativeBlock1Antlr1;
		public Pr_ElementContext _pr_Element;
		public IList<Pr_ElementContext> _elementsAntlr1 = new List<Pr_ElementContext>();
		public Pr_AlternativeBlock2Context alternativeBlock2Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeBlock1Context pr_AlternativeBlock1() {
			return GetRuleContext<Pr_AlternativeBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ElementContext[] pr_Element() {
			return GetRuleContexts<Pr_ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ElementContext pr_Element(int i) {
			return GetRuleContext<Pr_ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeBlock2Context pr_AlternativeBlock2() {
			return GetRuleContext<Pr_AlternativeBlock2Context>(0);
		}
		public Pr_AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Alternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Alternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AlternativeContext pr_Alternative() {
		Pr_AlternativeContext _localctx = new Pr_AlternativeContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_Alternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 202;
				_localctx.alternativeBlock1Antlr1 = pr_AlternativeBlock1();
				}
				break;
			}
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 205;
				_localctx._pr_Element = pr_Element();
				_localctx._elementsAntlr1.Add(_localctx._pr_Element);
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 123145839544320L) != 0) );
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TEqGt) {
				{
				State = 210;
				_localctx.alternativeBlock2Antlr1 = pr_AlternativeBlock2();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ElementContext : ParserRuleContext {
		public Pr_ElementBlock1Context elementBlock1Antlr1;
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _valueAnnotationsAntlr1 = new List<Pr_ParserAnnotationContext>();
		public Pr_ElementValueContext valueAntlr1;
		public IToken tQuestion;
		public IToken tAsterisk;
		public IToken tPlus;
		public IToken tQuestionQuestion;
		public IToken tAsteriskQuestion;
		public IToken tPlusQuestion;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ElementValueContext pr_ElementValue() {
			return GetRuleContext<Pr_ElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ElementBlock1Context pr_ElementBlock1() {
			return GetRuleContext<Pr_ElementBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(CompilerParser.LR_TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsterisk() { return GetToken(CompilerParser.LR_TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlus() { return GetToken(CompilerParser.LR_TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionQuestion() { return GetToken(CompilerParser.LR_TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsteriskQuestion() { return GetToken(CompilerParser.LR_TAsteriskQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusQuestion() { return GetToken(CompilerParser.LR_TPlusQuestion, 0); }
		public Pr_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ElementContext pr_Element() {
		Pr_ElementContext _localctx = new Pr_ElementContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 213;
				_localctx.elementBlock1Antlr1 = pr_ElementBlock1();
				}
				break;
			}
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 216;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._valueAnnotationsAntlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 222;
			_localctx.valueAntlr1 = pr_ElementValue();
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TQuestion:
				{
				State = 223;
				_localctx.tQuestion = Match(LR_TQuestion);
				}
				break;
			case LR_TAsterisk:
				{
				State = 224;
				_localctx.tAsterisk = Match(LR_TAsterisk);
				}
				break;
			case LR_TPlus:
				{
				State = 225;
				_localctx.tPlus = Match(LR_TPlus);
				}
				break;
			case LR_TQuestionQuestion:
				{
				State = 226;
				_localctx.tQuestionQuestion = Match(LR_TQuestionQuestion);
				}
				break;
			case LR_TAsteriskQuestion:
				{
				State = 227;
				_localctx.tAsteriskQuestion = Match(LR_TAsteriskQuestion);
				}
				break;
			case LR_TPlusQuestion:
				{
				State = 228;
				_localctx.tPlusQuestion = Match(LR_TPlusQuestion);
				}
				break;
			case LR_TSemicolon:
			case LR_TBar:
			case LR_TLParen:
			case LR_TRParen:
			case LR_TEqGt:
			case LR_THash:
			case LR_THashLBrace:
			case LR_KEof:
			case LR_TLBracket:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
			case LR_TString:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ElementValueContext : ParserRuleContext {
		public Pr_ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ElementValue; } }
	 
		public Pr_ElementValueContext() { }
		public virtual void CopyFrom(Pr_ElementValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_BlockInlineContext : Pr_ElementValueContext {
		public IToken tLParen;
		public Pr_AlternativeContext alternativesAntlr1;
		public Pr_BlockInlineBlock1Context _pr_BlockInlineBlock1;
		public IList<Pr_BlockInlineBlock1Context> _blockInlineBlock1Antlr1 = new List<Pr_BlockInlineBlock1Context>();
		public IToken tRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative() {
			return GetRuleContext<Pr_AlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BlockInlineBlock1Context[] pr_BlockInlineBlock1() {
			return GetRuleContexts<Pr_BlockInlineBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BlockInlineBlock1Context pr_BlockInlineBlock1(int i) {
			return GetRuleContext<Pr_BlockInlineBlock1Context>(i);
		}
		public Pr_BlockInlineContext(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockInline(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_KeywordContext : Pr_ElementValueContext {
		public IToken textAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_KeywordContext(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Keyword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_RuleRefAlt2Context : Pr_ElementValueContext {
		public IToken tHash;
		public Pr_ReturnTypeQualifierContext referencedTypesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_THash() { return GetToken(CompilerParser.LR_THash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_RuleRefAlt2Context(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleRefAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_RuleRefAlt1Context : Pr_ElementValueContext {
		public Pr_IdentifierContext grammarRuleAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_RuleRefAlt1Context(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleRefAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_Eof1Context : Pr_ElementValueContext {
		public IToken kEof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KEof() { return GetToken(CompilerParser.LR_KEof, 0); }
		public Pr_Eof1Context(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Eof1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_RuleRefAlt3Context : Pr_ElementValueContext {
		public IToken tHashLBrace;
		public Pr_ReturnTypeQualifierContext referencedTypesAntlr1;
		public Pr_RuleRefAlt3Block1Context _pr_RuleRefAlt3Block1;
		public IList<Pr_RuleRefAlt3Block1Context> _ruleRefAlt3Block1Antlr1 = new List<Pr_RuleRefAlt3Block1Context>();
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_THashLBrace() { return GetToken(CompilerParser.LR_THashLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(CompilerParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleRefAlt3Block1Context[] pr_RuleRefAlt3Block1() {
			return GetRuleContexts<Pr_RuleRefAlt3Block1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleRefAlt3Block1Context pr_RuleRefAlt3Block1(int i) {
			return GetRuleContext<Pr_RuleRefAlt3Block1Context>(i);
		}
		public Pr_RuleRefAlt3Context(Pr_ElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleRefAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ElementValueContext pr_ElementValue() {
		Pr_ElementValueContext _localctx = new Pr_ElementValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_ElementValue);
		int _la;
		try {
			State = 256;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TLParen:
				_localctx = new Pr_BlockInlineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				((Pr_BlockInlineContext)_localctx).tLParen = Match(LR_TLParen);
				State = 232;
				((Pr_BlockInlineContext)_localctx).alternativesAntlr1 = pr_Alternative();
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 233;
					((Pr_BlockInlineContext)_localctx)._pr_BlockInlineBlock1 = pr_BlockInlineBlock1();
					((Pr_BlockInlineContext)_localctx)._blockInlineBlock1Antlr1.Add(((Pr_BlockInlineContext)_localctx)._pr_BlockInlineBlock1);
					}
					}
					State = 238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 239;
				((Pr_BlockInlineContext)_localctx).tRParen = Match(LR_TRParen);
				}
				break;
			case LR_KEof:
				_localctx = new Pr_Eof1Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 241;
				((Pr_Eof1Context)_localctx).kEof = Match(LR_KEof);
				}
				break;
			case LR_TString:
				_localctx = new Pr_KeywordContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 242;
				((Pr_KeywordContext)_localctx).textAntlr1 = Match(LR_TString);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_RuleRefAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 243;
				((Pr_RuleRefAlt1Context)_localctx).grammarRuleAntlr1 = pr_Identifier();
				}
				break;
			case LR_THash:
				_localctx = new Pr_RuleRefAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 244;
				((Pr_RuleRefAlt2Context)_localctx).tHash = Match(LR_THash);
				State = 245;
				((Pr_RuleRefAlt2Context)_localctx).referencedTypesAntlr1 = pr_ReturnTypeQualifier();
				}
				break;
			case LR_THashLBrace:
				_localctx = new Pr_RuleRefAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 246;
				((Pr_RuleRefAlt3Context)_localctx).tHashLBrace = Match(LR_THashLBrace);
				State = 247;
				((Pr_RuleRefAlt3Context)_localctx).referencedTypesAntlr1 = pr_ReturnTypeQualifier();
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 248;
					((Pr_RuleRefAlt3Context)_localctx)._pr_RuleRefAlt3Block1 = pr_RuleRefAlt3Block1();
					((Pr_RuleRefAlt3Context)_localctx)._ruleRefAlt3Block1Antlr1.Add(((Pr_RuleRefAlt3Context)_localctx)._pr_RuleRefAlt3Block1);
					}
					}
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 254;
				((Pr_RuleRefAlt3Context)_localctx).tRBrace = Match(LR_TRBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LAlternativeContext : ParserRuleContext {
		public Pr_LElementContext _pr_LElement;
		public IList<Pr_LElementContext> _elementsAntlr1 = new List<Pr_LElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementContext[] pr_LElement() {
			return GetRuleContexts<Pr_LElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementContext pr_LElement(int i) {
			return GetRuleContext<Pr_LElementContext>(i);
		}
		public Pr_LAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LAlternativeContext pr_LAlternative() {
		Pr_LAlternativeContext _localctx = new Pr_LAlternativeContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_LAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145314895872L) != 0)) {
				{
				{
				State = 258;
				_localctx._pr_LElement = pr_LElement();
				_localctx._elementsAntlr1.Add(_localctx._pr_LElement);
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LElementContext : ParserRuleContext {
		public IToken isNegated;
		public Pr_LElementValueContext valueAntlr1;
		public IToken tQuestion;
		public IToken tAsterisk;
		public IToken tPlus;
		public IToken tQuestionQuestion;
		public IToken tAsteriskQuestion;
		public IToken tPlusQuestion;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementValueContext pr_LElementValue() {
			return GetRuleContext<Pr_LElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TTilde() { return GetToken(CompilerParser.LR_TTilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(CompilerParser.LR_TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsterisk() { return GetToken(CompilerParser.LR_TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlus() { return GetToken(CompilerParser.LR_TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionQuestion() { return GetToken(CompilerParser.LR_TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsteriskQuestion() { return GetToken(CompilerParser.LR_TAsteriskQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusQuestion() { return GetToken(CompilerParser.LR_TPlusQuestion, 0); }
		public Pr_LElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LElementContext pr_LElement() {
		Pr_LElementContext _localctx = new Pr_LElementContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_LElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TTilde) {
				{
				State = 264;
				_localctx.isNegated = Match(LR_TTilde);
				}
			}

			State = 267;
			_localctx.valueAntlr1 = pr_LElementValue();
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TQuestion:
				{
				State = 268;
				_localctx.tQuestion = Match(LR_TQuestion);
				}
				break;
			case LR_TAsterisk:
				{
				State = 269;
				_localctx.tAsterisk = Match(LR_TAsterisk);
				}
				break;
			case LR_TPlus:
				{
				State = 270;
				_localctx.tPlus = Match(LR_TPlus);
				}
				break;
			case LR_TQuestionQuestion:
				{
				State = 271;
				_localctx.tQuestionQuestion = Match(LR_TQuestionQuestion);
				}
				break;
			case LR_TAsteriskQuestion:
				{
				State = 272;
				_localctx.tAsteriskQuestion = Match(LR_TAsteriskQuestion);
				}
				break;
			case LR_TPlusQuestion:
				{
				State = 273;
				_localctx.tPlusQuestion = Match(LR_TPlusQuestion);
				}
				break;
			case LR_TSemicolon:
			case LR_TBar:
			case LR_TLParen:
			case LR_TRParen:
			case LR_TTilde:
			case LR_TDot:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
			case LR_TString:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LElementValueContext : ParserRuleContext {
		public Pr_LElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LElementValue; } }
	 
		public Pr_LElementValueContext() { }
		public virtual void CopyFrom(Pr_LElementValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_LBlockContext : Pr_LElementValueContext {
		public IToken tLParen;
		public Pr_LAlternativeContext alternativesAntlr1;
		public Pr_LBlockBlock1Context _pr_LBlockBlock1;
		public IList<Pr_LBlockBlock1Context> _lBlockBlock1Antlr1 = new List<Pr_LBlockBlock1Context>();
		public IToken tRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LBlockBlock1Context[] pr_LBlockBlock1() {
			return GetRuleContexts<Pr_LBlockBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LBlockBlock1Context pr_LBlockBlock1(int i) {
			return GetRuleContext<Pr_LBlockBlock1Context>(i);
		}
		public Pr_LBlockContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LRangeContext : Pr_LElementValueContext {
		public IToken StartCharAntlr1;
		public IToken tDotDot;
		public IToken EndCharAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TString() { return GetTokens(CompilerParser.LR_TString); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString(int i) {
			return GetToken(CompilerParser.LR_TString, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDotDot() { return GetToken(CompilerParser.LR_TDotDot, 0); }
		public Pr_LRangeContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LFixedContext : Pr_LElementValueContext {
		public IToken textAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_LFixedContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LFixed(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LWildCardContext : Pr_LElementValueContext {
		public IToken tDot;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		public Pr_LWildCardContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LWildCard(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LReferenceContext : Pr_LElementValueContext {
		public Pr_IdentifierContext ruleAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_LReferenceContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LElementValueContext pr_LElementValue() {
		Pr_LElementValueContext _localctx = new Pr_LElementValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_LElementValue);
		int _la;
		try {
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new Pr_LBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 276;
				((Pr_LBlockContext)_localctx).tLParen = Match(LR_TLParen);
				State = 277;
				((Pr_LBlockContext)_localctx).alternativesAntlr1 = pr_LAlternative();
				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 278;
					((Pr_LBlockContext)_localctx)._pr_LBlockBlock1 = pr_LBlockBlock1();
					((Pr_LBlockContext)_localctx)._lBlockBlock1Antlr1.Add(((Pr_LBlockContext)_localctx)._pr_LBlockBlock1);
					}
					}
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 284;
				((Pr_LBlockContext)_localctx).tRParen = Match(LR_TRParen);
				}
				break;
			case 2:
				_localctx = new Pr_LFixedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 286;
				((Pr_LFixedContext)_localctx).textAntlr1 = Match(LR_TString);
				}
				break;
			case 3:
				_localctx = new Pr_LWildCardContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 287;
				((Pr_LWildCardContext)_localctx).tDot = Match(LR_TDot);
				}
				break;
			case 4:
				_localctx = new Pr_LRangeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 288;
				((Pr_LRangeContext)_localctx).StartCharAntlr1 = Match(LR_TString);
				State = 289;
				((Pr_LRangeContext)_localctx).tDotDot = Match(LR_TDotDot);
				State = 290;
				((Pr_LRangeContext)_localctx).EndCharAntlr1 = Match(LR_TString);
				}
				break;
			case 5:
				_localctx = new Pr_LReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 291;
				((Pr_LReferenceContext)_localctx).ruleAntlr1 = pr_Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ExpressionContext : ParserRuleContext {
		public Pr_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Expression; } }
	 
		public Pr_ExpressionContext() { }
		public virtual void CopyFrom(Pr_ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ExpressionAlt1Context : Pr_ExpressionContext {
		public Pr_SingleExpressionContext singleExpressionAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleExpressionContext pr_SingleExpression() {
			return GetRuleContext<Pr_SingleExpressionContext>(0);
		}
		public Pr_ExpressionAlt1Context(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ExpressionAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ArrayExpressionContext : Pr_ExpressionContext {
		public IToken tLBrace;
		public Pr_ArrayExpressionBlock1Context arrayExpressionBlock1Antlr1;
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(CompilerParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(CompilerParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayExpressionBlock1Context pr_ArrayExpressionBlock1() {
			return GetRuleContext<Pr_ArrayExpressionBlock1Context>(0);
		}
		public Pr_ArrayExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ExpressionContext pr_Expression() {
		Pr_ExpressionContext _localctx = new Pr_ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_Expression);
		int _la;
		try {
			State = 300;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KNull:
			case LR_KTrue:
			case LR_KFalse:
			case LR_TInteger:
			case LR_TIdentifier:
			case LR_TString:
				_localctx = new Pr_ExpressionAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 294;
				((Pr_ExpressionAlt1Context)_localctx).singleExpressionAntlr1 = pr_SingleExpression();
				}
				break;
			case LR_TLBrace:
				_localctx = new Pr_ArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 295;
				((Pr_ArrayExpressionContext)_localctx).tLBrace = Match(LR_TLBrace);
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 90160188358656L) != 0)) {
					{
					State = 296;
					((Pr_ArrayExpressionContext)_localctx).arrayExpressionBlock1Antlr1 = pr_ArrayExpressionBlock1();
					}
				}

				State = 299;
				((Pr_ArrayExpressionContext)_localctx).tRBrace = Match(LR_TRBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SingleExpressionContext : ParserRuleContext {
		public Pr_SingleExpressionBlock1Context valueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleExpressionBlock1Context pr_SingleExpressionBlock1() {
			return GetRuleContext<Pr_SingleExpressionBlock1Context>(0);
		}
		public Pr_SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SingleExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SingleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SingleExpressionContext pr_SingleExpression() {
		Pr_SingleExpressionContext _localctx = new Pr_SingleExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_pr_SingleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_localctx.valueAntlr1 = pr_SingleExpressionBlock1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserAnnotationContext : ParserRuleContext {
		public IToken tLBracket;
		public Pr_QualifierContext attributeClassAntlr1;
		public Pr_AnnotationArgumentsContext annotationArgumentsAntlr1;
		public IToken tRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(CompilerParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(CompilerParser.LR_TRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
			return GetRuleContext<Pr_AnnotationArgumentsContext>(0);
		}
		public Pr_ParserAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserAnnotationContext pr_ParserAnnotation() {
		Pr_ParserAnnotationContext _localctx = new Pr_ParserAnnotationContext(Context, State);
		EnterRule(_localctx, 30, RULE_pr_ParserAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_localctx.tLBracket = Match(LR_TLBracket);
			State = 305;
			_localctx.attributeClassAntlr1 = pr_Qualifier();
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLParen) {
				{
				State = 306;
				_localctx.annotationArgumentsAntlr1 = pr_AnnotationArguments();
				}
			}

			State = 309;
			_localctx.tRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerAnnotationContext : ParserRuleContext {
		public IToken tLBracket;
		public Pr_QualifierContext attributeClassAntlr1;
		public Pr_AnnotationArgumentsContext annotationArgumentsAntlr1;
		public IToken tRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(CompilerParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(CompilerParser.LR_TRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
			return GetRuleContext<Pr_AnnotationArgumentsContext>(0);
		}
		public Pr_LexerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerAnnotationContext pr_LexerAnnotation() {
		Pr_LexerAnnotationContext _localctx = new Pr_LexerAnnotationContext(Context, State);
		EnterRule(_localctx, 32, RULE_pr_LexerAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_localctx.tLBracket = Match(LR_TLBracket);
			State = 312;
			_localctx.attributeClassAntlr1 = pr_Qualifier();
			State = 314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLParen) {
				{
				State = 313;
				_localctx.annotationArgumentsAntlr1 = pr_AnnotationArguments();
				}
			}

			State = 316;
			_localctx.tRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentsContext : ParserRuleContext {
		public IToken tLParen;
		public Pr_AnnotationArgumentContext argumentsAntlr1;
		public Pr_AnnotationArgumentsBlock1Context _pr_AnnotationArgumentsBlock1;
		public IList<Pr_AnnotationArgumentsBlock1Context> _annotationArgumentsBlock1Antlr1 = new List<Pr_AnnotationArgumentsBlock1Context>();
		public IToken tRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
			return GetRuleContext<Pr_AnnotationArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsBlock1Context[] pr_AnnotationArgumentsBlock1() {
			return GetRuleContexts<Pr_AnnotationArgumentsBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsBlock1Context pr_AnnotationArgumentsBlock1(int i) {
			return GetRuleContext<Pr_AnnotationArgumentsBlock1Context>(i);
		}
		public Pr_AnnotationArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
		Pr_AnnotationArgumentsContext _localctx = new Pr_AnnotationArgumentsContext(Context, State);
		EnterRule(_localctx, 34, RULE_pr_AnnotationArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			_localctx.tLParen = Match(LR_TLParen);
			State = 319;
			_localctx.argumentsAntlr1 = pr_AnnotationArgument();
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 320;
				_localctx._pr_AnnotationArgumentsBlock1 = pr_AnnotationArgumentsBlock1();
				_localctx._annotationArgumentsBlock1Antlr1.Add(_localctx._pr_AnnotationArgumentsBlock1);
				}
				}
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 326;
			_localctx.tRParen = Match(LR_TRParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentContext : ParserRuleContext {
		public Pr_AnnotationArgumentBlock1Context annotationArgumentBlock1Antlr1;
		public Pr_ExpressionContext valueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentBlock1Context pr_AnnotationArgumentBlock1() {
			return GetRuleContext<Pr_AnnotationArgumentBlock1Context>(0);
		}
		public Pr_AnnotationArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
		Pr_AnnotationArgumentContext _localctx = new Pr_AnnotationArgumentContext(Context, State);
		EnterRule(_localctx, 36, RULE_pr_AnnotationArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 328;
				_localctx.annotationArgumentBlock1Antlr1 = pr_AnnotationArgumentBlock1();
				}
				break;
			}
			State = 331;
			_localctx.valueAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ReturnTypeIdentifierContext : ParserRuleContext {
		public Pr_ReturnTypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ReturnTypeIdentifier; } }
	 
		public Pr_ReturnTypeIdentifierContext() { }
		public virtual void CopyFrom(Pr_ReturnTypeIdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ReturnTypeIdentifierAlt1Context : Pr_ReturnTypeIdentifierContext {
		public IToken tPrimitiveTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPrimitiveType() { return GetToken(CompilerParser.LR_TPrimitiveType, 0); }
		public Pr_ReturnTypeIdentifierAlt1Context(Pr_ReturnTypeIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeIdentifierAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ReturnTypeIdentifierAlt2Context : Pr_ReturnTypeIdentifierContext {
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_ReturnTypeIdentifierAlt2Context(Pr_ReturnTypeIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeIdentifierAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ReturnTypeIdentifierContext pr_ReturnTypeIdentifier() {
		Pr_ReturnTypeIdentifierContext _localctx = new Pr_ReturnTypeIdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_pr_ReturnTypeIdentifier);
		try {
			State = 335;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TPrimitiveType:
				_localctx = new Pr_ReturnTypeIdentifierAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				((Pr_ReturnTypeIdentifierAlt1Context)_localctx).tPrimitiveTypeAntlr1 = Match(LR_TPrimitiveType);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ReturnTypeIdentifierAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 334;
				((Pr_ReturnTypeIdentifierAlt2Context)_localctx).identifierAntlr1 = pr_Identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ReturnTypeQualifierContext : ParserRuleContext {
		public Pr_ReturnTypeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ReturnTypeQualifier; } }
	 
		public Pr_ReturnTypeQualifierContext() { }
		public virtual void CopyFrom(Pr_ReturnTypeQualifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ReturnTypeQualifierAlt1Context : Pr_ReturnTypeQualifierContext {
		public IToken tPrimitiveTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPrimitiveType() { return GetToken(CompilerParser.LR_TPrimitiveType, 0); }
		public Pr_ReturnTypeQualifierAlt1Context(Pr_ReturnTypeQualifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeQualifierAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ReturnTypeQualifierAlt2Context : Pr_ReturnTypeQualifierContext {
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ReturnTypeQualifierAlt2Context(Pr_ReturnTypeQualifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeQualifierAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
		Pr_ReturnTypeQualifierContext _localctx = new Pr_ReturnTypeQualifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_pr_ReturnTypeQualifier);
		try {
			State = 339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TPrimitiveType:
				_localctx = new Pr_ReturnTypeQualifierAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 337;
				((Pr_ReturnTypeQualifierAlt1Context)_localctx).tPrimitiveTypeAntlr1 = Match(LR_TPrimitiveType);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ReturnTypeQualifierAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 338;
				((Pr_ReturnTypeQualifierAlt2Context)_localctx).qualifierAntlr1 = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 42, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 341;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		public Pr_QualifierBlock1Context _pr_QualifierBlock1;
		public IList<Pr_QualifierBlock1Context> _qualifierBlock1Antlr1 = new List<Pr_QualifierBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context[] pr_QualifierBlock1() {
			return GetRuleContexts<Pr_QualifierBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context pr_QualifierBlock1(int i) {
			return GetRuleContext<Pr_QualifierBlock1Context>(i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_pr_Qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			_localctx.identifierAntlr1 = pr_Identifier();
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TDot) {
				{
				{
				State = 344;
				_localctx._pr_QualifierBlock1 = pr_QualifierBlock1();
				_localctx._qualifierBlock1Antlr1.Add(_localctx._pr_QualifierBlock1);
				}
				}
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListContext : ParserRuleContext {
		public Pr_QualifierContext qualifierAntlr1;
		public Pr_QualifierListBlock1Context _pr_QualifierListBlock1;
		public IList<Pr_QualifierListBlock1Context> _qualifierListBlock1Antlr1 = new List<Pr_QualifierListBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context[] pr_QualifierListBlock1() {
			return GetRuleContexts<Pr_QualifierListBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context pr_QualifierListBlock1(int i) {
			return GetRuleContext<Pr_QualifierListBlock1Context>(i);
		}
		public Pr_QualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListContext pr_QualifierList() {
		Pr_QualifierListContext _localctx = new Pr_QualifierListContext(Context, State);
		EnterRule(_localctx, 46, RULE_pr_QualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 351;
				_localctx._pr_QualifierListBlock1 = pr_QualifierListBlock1();
				_localctx._qualifierListBlock1Antlr1.Add(_localctx._pr_QualifierListBlock1);
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
	 
		public Pr_IdentifierContext() { }
		public virtual void CopyFrom(Pr_IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_IdentifierAlt1Context : Pr_IdentifierContext {
		public IToken tIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(CompilerParser.LR_TIdentifier, 0); }
		public Pr_IdentifierAlt1Context(Pr_IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IdentifierAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_IdentifierAlt2Context : Pr_IdentifierContext {
		public IToken tVerbatimIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TVerbatimIdentifier() { return GetToken(CompilerParser.LR_TVerbatimIdentifier, 0); }
		public Pr_IdentifierAlt2Context(Pr_IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IdentifierAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_pr_Identifier);
		try {
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TIdentifier:
				_localctx = new Pr_IdentifierAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 357;
				((Pr_IdentifierAlt1Context)_localctx).tIdentifierAntlr1 = Match(LR_TIdentifier);
				}
				break;
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_IdentifierAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 358;
				((Pr_IdentifierAlt2Context)_localctx).tVerbatimIdentifierAntlr1 = Match(LR_TVerbatimIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SimpleQualifierContext : ParserRuleContext {
		public Pr_SimpleIdentifierContext simpleIdentifierAntlr1;
		public Pr_SimpleQualifierBlock1Context _pr_SimpleQualifierBlock1;
		public IList<Pr_SimpleQualifierBlock1Context> _simpleQualifierBlock1Antlr1 = new List<Pr_SimpleQualifierBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleIdentifierContext pr_SimpleIdentifier() {
			return GetRuleContext<Pr_SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleQualifierBlock1Context[] pr_SimpleQualifierBlock1() {
			return GetRuleContexts<Pr_SimpleQualifierBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleQualifierBlock1Context pr_SimpleQualifierBlock1(int i) {
			return GetRuleContext<Pr_SimpleQualifierBlock1Context>(i);
		}
		public Pr_SimpleQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SimpleQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleQualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SimpleQualifierContext pr_SimpleQualifier() {
		Pr_SimpleQualifierContext _localctx = new Pr_SimpleQualifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_pr_SimpleQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			_localctx.simpleIdentifierAntlr1 = pr_SimpleIdentifier();
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TDot) {
				{
				{
				State = 362;
				_localctx._pr_SimpleQualifierBlock1 = pr_SimpleQualifierBlock1();
				_localctx._simpleQualifierBlock1Antlr1.Add(_localctx._pr_SimpleQualifierBlock1);
				}
				}
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SimpleIdentifierContext : ParserRuleContext {
		public IToken tIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(CompilerParser.LR_TIdentifier, 0); }
		public Pr_SimpleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SimpleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SimpleIdentifierContext pr_SimpleIdentifier() {
		Pr_SimpleIdentifierContext _localctx = new Pr_SimpleIdentifierContext(Context, State);
		EnterRule(_localctx, 52, RULE_pr_SimpleIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			_localctx.tIdentifierAntlr1 = Match(LR_TIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_GrammarBlock1Context : ParserRuleContext {
		public Pr_GrammarRuleContext _pr_GrammarRule;
		public IList<Pr_GrammarRuleContext> _grammarRulesAntlr1 = new List<Pr_GrammarRuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarRuleContext[] pr_GrammarRule() {
			return GetRuleContexts<Pr_GrammarRuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarRuleContext pr_GrammarRule(int i) {
			return GetRuleContext<Pr_GrammarRuleContext>(i);
		}
		public Pr_GrammarBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_GrammarBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_GrammarBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_GrammarBlock1Context pr_GrammarBlock1() {
		Pr_GrammarBlock1Context _localctx = new Pr_GrammarBlock1Context(Context, State);
		EnterRule(_localctx, 54, RULE_pr_GrammarBlock1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 373;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 370;
					_localctx._pr_GrammarRule = pr_GrammarRule();
					_localctx._grammarRulesAntlr1.Add(_localctx._pr_GrammarRule);
					}
					} 
				}
				State = 375;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,37,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleBlock1Context : ParserRuleContext {
		public Pr_RuleBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_RuleBlock1; } }
	 
		public Pr_RuleBlock1Context() { }
		public virtual void CopyFrom(Pr_RuleBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_RuleBlock1Alt1Context : Pr_RuleBlock1Context {
		public Pr_ReturnTypeIdentifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeIdentifierContext pr_ReturnTypeIdentifier() {
			return GetRuleContext<Pr_ReturnTypeIdentifierContext>(0);
		}
		public Pr_RuleBlock1Alt1Context(Pr_RuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_RuleBlock1Alt2Context : Pr_RuleBlock1Context {
		public Pr_IdentifierContext identifierAntlr1;
		public IToken kReturns;
		public Pr_ReturnTypeQualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_RuleBlock1Alt2Context(Pr_RuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleBlock1Context pr_RuleBlock1() {
		Pr_RuleBlock1Context _localctx = new Pr_RuleBlock1Context(Context, State);
		EnterRule(_localctx, 56, RULE_pr_RuleBlock1);
		try {
			State = 381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				_localctx = new Pr_RuleBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 376;
				((Pr_RuleBlock1Alt1Context)_localctx).returnTypeAntlr1 = pr_ReturnTypeIdentifier();
				}
				break;
			case 2:
				_localctx = new Pr_RuleBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 377;
				((Pr_RuleBlock1Alt2Context)_localctx).identifierAntlr1 = pr_Identifier();
				State = 378;
				((Pr_RuleBlock1Alt2Context)_localctx).kReturns = Match(LR_KReturns);
				State = 379;
				((Pr_RuleBlock1Alt2Context)_localctx).returnTypeAntlr1 = pr_ReturnTypeQualifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleBlock2Context : ParserRuleContext {
		public IToken tBar;
		public Pr_AlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative() {
			return GetRuleContext<Pr_AlternativeContext>(0);
		}
		public Pr_RuleBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_RuleBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleBlock2Context pr_RuleBlock2() {
		Pr_RuleBlock2Context _localctx = new Pr_RuleBlock2Context(Context, State);
		EnterRule(_localctx, 58, RULE_pr_RuleBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			_localctx.tBar = Match(LR_TBar);
			State = 384;
			_localctx.alternativesAntlr1 = pr_Alternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BlockBlock1Context : ParserRuleContext {
		public IToken kReturns;
		public Pr_ReturnTypeQualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_BlockBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BlockBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BlockBlock1Context pr_BlockBlock1() {
		Pr_BlockBlock1Context _localctx = new Pr_BlockBlock1Context(Context, State);
		EnterRule(_localctx, 60, RULE_pr_BlockBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_localctx.kReturns = Match(LR_KReturns);
			State = 387;
			_localctx.returnTypeAntlr1 = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BlockBlock2Context : ParserRuleContext {
		public IToken tBar;
		public Pr_AlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative() {
			return GetRuleContext<Pr_AlternativeContext>(0);
		}
		public Pr_BlockBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BlockBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BlockBlock2Context pr_BlockBlock2() {
		Pr_BlockBlock2Context _localctx = new Pr_BlockBlock2Context(Context, State);
		EnterRule(_localctx, 62, RULE_pr_BlockBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389;
			_localctx.tBar = Match(LR_TBar);
			State = 390;
			_localctx.alternativesAntlr1 = pr_Alternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BlockInlineBlock1Context : ParserRuleContext {
		public IToken tBar;
		public Pr_AlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeContext pr_Alternative() {
			return GetRuleContext<Pr_AlternativeContext>(0);
		}
		public Pr_BlockInlineBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BlockInlineBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BlockInlineBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BlockInlineBlock1Context pr_BlockInlineBlock1() {
		Pr_BlockInlineBlock1Context _localctx = new Pr_BlockInlineBlock1Context(Context, State);
		EnterRule(_localctx, 64, RULE_pr_BlockInlineBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_localctx.tBar = Match(LR_TBar);
			State = 393;
			_localctx.alternativesAntlr1 = pr_Alternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AlternativeBlock1Context : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _annotations1Antlr1 = new List<Pr_ParserAnnotationContext>();
		public IToken kAlt;
		public Pr_NameContext nameAntlr1;
		public Pr_AlternativeBlock1Block1Context alternativeBlock1Block1Antlr1;
		public IToken tColon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAlt() { return GetToken(CompilerParser.LR_KAlt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AlternativeBlock1Block1Context pr_AlternativeBlock1Block1() {
			return GetRuleContext<Pr_AlternativeBlock1Block1Context>(0);
		}
		public Pr_AlternativeBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AlternativeBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AlternativeBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AlternativeBlock1Context pr_AlternativeBlock1() {
		Pr_AlternativeBlock1Context _localctx = new Pr_AlternativeBlock1Context(Context, State);
		EnterRule(_localctx, 66, RULE_pr_AlternativeBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 395;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._annotations1Antlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 401;
			_localctx.kAlt = Match(LR_KAlt);
			State = 402;
			_localctx.nameAntlr1 = pr_Name();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KReturns) {
				{
				State = 403;
				_localctx.alternativeBlock1Block1Antlr1 = pr_AlternativeBlock1Block1();
				}
			}

			State = 406;
			_localctx.tColon = Match(LR_TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AlternativeBlock2Context : ParserRuleContext {
		public IToken tEqGt;
		public Pr_ExpressionContext returnValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEqGt() { return GetToken(CompilerParser.LR_TEqGt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		public Pr_AlternativeBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AlternativeBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AlternativeBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AlternativeBlock2Context pr_AlternativeBlock2() {
		Pr_AlternativeBlock2Context _localctx = new Pr_AlternativeBlock2Context(Context, State);
		EnterRule(_localctx, 68, RULE_pr_AlternativeBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408;
			_localctx.tEqGt = Match(LR_TEqGt);
			State = 409;
			_localctx.returnValueAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ElementBlock1Context : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _nameAnnotationsAntlr1 = new List<Pr_ParserAnnotationContext>();
		public Pr_IdentifierContext symbolPropertyAntlr1;
		public IToken tEq;
		public IToken tQuestionEq;
		public IToken tExclEq;
		public IToken tPlusEq;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEq() { return GetToken(CompilerParser.LR_TEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionEq() { return GetToken(CompilerParser.LR_TQuestionEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TExclEq() { return GetToken(CompilerParser.LR_TExclEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusEq() { return GetToken(CompilerParser.LR_TPlusEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		public Pr_ElementBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ElementBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ElementBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ElementBlock1Context pr_ElementBlock1() {
		Pr_ElementBlock1Context _localctx = new Pr_ElementBlock1Context(Context, State);
		EnterRule(_localctx, 70, RULE_pr_ElementBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 411;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._nameAnnotationsAntlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 416;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 417;
			_localctx.symbolPropertyAntlr1 = pr_Identifier();
			State = 422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TEq:
				{
				State = 418;
				_localctx.tEq = Match(LR_TEq);
				}
				break;
			case LR_TQuestionEq:
				{
				State = 419;
				_localctx.tQuestionEq = Match(LR_TQuestionEq);
				}
				break;
			case LR_TExclEq:
				{
				State = 420;
				_localctx.tExclEq = Match(LR_TExclEq);
				}
				break;
			case LR_TPlusEq:
				{
				State = 421;
				_localctx.tPlusEq = Match(LR_TPlusEq);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleRefAlt3Block1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_ReturnTypeQualifierContext referencedTypesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_RuleRefAlt3Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_RuleRefAlt3Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_RuleRefAlt3Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleRefAlt3Block1Context pr_RuleRefAlt3Block1() {
		Pr_RuleRefAlt3Block1Context _localctx = new Pr_RuleRefAlt3Block1Context(Context, State);
		EnterRule(_localctx, 72, RULE_pr_RuleRefAlt3Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424;
			_localctx.tComma = Match(LR_TComma);
			State = 425;
			_localctx.referencedTypesAntlr1 = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TokenBlock1Context : ParserRuleContext {
		public Pr_TokenBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TokenBlock1; } }
	 
		public Pr_TokenBlock1Context() { }
		public virtual void CopyFrom(Pr_TokenBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_TokenBlock1Alt1Context : Pr_TokenBlock1Context {
		public IToken kToken;
		public Pr_NameContext nameAntlr1;
		public Pr_TokenBlock1Alt1Block1Context tokenBlock1Alt1Block1Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KToken() { return GetToken(CompilerParser.LR_KToken, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TokenBlock1Alt1Block1Context pr_TokenBlock1Alt1Block1() {
			return GetRuleContext<Pr_TokenBlock1Alt1Block1Context>(0);
		}
		public Pr_TokenBlock1Alt1Context(Pr_TokenBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TokenBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_TokenBlock1Alt2Context : Pr_TokenBlock1Context {
		public IToken isTrivia1;
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KHidden() { return GetToken(CompilerParser.LR_KHidden, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_TokenBlock1Alt2Context(Pr_TokenBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TokenBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TokenBlock1Context pr_TokenBlock1() {
		Pr_TokenBlock1Context _localctx = new Pr_TokenBlock1Context(Context, State);
		EnterRule(_localctx, 74, RULE_pr_TokenBlock1);
		int _la;
		try {
			State = 434;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KToken:
				_localctx = new Pr_TokenBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 427;
				((Pr_TokenBlock1Alt1Context)_localctx).kToken = Match(LR_KToken);
				State = 428;
				((Pr_TokenBlock1Alt1Context)_localctx).nameAntlr1 = pr_Name();
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KReturns) {
					{
					State = 429;
					((Pr_TokenBlock1Alt1Context)_localctx).tokenBlock1Alt1Block1Antlr1 = pr_TokenBlock1Alt1Block1();
					}
				}

				}
				break;
			case LR_KHidden:
				_localctx = new Pr_TokenBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 432;
				((Pr_TokenBlock1Alt2Context)_localctx).isTrivia1 = Match(LR_KHidden);
				State = 433;
				((Pr_TokenBlock1Alt2Context)_localctx).nameAntlr1 = pr_Name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TokenBlock2Context : ParserRuleContext {
		public IToken tBar;
		public Pr_LAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_TokenBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TokenBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TokenBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TokenBlock2Context pr_TokenBlock2() {
		Pr_TokenBlock2Context _localctx = new Pr_TokenBlock2Context(Context, State);
		EnterRule(_localctx, 76, RULE_pr_TokenBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436;
			_localctx.tBar = Match(LR_TBar);
			State = 437;
			_localctx.alternativesAntlr1 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_FragmentBlock1Context : ParserRuleContext {
		public IToken tBar;
		public Pr_LAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_FragmentBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_FragmentBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_FragmentBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_FragmentBlock1Context pr_FragmentBlock1() {
		Pr_FragmentBlock1Context _localctx = new Pr_FragmentBlock1Context(Context, State);
		EnterRule(_localctx, 78, RULE_pr_FragmentBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_localctx.tBar = Match(LR_TBar);
			State = 440;
			_localctx.alternativesAntlr1 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LBlockBlock1Context : ParserRuleContext {
		public IToken tBar;
		public Pr_LAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_LBlockBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LBlockBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LBlockBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LBlockBlock1Context pr_LBlockBlock1() {
		Pr_LBlockBlock1Context _localctx = new Pr_LBlockBlock1Context(Context, State);
		EnterRule(_localctx, 80, RULE_pr_LBlockBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442;
			_localctx.tBar = Match(LR_TBar);
			State = 443;
			_localctx.alternativesAntlr1 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SingleExpressionBlock1Context : ParserRuleContext {
		public Pr_SingleExpressionBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SingleExpressionBlock1; } }
	 
		public Pr_SingleExpressionBlock1Context() { }
		public virtual void CopyFrom(Pr_SingleExpressionBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_SingleExpressionBlock1Alt5Context : Pr_SingleExpressionBlock1Context {
		public IToken tStringAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_SingleExpressionBlock1Alt5Context(Pr_SingleExpressionBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SingleExpressionBlock1Alt5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SingleExpressionBlock1Alt4Context : Pr_SingleExpressionBlock1Context {
		public IToken tIntegerAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TInteger() { return GetToken(CompilerParser.LR_TInteger, 0); }
		public Pr_SingleExpressionBlock1Alt4Context(Pr_SingleExpressionBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SingleExpressionBlock1Alt4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SingleExpressionBlock1TokensContext : Pr_SingleExpressionBlock1Context {
		public IToken kNull;
		public IToken kTrue;
		public IToken kFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNull() { return GetToken(CompilerParser.LR_KNull, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KTrue() { return GetToken(CompilerParser.LR_KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFalse() { return GetToken(CompilerParser.LR_KFalse, 0); }
		public Pr_SingleExpressionBlock1TokensContext(Pr_SingleExpressionBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SingleExpressionBlock1Tokens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SingleExpressionBlock1Alt6Context : Pr_SingleExpressionBlock1Context {
		public Pr_SimpleQualifierContext simpleQualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleQualifierContext pr_SimpleQualifier() {
			return GetRuleContext<Pr_SimpleQualifierContext>(0);
		}
		public Pr_SingleExpressionBlock1Alt6Context(Pr_SingleExpressionBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SingleExpressionBlock1Alt6(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SingleExpressionBlock1Context pr_SingleExpressionBlock1() {
		Pr_SingleExpressionBlock1Context _localctx = new Pr_SingleExpressionBlock1Context(Context, State);
		EnterRule(_localctx, 82, RULE_pr_SingleExpressionBlock1);
		try {
			State = 453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TInteger:
				_localctx = new Pr_SingleExpressionBlock1Alt4Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 445;
				((Pr_SingleExpressionBlock1Alt4Context)_localctx).tIntegerAntlr1 = Match(LR_TInteger);
				}
				break;
			case LR_TString:
				_localctx = new Pr_SingleExpressionBlock1Alt5Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 446;
				((Pr_SingleExpressionBlock1Alt5Context)_localctx).tStringAntlr1 = Match(LR_TString);
				}
				break;
			case LR_TIdentifier:
				_localctx = new Pr_SingleExpressionBlock1Alt6Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 447;
				((Pr_SingleExpressionBlock1Alt6Context)_localctx).simpleQualifierAntlr1 = pr_SimpleQualifier();
				}
				break;
			case LR_KNull:
			case LR_KTrue:
			case LR_KFalse:
				_localctx = new Pr_SingleExpressionBlock1TokensContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 451;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_KNull:
					{
					State = 448;
					((Pr_SingleExpressionBlock1TokensContext)_localctx).kNull = Match(LR_KNull);
					}
					break;
				case LR_KTrue:
					{
					State = 449;
					((Pr_SingleExpressionBlock1TokensContext)_localctx).kTrue = Match(LR_KTrue);
					}
					break;
				case LR_KFalse:
					{
					State = 450;
					((Pr_SingleExpressionBlock1TokensContext)_localctx).kFalse = Match(LR_KFalse);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ArrayExpressionBlock1Context : ParserRuleContext {
		public Pr_SingleExpressionContext itemsAntlr1;
		public Pr_ArrayExpressionBlock1Block1Context _pr_ArrayExpressionBlock1Block1;
		public IList<Pr_ArrayExpressionBlock1Block1Context> _arrayExpressionBlock1Block1Antlr1 = new List<Pr_ArrayExpressionBlock1Block1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleExpressionContext pr_SingleExpression() {
			return GetRuleContext<Pr_SingleExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayExpressionBlock1Block1Context[] pr_ArrayExpressionBlock1Block1() {
			return GetRuleContexts<Pr_ArrayExpressionBlock1Block1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayExpressionBlock1Block1Context pr_ArrayExpressionBlock1Block1(int i) {
			return GetRuleContext<Pr_ArrayExpressionBlock1Block1Context>(i);
		}
		public Pr_ArrayExpressionBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ArrayExpressionBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpressionBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ArrayExpressionBlock1Context pr_ArrayExpressionBlock1() {
		Pr_ArrayExpressionBlock1Context _localctx = new Pr_ArrayExpressionBlock1Context(Context, State);
		EnterRule(_localctx, 84, RULE_pr_ArrayExpressionBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455;
			_localctx.itemsAntlr1 = pr_SingleExpression();
			State = 459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 456;
				_localctx._pr_ArrayExpressionBlock1Block1 = pr_ArrayExpressionBlock1Block1();
				_localctx._arrayExpressionBlock1Block1Antlr1.Add(_localctx._pr_ArrayExpressionBlock1Block1);
				}
				}
				State = 461;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentsBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_AnnotationArgumentContext argumentsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
			return GetRuleContext<Pr_AnnotationArgumentContext>(0);
		}
		public Pr_AnnotationArgumentsBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgumentsBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgumentsBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentsBlock1Context pr_AnnotationArgumentsBlock1() {
		Pr_AnnotationArgumentsBlock1Context _localctx = new Pr_AnnotationArgumentsBlock1Context(Context, State);
		EnterRule(_localctx, 86, RULE_pr_AnnotationArgumentsBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462;
			_localctx.tComma = Match(LR_TComma);
			State = 463;
			_localctx.argumentsAntlr1 = pr_AnnotationArgument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentBlock1Context : ParserRuleContext {
		public Pr_IdentifierContext namedParameterAntlr1;
		public IToken tColon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		public Pr_AnnotationArgumentBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgumentBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgumentBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentBlock1Context pr_AnnotationArgumentBlock1() {
		Pr_AnnotationArgumentBlock1Context _localctx = new Pr_AnnotationArgumentBlock1Context(Context, State);
		EnterRule(_localctx, 88, RULE_pr_AnnotationArgumentBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465;
			_localctx.namedParameterAntlr1 = pr_Identifier();
			State = 466;
			_localctx.tColon = Match(LR_TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierBlock1Context : ParserRuleContext {
		public IToken tDot;
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierBlock1Context pr_QualifierBlock1() {
		Pr_QualifierBlock1Context _localctx = new Pr_QualifierBlock1Context(Context, State);
		EnterRule(_localctx, 90, RULE_pr_QualifierBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468;
			_localctx.tDot = Match(LR_TDot);
			State = 469;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_QualifierListBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierListBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierListBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListBlock1Context pr_QualifierListBlock1() {
		Pr_QualifierListBlock1Context _localctx = new Pr_QualifierListBlock1Context(Context, State);
		EnterRule(_localctx, 92, RULE_pr_QualifierListBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471;
			_localctx.tComma = Match(LR_TComma);
			State = 472;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SimpleQualifierBlock1Context : ParserRuleContext {
		public IToken tDot;
		public Pr_SimpleIdentifierContext simpleIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleIdentifierContext pr_SimpleIdentifier() {
			return GetRuleContext<Pr_SimpleIdentifierContext>(0);
		}
		public Pr_SimpleQualifierBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SimpleQualifierBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleQualifierBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SimpleQualifierBlock1Context pr_SimpleQualifierBlock1() {
		Pr_SimpleQualifierBlock1Context _localctx = new Pr_SimpleQualifierBlock1Context(Context, State);
		EnterRule(_localctx, 94, RULE_pr_SimpleQualifierBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			_localctx.tDot = Match(LR_TDot);
			State = 475;
			_localctx.simpleIdentifierAntlr1 = pr_SimpleIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AlternativeBlock1Block1Context : ParserRuleContext {
		public IToken kReturns;
		public Pr_ReturnTypeQualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_AlternativeBlock1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AlternativeBlock1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AlternativeBlock1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AlternativeBlock1Block1Context pr_AlternativeBlock1Block1() {
		Pr_AlternativeBlock1Block1Context _localctx = new Pr_AlternativeBlock1Block1Context(Context, State);
		EnterRule(_localctx, 96, RULE_pr_AlternativeBlock1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			_localctx.kReturns = Match(LR_KReturns);
			State = 478;
			_localctx.returnTypeAntlr1 = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TokenBlock1Alt1Block1Context : ParserRuleContext {
		public IToken kReturns;
		public Pr_ReturnTypeQualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_TokenBlock1Alt1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TokenBlock1Alt1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TokenBlock1Alt1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TokenBlock1Alt1Block1Context pr_TokenBlock1Alt1Block1() {
		Pr_TokenBlock1Alt1Block1Context _localctx = new Pr_TokenBlock1Alt1Block1Context(Context, State);
		EnterRule(_localctx, 98, RULE_pr_TokenBlock1Alt1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			_localctx.kReturns = Match(LR_KReturns);
			State = 481;
			_localctx.returnTypeAntlr1 = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ArrayExpressionBlock1Block1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_SingleExpressionContext itemsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SingleExpressionContext pr_SingleExpression() {
			return GetRuleContext<Pr_SingleExpressionContext>(0);
		}
		public Pr_ArrayExpressionBlock1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ArrayExpressionBlock1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpressionBlock1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ArrayExpressionBlock1Block1Context pr_ArrayExpressionBlock1Block1() {
		Pr_ArrayExpressionBlock1Block1Context _localctx = new Pr_ArrayExpressionBlock1Block1Context(Context, State);
		EnterRule(_localctx, 100, RULE_pr_ArrayExpressionBlock1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483;
			_localctx.tComma = Match(LR_TComma);
			State = 484;
			_localctx.itemsAntlr1 = pr_SingleExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,487,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,1,0,1,0,1,0,1,0,5,0,107,8,0,10,0,12,0,110,9,0,1,0,1,0,1,0,1,
		1,1,1,1,1,1,1,1,2,1,2,5,2,121,8,2,10,2,12,2,124,9,2,1,3,1,3,1,3,1,3,1,
		3,1,4,1,4,1,5,1,5,5,5,135,8,5,10,5,12,5,138,9,5,1,5,1,5,1,5,3,5,143,8,
		5,1,5,1,5,1,5,5,5,148,8,5,10,5,12,5,151,9,5,1,5,1,5,1,5,5,5,156,8,5,10,
		5,12,5,159,9,5,1,5,1,5,1,5,1,5,5,5,165,8,5,10,5,12,5,168,9,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,5,5,177,8,5,10,5,12,5,180,9,5,1,5,1,5,3,5,184,8,5,1,
		6,5,6,187,8,6,10,6,12,6,190,9,6,1,6,1,6,1,6,1,6,5,6,196,8,6,10,6,12,6,
		199,9,6,1,6,1,6,1,7,3,7,204,8,7,1,7,4,7,207,8,7,11,7,12,7,208,1,7,3,7,
		212,8,7,1,8,3,8,215,8,8,1,8,5,8,218,8,8,10,8,12,8,221,9,8,1,8,1,8,1,8,
		1,8,1,8,1,8,1,8,3,8,230,8,8,1,9,1,9,1,9,5,9,235,8,9,10,9,12,9,238,9,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,250,8,9,10,9,12,9,253,9,9,
		1,9,1,9,3,9,257,8,9,1,10,5,10,260,8,10,10,10,12,10,263,9,10,1,11,3,11,
		266,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,275,8,11,1,12,1,12,1,
		12,5,12,280,8,12,10,12,12,12,283,9,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,3,12,293,8,12,1,13,1,13,1,13,3,13,298,8,13,1,13,3,13,301,8,13,
		1,14,1,14,1,15,1,15,1,15,3,15,308,8,15,1,15,1,15,1,16,1,16,1,16,3,16,315,
		8,16,1,16,1,16,1,17,1,17,1,17,5,17,322,8,17,10,17,12,17,325,9,17,1,17,
		1,17,1,18,3,18,330,8,18,1,18,1,18,1,19,1,19,3,19,336,8,19,1,20,1,20,3,
		20,340,8,20,1,21,1,21,1,22,1,22,5,22,346,8,22,10,22,12,22,349,9,22,1,23,
		1,23,5,23,353,8,23,10,23,12,23,356,9,23,1,24,1,24,3,24,360,8,24,1,25,1,
		25,5,25,364,8,25,10,25,12,25,367,9,25,1,26,1,26,1,27,5,27,372,8,27,10,
		27,12,27,375,9,27,1,28,1,28,1,28,1,28,1,28,3,28,382,8,28,1,29,1,29,1,29,
		1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,5,33,397,8,33,10,33,
		12,33,400,9,33,1,33,1,33,1,33,3,33,405,8,33,1,33,1,33,1,34,1,34,1,34,1,
		35,5,35,413,8,35,10,35,12,35,416,9,35,1,35,1,35,1,35,1,35,1,35,3,35,423,
		8,35,1,36,1,36,1,36,1,37,1,37,1,37,3,37,431,8,37,1,37,1,37,3,37,435,8,
		37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,
		41,1,41,3,41,452,8,41,3,41,454,8,41,1,42,1,42,5,42,458,8,42,10,42,12,42,
		461,9,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,
		47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,0,0,51,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,0,0,507,0,102,1,0,0,0,2,114,1,0,0,0,4,118,1,0,0,0,6,125,1,0,0,0,
		8,130,1,0,0,0,10,183,1,0,0,0,12,188,1,0,0,0,14,203,1,0,0,0,16,214,1,0,
		0,0,18,256,1,0,0,0,20,261,1,0,0,0,22,265,1,0,0,0,24,292,1,0,0,0,26,300,
		1,0,0,0,28,302,1,0,0,0,30,304,1,0,0,0,32,311,1,0,0,0,34,318,1,0,0,0,36,
		329,1,0,0,0,38,335,1,0,0,0,40,339,1,0,0,0,42,341,1,0,0,0,44,343,1,0,0,
		0,46,350,1,0,0,0,48,359,1,0,0,0,50,361,1,0,0,0,52,368,1,0,0,0,54,373,1,
		0,0,0,56,381,1,0,0,0,58,383,1,0,0,0,60,386,1,0,0,0,62,389,1,0,0,0,64,392,
		1,0,0,0,66,398,1,0,0,0,68,408,1,0,0,0,70,414,1,0,0,0,72,424,1,0,0,0,74,
		434,1,0,0,0,76,436,1,0,0,0,78,439,1,0,0,0,80,442,1,0,0,0,82,453,1,0,0,
		0,84,455,1,0,0,0,86,462,1,0,0,0,88,465,1,0,0,0,90,468,1,0,0,0,92,471,1,
		0,0,0,94,474,1,0,0,0,96,477,1,0,0,0,98,480,1,0,0,0,100,483,1,0,0,0,102,
		103,5,3,0,0,103,104,3,44,22,0,104,108,5,4,0,0,105,107,3,2,1,0,106,105,
		1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,
		0,110,108,1,0,0,0,111,112,3,4,2,0,112,113,5,0,0,1,113,1,1,0,0,0,114,115,
		5,5,0,0,115,116,3,44,22,0,116,117,5,4,0,0,117,3,1,0,0,0,118,122,3,6,3,
		0,119,121,3,12,6,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,
		123,1,0,0,0,123,5,1,0,0,0,124,122,1,0,0,0,125,126,5,6,0,0,126,127,3,42,
		21,0,127,128,5,4,0,0,128,129,3,8,4,0,129,7,1,0,0,0,130,131,3,54,27,0,131,
		9,1,0,0,0,132,184,3,12,6,0,133,135,3,30,15,0,134,133,1,0,0,0,135,138,1,
		0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,139,1,0,0,0,138,136,1,0,0,0,
		139,140,5,10,0,0,140,142,3,42,21,0,141,143,3,60,30,0,142,141,1,0,0,0,142,
		143,1,0,0,0,143,144,1,0,0,0,144,145,5,8,0,0,145,149,3,14,7,0,146,148,3,
		62,31,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,
		0,150,152,1,0,0,0,151,149,1,0,0,0,152,153,5,4,0,0,153,184,1,0,0,0,154,
		156,3,32,16,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,158,
		1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,3,74,37,0,161,162,5,8,
		0,0,162,166,3,20,10,0,163,165,3,76,38,0,164,163,1,0,0,0,165,168,1,0,0,
		0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,
		170,5,4,0,0,170,184,1,0,0,0,171,172,5,21,0,0,172,173,3,42,21,0,173,174,
		5,8,0,0,174,178,3,20,10,0,175,177,3,78,39,0,176,175,1,0,0,0,177,180,1,
		0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,
		181,182,5,4,0,0,182,184,1,0,0,0,183,132,1,0,0,0,183,136,1,0,0,0,183,157,
		1,0,0,0,183,171,1,0,0,0,184,11,1,0,0,0,185,187,3,30,15,0,186,185,1,0,0,
		0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,
		188,1,0,0,0,191,192,3,56,28,0,192,193,5,8,0,0,193,197,3,14,7,0,194,196,
		3,58,29,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,
		0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,201,5,4,0,0,201,13,1,0,0,0,202,
		204,3,66,33,0,203,202,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,207,
		3,16,8,0,206,205,1,0,0,0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,
		0,209,211,1,0,0,0,210,212,3,68,34,0,211,210,1,0,0,0,211,212,1,0,0,0,212,
		15,1,0,0,0,213,215,3,70,35,0,214,213,1,0,0,0,214,215,1,0,0,0,215,219,1,
		0,0,0,216,218,3,30,15,0,217,216,1,0,0,0,218,221,1,0,0,0,219,217,1,0,0,
		0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,0,222,229,3,18,9,0,223,
		230,5,35,0,0,224,230,5,36,0,0,225,230,5,37,0,0,226,230,5,38,0,0,227,230,
		5,39,0,0,228,230,5,40,0,0,229,223,1,0,0,0,229,224,1,0,0,0,229,225,1,0,
		0,0,229,226,1,0,0,0,229,227,1,0,0,0,229,228,1,0,0,0,229,230,1,0,0,0,230,
		17,1,0,0,0,231,232,5,11,0,0,232,236,3,14,7,0,233,235,3,64,32,0,234,233,
		1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,
		0,238,236,1,0,0,0,239,240,5,12,0,0,240,257,1,0,0,0,241,257,5,18,0,0,242,
		257,5,46,0,0,243,257,3,48,24,0,244,245,5,15,0,0,245,257,3,40,20,0,246,
		247,5,16,0,0,247,251,3,40,20,0,248,250,3,72,36,0,249,248,1,0,0,0,250,253,
		1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,
		0,254,255,5,17,0,0,255,257,1,0,0,0,256,231,1,0,0,0,256,241,1,0,0,0,256,
		242,1,0,0,0,256,243,1,0,0,0,256,244,1,0,0,0,256,246,1,0,0,0,257,19,1,0,
		0,0,258,260,3,22,11,0,259,258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,
		261,262,1,0,0,0,262,21,1,0,0,0,263,261,1,0,0,0,264,266,5,22,0,0,265,264,
		1,0,0,0,265,266,1,0,0,0,266,267,1,0,0,0,267,274,3,24,12,0,268,275,5,35,
		0,0,269,275,5,36,0,0,270,275,5,37,0,0,271,275,5,38,0,0,272,275,5,39,0,
		0,273,275,5,40,0,0,274,268,1,0,0,0,274,269,1,0,0,0,274,270,1,0,0,0,274,
		271,1,0,0,0,274,272,1,0,0,0,274,273,1,0,0,0,274,275,1,0,0,0,275,23,1,0,
		0,0,276,277,5,11,0,0,277,281,3,20,10,0,278,280,3,80,40,0,279,278,1,0,0,
		0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,284,1,0,0,0,283,
		281,1,0,0,0,284,285,5,12,0,0,285,293,1,0,0,0,286,293,5,46,0,0,287,293,
		5,23,0,0,288,289,5,46,0,0,289,290,5,24,0,0,290,293,5,46,0,0,291,293,3,
		48,24,0,292,276,1,0,0,0,292,286,1,0,0,0,292,287,1,0,0,0,292,288,1,0,0,
		0,292,291,1,0,0,0,293,25,1,0,0,0,294,301,3,28,14,0,295,297,5,28,0,0,296,
		298,3,84,42,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,0,299,301,
		5,17,0,0,300,294,1,0,0,0,300,295,1,0,0,0,301,27,1,0,0,0,302,303,3,82,41,
		0,303,29,1,0,0,0,304,305,5,29,0,0,305,307,3,44,22,0,306,308,3,34,17,0,
		307,306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,310,5,30,0,0,310,31,
		1,0,0,0,311,312,5,29,0,0,312,314,3,44,22,0,313,315,3,34,17,0,314,313,1,
		0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,5,30,0,0,317,33,1,0,0,0,
		318,319,5,11,0,0,319,323,3,36,18,0,320,322,3,86,43,0,321,320,1,0,0,0,322,
		325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,323,1,
		0,0,0,326,327,5,12,0,0,327,35,1,0,0,0,328,330,3,88,44,0,329,328,1,0,0,
		0,329,330,1,0,0,0,330,331,1,0,0,0,331,332,3,26,13,0,332,37,1,0,0,0,333,
		336,5,43,0,0,334,336,3,48,24,0,335,333,1,0,0,0,335,334,1,0,0,0,336,39,
		1,0,0,0,337,340,5,43,0,0,338,340,3,44,22,0,339,337,1,0,0,0,339,338,1,0,
		0,0,340,41,1,0,0,0,341,342,3,48,24,0,342,43,1,0,0,0,343,347,3,48,24,0,
		344,346,3,90,45,0,345,344,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,
		348,1,0,0,0,348,45,1,0,0,0,349,347,1,0,0,0,350,354,3,44,22,0,351,353,3,
		92,46,0,352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,
		0,355,47,1,0,0,0,356,354,1,0,0,0,357,360,5,44,0,0,358,360,5,45,0,0,359,
		357,1,0,0,0,359,358,1,0,0,0,360,49,1,0,0,0,361,365,3,52,26,0,362,364,3,
		94,47,0,363,362,1,0,0,0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,
		0,366,51,1,0,0,0,367,365,1,0,0,0,368,369,5,44,0,0,369,53,1,0,0,0,370,372,
		3,10,5,0,371,370,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,
		0,374,55,1,0,0,0,375,373,1,0,0,0,376,382,3,38,19,0,377,378,3,48,24,0,378,
		379,5,7,0,0,379,380,3,40,20,0,380,382,1,0,0,0,381,376,1,0,0,0,381,377,
		1,0,0,0,382,57,1,0,0,0,383,384,5,9,0,0,384,385,3,14,7,0,385,59,1,0,0,0,
		386,387,5,7,0,0,387,388,3,40,20,0,388,61,1,0,0,0,389,390,5,9,0,0,390,391,
		3,14,7,0,391,63,1,0,0,0,392,393,5,9,0,0,393,394,3,14,7,0,394,65,1,0,0,
		0,395,397,3,30,15,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,
		399,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,402,5,13,0,0,402,404,3,
		42,21,0,403,405,3,96,48,0,404,403,1,0,0,0,404,405,1,0,0,0,405,406,1,0,
		0,0,406,407,5,8,0,0,407,67,1,0,0,0,408,409,5,14,0,0,409,410,3,26,13,0,
		410,69,1,0,0,0,411,413,3,30,15,0,412,411,1,0,0,0,413,416,1,0,0,0,414,412,
		1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,0,417,422,3,48,24,
		0,418,423,5,31,0,0,419,423,5,32,0,0,420,423,5,33,0,0,421,423,5,34,0,0,
		422,418,1,0,0,0,422,419,1,0,0,0,422,420,1,0,0,0,422,421,1,0,0,0,423,71,
		1,0,0,0,424,425,5,1,0,0,425,426,3,40,20,0,426,73,1,0,0,0,427,428,5,19,
		0,0,428,430,3,42,21,0,429,431,3,98,49,0,430,429,1,0,0,0,430,431,1,0,0,
		0,431,435,1,0,0,0,432,433,5,20,0,0,433,435,3,42,21,0,434,427,1,0,0,0,434,
		432,1,0,0,0,435,75,1,0,0,0,436,437,5,9,0,0,437,438,3,20,10,0,438,77,1,
		0,0,0,439,440,5,9,0,0,440,441,3,20,10,0,441,79,1,0,0,0,442,443,5,9,0,0,
		443,444,3,20,10,0,444,81,1,0,0,0,445,454,5,41,0,0,446,454,5,46,0,0,447,
		454,3,50,25,0,448,452,5,25,0,0,449,452,5,26,0,0,450,452,5,27,0,0,451,448,
		1,0,0,0,451,449,1,0,0,0,451,450,1,0,0,0,452,454,1,0,0,0,453,445,1,0,0,
		0,453,446,1,0,0,0,453,447,1,0,0,0,453,451,1,0,0,0,454,83,1,0,0,0,455,459,
		3,28,14,0,456,458,3,100,50,0,457,456,1,0,0,0,458,461,1,0,0,0,459,457,1,
		0,0,0,459,460,1,0,0,0,460,85,1,0,0,0,461,459,1,0,0,0,462,463,5,1,0,0,463,
		464,3,36,18,0,464,87,1,0,0,0,465,466,3,48,24,0,466,467,5,8,0,0,467,89,
		1,0,0,0,468,469,5,23,0,0,469,470,3,48,24,0,470,91,1,0,0,0,471,472,5,1,
		0,0,472,473,3,44,22,0,473,93,1,0,0,0,474,475,5,23,0,0,475,476,3,52,26,
		0,476,95,1,0,0,0,477,478,5,7,0,0,478,479,3,40,20,0,479,97,1,0,0,0,480,
		481,5,7,0,0,481,482,3,40,20,0,482,99,1,0,0,0,483,484,5,1,0,0,484,485,3,
		28,14,0,485,101,1,0,0,0,48,108,122,136,142,149,157,166,178,183,188,197,
		203,208,211,214,219,229,236,251,256,261,265,274,281,292,297,300,307,314,
		323,329,335,339,347,354,359,365,373,381,398,404,414,422,430,434,451,453,
		459
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaCompiler.Compiler
