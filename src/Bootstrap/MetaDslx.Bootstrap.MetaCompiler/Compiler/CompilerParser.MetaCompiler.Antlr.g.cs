//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CompilerParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaCompiler.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CompilerParser : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_Utf8Bom=2, LR_KNamespace=3, LR_TSemicolon=4, LR_KUsing=5, 
		LR_KLanguage=6, LR_KReturns=7, LR_TColon=8, LR_TBar=9, LR_KBlock=10, LR_TLParen=11, 
		LR_TRParen=12, LR_KAlt=13, LR_TEqGt=14, LR_THash=15, LR_THashLBrace=16, 
		LR_TRBrace=17, LR_KEof=18, LR_KToken=19, LR_KHidden=20, LR_KFragment=21, 
		LR_TTilde=22, LR_TDot=23, LR_TDotDot=24, LR_KNull=25, LR_KTrue=26, LR_KFalse=27, 
		LR_TLBrace=28, LR_TLBracket=29, LR_TRBracket=30, LR_TEq=31, LR_TQuestionEq=32, 
		LR_TExclEq=33, LR_TPlusEq=34, LR_TQuestion=35, LR_TAsterisk=36, LR_TPlus=37, 
		LR_TQuestionQuestion=38, LR_TAsteriskQuestion=39, LR_TPlusQuestion=40, 
		LR_TInteger=41, LR_TDecimal=42, LR_TPrimitiveType=43, LR_TIdentifier=44, 
		LR_TVerbatimIdentifier=45, LR_TString=46, LR_TWhitespace=47, LR_TLineEnd=48, 
		LR_TSingleLineComment=49, LR_TMultiLineComment=50, LR_TInvalidToken=51;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Declarations = 2, RULE_pr_LanguageDeclaration = 3, 
		RULE_pr_Grammar = 4, RULE_pr_Rule = 5, RULE_pr_PAlternative = 6, RULE_pr_PElement = 7, 
		RULE_pr_PElementValue = 8, RULE_pr_LAlternative = 9, RULE_pr_LElement = 10, 
		RULE_pr_LElementValue = 11, RULE_pr_Expression = 12, RULE_pr_ParserAnnotation = 13, 
		RULE_pr_LexerAnnotation = 14, RULE_pr_AnnotationArguments = 15, RULE_pr_AnnotationArgument = 16, 
		RULE_pr_ReturnTypeIdentifier = 17, RULE_pr_ReturnTypeQualifier = 18, RULE_pr_Name = 19, 
		RULE_pr_Qualifier = 20, RULE_pr_QualifierList = 21, RULE_pr_Identifier = 22, 
		RULE_pr_GrammarBlock1 = 23, RULE_pr_ParserRuleBlock1 = 24, RULE_pr_ParserRuleBlock2 = 25, 
		RULE_pr_PBlockBlock1 = 26, RULE_pr_PBlockInlineBlock1 = 27, RULE_pr_PAlternativeBlock1 = 28, 
		RULE_pr_PAlternativeBlock2 = 29, RULE_pr_PElementBlock1 = 30, RULE_pr_PReferenceAlt3Block1 = 31, 
		RULE_pr_LexerRuleBlock1 = 32, RULE_pr_LexerRuleBlock2 = 33, RULE_pr_LBlockBlock1 = 34, 
		RULE_pr_ArrayExpressionBlock1 = 35, RULE_pr_AnnotationArgumentsBlock1 = 36, 
		RULE_pr_AnnotationArgumentBlock1 = 37, RULE_pr_QualifierBlock1 = 38, RULE_pr_QualifierListBlock1 = 39, 
		RULE_pr_PAlternativeBlock1Block1 = 40, RULE_pr_LexerRuleBlock1Alt1Block1 = 41, 
		RULE_pr_ArrayExpressionBlock1Block1 = 42;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Declarations", "pr_LanguageDeclaration", "pr_Grammar", 
		"pr_Rule", "pr_PAlternative", "pr_PElement", "pr_PElementValue", "pr_LAlternative", 
		"pr_LElement", "pr_LElementValue", "pr_Expression", "pr_ParserAnnotation", 
		"pr_LexerAnnotation", "pr_AnnotationArguments", "pr_AnnotationArgument", 
		"pr_ReturnTypeIdentifier", "pr_ReturnTypeQualifier", "pr_Name", "pr_Qualifier", 
		"pr_QualifierList", "pr_Identifier", "pr_GrammarBlock1", "pr_ParserRuleBlock1", 
		"pr_ParserRuleBlock2", "pr_PBlockBlock1", "pr_PBlockInlineBlock1", "pr_PAlternativeBlock1", 
		"pr_PAlternativeBlock2", "pr_PElementBlock1", "pr_PReferenceAlt3Block1", 
		"pr_LexerRuleBlock1", "pr_LexerRuleBlock2", "pr_LBlockBlock1", "pr_ArrayExpressionBlock1", 
		"pr_AnnotationArgumentsBlock1", "pr_AnnotationArgumentBlock1", "pr_QualifierBlock1", 
		"pr_QualifierListBlock1", "pr_PAlternativeBlock1Block1", "pr_LexerRuleBlock1Alt1Block1", 
		"pr_ArrayExpressionBlock1Block1"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, "'namespace'", "';'", "'using'", "'language'", "'returns'", 
		"':'", "'|'", "'block'", "'('", "')'", "'alt'", "'=>'", "'#'", "'#{'", 
		"'}'", "'eof'", "'token'", "'hidden'", "'fragment'", "'~'", "'.'", "'..'", 
		"'null'", "'true'", "'false'", "'{'", "'['", "']'", "'='", "'?='", "'!='", 
		"'+='", "'?'", "'*'", "'+'", "'??'", "'*?'", "'+?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_Utf8Bom", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", 
		"LR_KLanguage", "LR_KReturns", "LR_TColon", "LR_TBar", "LR_KBlock", "LR_TLParen", 
		"LR_TRParen", "LR_KAlt", "LR_TEqGt", "LR_THash", "LR_THashLBrace", "LR_TRBrace", 
		"LR_KEof", "LR_KToken", "LR_KHidden", "LR_KFragment", "LR_TTilde", "LR_TDot", 
		"LR_TDotDot", "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TLBrace", "LR_TLBracket", 
		"LR_TRBracket", "LR_TEq", "LR_TQuestionEq", "LR_TExclEq", "LR_TPlusEq", 
		"LR_TQuestion", "LR_TAsterisk", "LR_TPlus", "LR_TQuestionQuestion", "LR_TAsteriskQuestion", 
		"LR_TPlusQuestion", "LR_TInteger", "LR_TDecimal", "LR_TPrimitiveType", 
		"LR_TIdentifier", "LR_TVerbatimIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken kNamespace;
		public Pr_QualifierContext nameAntlr1;
		public IToken tSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _usingAntlr1 = new List<Pr_UsingContext>();
		public Pr_DeclarationsContext declarationsAntlr1;
		public IToken eof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(CompilerParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationsContext pr_Declarations() {
			return GetRuleContext<Pr_DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(CompilerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_localctx.kNamespace = Match(LR_KNamespace);
			State = 87;
			_localctx.nameAntlr1 = pr_Qualifier();
			State = 88;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 89;
				_localctx._pr_Using = pr_Using();
				_localctx._usingAntlr1.Add(_localctx._pr_Using);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			_localctx.declarationsAntlr1 = pr_Declarations();
			State = 96;
			_localctx.eof = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken kUsing;
		public Pr_QualifierContext namespacesAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(CompilerParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_localctx.kUsing = Match(LR_KUsing);
			State = 99;
			_localctx.namespacesAntlr1 = pr_Qualifier();
			State = 100;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_DeclarationsContext : ParserRuleContext {
		public Pr_LanguageDeclarationContext declarationsAntlr1;
		public Pr_RuleContext _pr_Rule;
		public IList<Pr_RuleContext> _declarations1Antlr1 = new List<Pr_RuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
			return GetRuleContext<Pr_LanguageDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext[] pr_Rule() {
			return GetRuleContexts<Pr_RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext pr_Rule(int i) {
			return GetRuleContext<Pr_RuleContext>(i);
		}
		public Pr_DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_DeclarationsContext pr_Declarations() {
		Pr_DeclarationsContext _localctx = new Pr_DeclarationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			_localctx.declarationsAntlr1 = pr_LanguageDeclaration();
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 61573191697408L) != 0)) {
				{
				{
				State = 103;
				_localctx._pr_Rule = pr_Rule();
				_localctx._declarations1Antlr1.Add(_localctx._pr_Rule);
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LanguageDeclarationContext : ParserRuleContext {
		public IToken kLanguage;
		public Pr_NameContext nameAntlr1;
		public IToken tSemicolon;
		public Pr_GrammarContext grammarAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KLanguage() { return GetToken(CompilerParser.LR_KLanguage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarContext pr_Grammar() {
			return GetRuleContext<Pr_GrammarContext>(0);
		}
		public Pr_LanguageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LanguageDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LanguageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LanguageDeclarationContext pr_LanguageDeclaration() {
		Pr_LanguageDeclarationContext _localctx = new Pr_LanguageDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_LanguageDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_localctx.kLanguage = Match(LR_KLanguage);
			State = 110;
			_localctx.nameAntlr1 = pr_Name();
			State = 111;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			State = 112;
			_localctx.grammarAntlr1 = pr_Grammar();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_GrammarContext : ParserRuleContext {
		public Pr_GrammarBlock1Context grammarBlock1Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_GrammarBlock1Context pr_GrammarBlock1() {
			return GetRuleContext<Pr_GrammarBlock1Context>(0);
		}
		public Pr_GrammarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Grammar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Grammar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_GrammarContext pr_Grammar() {
		Pr_GrammarContext _localctx = new Pr_GrammarContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_Grammar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			_localctx.grammarBlock1Antlr1 = pr_GrammarBlock1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_RuleContext : ParserRuleContext {
		public Pr_RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Rule; } }
	 
		public Pr_RuleContext() { }
		public virtual void CopyFrom(Pr_RuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_LexerRuleContext : Pr_RuleContext {
		public Pr_LexerAnnotationContext _pr_LexerAnnotation;
		public IList<Pr_LexerAnnotationContext> _annotations1Antlr1 = new List<Pr_LexerAnnotationContext>();
		public Pr_LexerRuleBlock1Context lexerRuleBlock1Antlr1;
		public IToken tColon;
		public Pr_LAlternativeContext alternativesAntlr1;
		public Pr_LexerRuleBlock2Context _pr_LexerRuleBlock2;
		public IList<Pr_LexerRuleBlock2Context> _lexerRuleBlock2Antlr1 = new List<Pr_LexerRuleBlock2Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerRuleBlock1Context pr_LexerRuleBlock1() {
			return GetRuleContext<Pr_LexerRuleBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerAnnotationContext[] pr_LexerAnnotation() {
			return GetRuleContexts<Pr_LexerAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerAnnotationContext pr_LexerAnnotation(int i) {
			return GetRuleContext<Pr_LexerAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerRuleBlock2Context[] pr_LexerRuleBlock2() {
			return GetRuleContexts<Pr_LexerRuleBlock2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerRuleBlock2Context pr_LexerRuleBlock2(int i) {
			return GetRuleContext<Pr_LexerRuleBlock2Context>(i);
		}
		public Pr_LexerRuleContext(Pr_RuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRule(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PBlockContext : Pr_RuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _annotations1Antlr1 = new List<Pr_ParserAnnotationContext>();
		public IToken kBlock;
		public Pr_NameContext nameAntlr1;
		public IToken tColon;
		public Pr_PAlternativeContext alternativesAntlr1;
		public Pr_PBlockBlock1Context _pr_PBlockBlock1;
		public IList<Pr_PBlockBlock1Context> _pBlockBlock1Antlr1 = new List<Pr_PBlockBlock1Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBlock() { return GetToken(CompilerParser.LR_KBlock, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeContext pr_PAlternative() {
			return GetRuleContext<Pr_PAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PBlockBlock1Context[] pr_PBlockBlock1() {
			return GetRuleContexts<Pr_PBlockBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PBlockBlock1Context pr_PBlockBlock1(int i) {
			return GetRuleContext<Pr_PBlockBlock1Context>(i);
		}
		public Pr_PBlockContext(Pr_RuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ParserRuleContext : Pr_RuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _annotations1Antlr1 = new List<Pr_ParserAnnotationContext>();
		public Pr_ParserRuleBlock1Context parserRuleBlock1Antlr1;
		public IToken tColon;
		public Pr_PAlternativeContext alternativesAntlr1;
		public Pr_ParserRuleBlock2Context _pr_ParserRuleBlock2;
		public IList<Pr_ParserRuleBlock2Context> _parserRuleBlock2Antlr1 = new List<Pr_ParserRuleBlock2Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleBlock1Context pr_ParserRuleBlock1() {
			return GetRuleContext<Pr_ParserRuleBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeContext pr_PAlternative() {
			return GetRuleContext<Pr_PAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(CompilerParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleBlock2Context[] pr_ParserRuleBlock2() {
			return GetRuleContexts<Pr_ParserRuleBlock2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserRuleBlock2Context pr_ParserRuleBlock2(int i) {
			return GetRuleContext<Pr_ParserRuleBlock2Context>(i);
		}
		public Pr_ParserRuleContext(Pr_RuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_RuleContext pr_Rule() {
		Pr_RuleContext _localctx = new Pr_RuleContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_Rule);
		int _la;
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new Pr_ParserRuleContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TLBracket) {
					{
					{
					State = 116;
					((Pr_ParserRuleContext)_localctx)._pr_ParserAnnotation = pr_ParserAnnotation();
					((Pr_ParserRuleContext)_localctx)._annotations1Antlr1.Add(((Pr_ParserRuleContext)_localctx)._pr_ParserAnnotation);
					}
					}
					State = 121;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 122;
				((Pr_ParserRuleContext)_localctx).parserRuleBlock1Antlr1 = pr_ParserRuleBlock1();
				State = 123;
				((Pr_ParserRuleContext)_localctx).tColon = Match(LR_TColon);
				State = 124;
				((Pr_ParserRuleContext)_localctx).alternativesAntlr1 = pr_PAlternative();
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 125;
					((Pr_ParserRuleContext)_localctx)._pr_ParserRuleBlock2 = pr_ParserRuleBlock2();
					((Pr_ParserRuleContext)_localctx)._parserRuleBlock2Antlr1.Add(((Pr_ParserRuleContext)_localctx)._pr_ParserRuleBlock2);
					}
					}
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 131;
				((Pr_ParserRuleContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			case 2:
				_localctx = new Pr_PBlockContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TLBracket) {
					{
					{
					State = 133;
					((Pr_PBlockContext)_localctx)._pr_ParserAnnotation = pr_ParserAnnotation();
					((Pr_PBlockContext)_localctx)._annotations1Antlr1.Add(((Pr_PBlockContext)_localctx)._pr_ParserAnnotation);
					}
					}
					State = 138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 139;
				((Pr_PBlockContext)_localctx).kBlock = Match(LR_KBlock);
				State = 140;
				((Pr_PBlockContext)_localctx).nameAntlr1 = pr_Name();
				State = 141;
				((Pr_PBlockContext)_localctx).tColon = Match(LR_TColon);
				State = 142;
				((Pr_PBlockContext)_localctx).alternativesAntlr1 = pr_PAlternative();
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 143;
					((Pr_PBlockContext)_localctx)._pr_PBlockBlock1 = pr_PBlockBlock1();
					((Pr_PBlockContext)_localctx)._pBlockBlock1Antlr1.Add(((Pr_PBlockContext)_localctx)._pr_PBlockBlock1);
					}
					}
					State = 148;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 149;
				((Pr_PBlockContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			case 3:
				_localctx = new Pr_LexerRuleContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TLBracket) {
					{
					{
					State = 151;
					((Pr_LexerRuleContext)_localctx)._pr_LexerAnnotation = pr_LexerAnnotation();
					((Pr_LexerRuleContext)_localctx)._annotations1Antlr1.Add(((Pr_LexerRuleContext)_localctx)._pr_LexerAnnotation);
					}
					}
					State = 156;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 157;
				((Pr_LexerRuleContext)_localctx).lexerRuleBlock1Antlr1 = pr_LexerRuleBlock1();
				State = 158;
				((Pr_LexerRuleContext)_localctx).tColon = Match(LR_TColon);
				State = 159;
				((Pr_LexerRuleContext)_localctx).alternativesAntlr1 = pr_LAlternative();
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 160;
					((Pr_LexerRuleContext)_localctx)._pr_LexerRuleBlock2 = pr_LexerRuleBlock2();
					((Pr_LexerRuleContext)_localctx)._lexerRuleBlock2Antlr1.Add(((Pr_LexerRuleContext)_localctx)._pr_LexerRuleBlock2);
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 166;
				((Pr_LexerRuleContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PAlternativeContext : ParserRuleContext {
		public Pr_PAlternativeBlock1Context pAlternativeBlock1Antlr1;
		public Pr_PElementContext _pr_PElement;
		public IList<Pr_PElementContext> _elementsAntlr1 = new List<Pr_PElementContext>();
		public Pr_PAlternativeBlock2Context pAlternativeBlock2Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeBlock1Context pr_PAlternativeBlock1() {
			return GetRuleContext<Pr_PAlternativeBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementContext[] pr_PElement() {
			return GetRuleContexts<Pr_PElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementContext pr_PElement(int i) {
			return GetRuleContext<Pr_PElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeBlock2Context pr_PAlternativeBlock2() {
			return GetRuleContext<Pr_PAlternativeBlock2Context>(0);
		}
		public Pr_PAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PAlternativeContext pr_PAlternative() {
		Pr_PAlternativeContext _localctx = new Pr_PAlternativeContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_PAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 170;
				_localctx.pAlternativeBlock1Antlr1 = pr_PAlternativeBlock1();
				}
				break;
			}
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145839544320L) != 0)) {
				{
				{
				State = 173;
				_localctx._pr_PElement = pr_PElement();
				_localctx._elementsAntlr1.Add(_localctx._pr_PElement);
				}
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TEqGt) {
				{
				State = 179;
				_localctx.pAlternativeBlock2Antlr1 = pr_PAlternativeBlock2();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PElementContext : ParserRuleContext {
		public Pr_PElementBlock1Context pElementBlock1Antlr1;
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _valueAnnotationsAntlr1 = new List<Pr_ParserAnnotationContext>();
		public Pr_PElementValueContext valueAntlr1;
		public IToken tQuestion;
		public IToken tAsterisk;
		public IToken tPlus;
		public IToken tQuestionQuestion;
		public IToken tAsteriskQuestion;
		public IToken tPlusQuestion;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementValueContext pr_PElementValue() {
			return GetRuleContext<Pr_PElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PElementBlock1Context pr_PElementBlock1() {
			return GetRuleContext<Pr_PElementBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(CompilerParser.LR_TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsterisk() { return GetToken(CompilerParser.LR_TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlus() { return GetToken(CompilerParser.LR_TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionQuestion() { return GetToken(CompilerParser.LR_TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsteriskQuestion() { return GetToken(CompilerParser.LR_TAsteriskQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusQuestion() { return GetToken(CompilerParser.LR_TPlusQuestion, 0); }
		public Pr_PElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PElementContext pr_PElement() {
		Pr_PElementContext _localctx = new Pr_PElementContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_PElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 182;
				_localctx.pElementBlock1Antlr1 = pr_PElementBlock1();
				}
				break;
			}
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 185;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._valueAnnotationsAntlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 191;
			_localctx.valueAntlr1 = pr_PElementValue();
			State = 198;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TQuestion:
				{
				State = 192;
				_localctx.tQuestion = Match(LR_TQuestion);
				}
				break;
			case LR_TAsterisk:
				{
				State = 193;
				_localctx.tAsterisk = Match(LR_TAsterisk);
				}
				break;
			case LR_TPlus:
				{
				State = 194;
				_localctx.tPlus = Match(LR_TPlus);
				}
				break;
			case LR_TQuestionQuestion:
				{
				State = 195;
				_localctx.tQuestionQuestion = Match(LR_TQuestionQuestion);
				}
				break;
			case LR_TAsteriskQuestion:
				{
				State = 196;
				_localctx.tAsteriskQuestion = Match(LR_TAsteriskQuestion);
				}
				break;
			case LR_TPlusQuestion:
				{
				State = 197;
				_localctx.tPlusQuestion = Match(LR_TPlusQuestion);
				}
				break;
			case LR_TSemicolon:
			case LR_TBar:
			case LR_TLParen:
			case LR_TRParen:
			case LR_TEqGt:
			case LR_THash:
			case LR_THashLBrace:
			case LR_KEof:
			case LR_TLBracket:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
			case LR_TString:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PElementValueContext : ParserRuleContext {
		public Pr_PElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PElementValue; } }
	 
		public Pr_PElementValueContext() { }
		public virtual void CopyFrom(Pr_PElementValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_PReferenceAlt1Context : Pr_PElementValueContext {
		public Pr_IdentifierContext ruleAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_PReferenceAlt1Context(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PReferenceAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PKeywordContext : Pr_PElementValueContext {
		public IToken textAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_PKeywordContext(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PReferenceAlt2Context : Pr_PElementValueContext {
		public IToken tHash;
		public Pr_ReturnTypeQualifierContext referencedTypesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_THash() { return GetToken(CompilerParser.LR_THash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_PReferenceAlt2Context(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PReferenceAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PReferenceAlt3Context : Pr_PElementValueContext {
		public IToken tHashLBrace;
		public Pr_ReturnTypeQualifierContext referencedTypesAntlr1;
		public Pr_PReferenceAlt3Block1Context _pr_PReferenceAlt3Block1;
		public IList<Pr_PReferenceAlt3Block1Context> _pReferenceAlt3Block1Antlr1 = new List<Pr_PReferenceAlt3Block1Context>();
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_THashLBrace() { return GetToken(CompilerParser.LR_THashLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(CompilerParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PReferenceAlt3Block1Context[] pr_PReferenceAlt3Block1() {
			return GetRuleContexts<Pr_PReferenceAlt3Block1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PReferenceAlt3Block1Context pr_PReferenceAlt3Block1(int i) {
			return GetRuleContext<Pr_PReferenceAlt3Block1Context>(i);
		}
		public Pr_PReferenceAlt3Context(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PReferenceAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PBlockInlineContext : Pr_PElementValueContext {
		public IToken tLParen;
		public Pr_PAlternativeContext alternativesAntlr1;
		public Pr_PBlockInlineBlock1Context _pr_PBlockInlineBlock1;
		public IList<Pr_PBlockInlineBlock1Context> _pBlockInlineBlock1Antlr1 = new List<Pr_PBlockInlineBlock1Context>();
		public IToken tRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeContext pr_PAlternative() {
			return GetRuleContext<Pr_PAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PBlockInlineBlock1Context[] pr_PBlockInlineBlock1() {
			return GetRuleContexts<Pr_PBlockInlineBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PBlockInlineBlock1Context pr_PBlockInlineBlock1(int i) {
			return GetRuleContext<Pr_PBlockInlineBlock1Context>(i);
		}
		public Pr_PBlockInlineContext(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PBlockInline(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PEofContext : Pr_PElementValueContext {
		public IToken kEof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KEof() { return GetToken(CompilerParser.LR_KEof, 0); }
		public Pr_PEofContext(Pr_PElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PEof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PElementValueContext pr_PElementValue() {
		Pr_PElementValueContext _localctx = new Pr_PElementValueContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_PElementValue);
		int _la;
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TLParen:
				_localctx = new Pr_PBlockInlineContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 200;
				((Pr_PBlockInlineContext)_localctx).tLParen = Match(LR_TLParen);
				State = 201;
				((Pr_PBlockInlineContext)_localctx).alternativesAntlr1 = pr_PAlternative();
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 202;
					((Pr_PBlockInlineContext)_localctx)._pr_PBlockInlineBlock1 = pr_PBlockInlineBlock1();
					((Pr_PBlockInlineContext)_localctx)._pBlockInlineBlock1Antlr1.Add(((Pr_PBlockInlineContext)_localctx)._pr_PBlockInlineBlock1);
					}
					}
					State = 207;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 208;
				((Pr_PBlockInlineContext)_localctx).tRParen = Match(LR_TRParen);
				}
				break;
			case LR_KEof:
				_localctx = new Pr_PEofContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 210;
				((Pr_PEofContext)_localctx).kEof = Match(LR_KEof);
				}
				break;
			case LR_TString:
				_localctx = new Pr_PKeywordContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 211;
				((Pr_PKeywordContext)_localctx).textAntlr1 = Match(LR_TString);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_PReferenceAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 212;
				((Pr_PReferenceAlt1Context)_localctx).ruleAntlr1 = pr_Identifier();
				}
				break;
			case LR_THash:
				_localctx = new Pr_PReferenceAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 213;
				((Pr_PReferenceAlt2Context)_localctx).tHash = Match(LR_THash);
				State = 214;
				((Pr_PReferenceAlt2Context)_localctx).referencedTypesAntlr1 = pr_ReturnTypeQualifier();
				}
				break;
			case LR_THashLBrace:
				_localctx = new Pr_PReferenceAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 215;
				((Pr_PReferenceAlt3Context)_localctx).tHashLBrace = Match(LR_THashLBrace);
				State = 216;
				((Pr_PReferenceAlt3Context)_localctx).referencedTypesAntlr1 = pr_ReturnTypeQualifier();
				State = 220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 217;
					((Pr_PReferenceAlt3Context)_localctx)._pr_PReferenceAlt3Block1 = pr_PReferenceAlt3Block1();
					((Pr_PReferenceAlt3Context)_localctx)._pReferenceAlt3Block1Antlr1.Add(((Pr_PReferenceAlt3Context)_localctx)._pr_PReferenceAlt3Block1);
					}
					}
					State = 222;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 223;
				((Pr_PReferenceAlt3Context)_localctx).tRBrace = Match(LR_TRBrace);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LAlternativeContext : ParserRuleContext {
		public Pr_LElementContext _pr_LElement;
		public IList<Pr_LElementContext> _elementsAntlr1 = new List<Pr_LElementContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementContext[] pr_LElement() {
			return GetRuleContexts<Pr_LElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementContext pr_LElement(int i) {
			return GetRuleContext<Pr_LElementContext>(i);
		}
		public Pr_LAlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LAlternative; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LAlternative(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LAlternativeContext pr_LAlternative() {
		Pr_LAlternativeContext _localctx = new Pr_LAlternativeContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_LAlternative);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145314895872L) != 0)) {
				{
				{
				State = 227;
				_localctx._pr_LElement = pr_LElement();
				_localctx._elementsAntlr1.Add(_localctx._pr_LElement);
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LElementContext : ParserRuleContext {
		public IToken isNegated;
		public Pr_LElementValueContext valueAntlr1;
		public IToken tQuestion;
		public IToken tAsterisk;
		public IToken tPlus;
		public IToken tQuestionQuestion;
		public IToken tAsteriskQuestion;
		public IToken tPlusQuestion;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LElementValueContext pr_LElementValue() {
			return GetRuleContext<Pr_LElementValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TTilde() { return GetToken(CompilerParser.LR_TTilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(CompilerParser.LR_TQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsterisk() { return GetToken(CompilerParser.LR_TAsterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlus() { return GetToken(CompilerParser.LR_TPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionQuestion() { return GetToken(CompilerParser.LR_TQuestionQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TAsteriskQuestion() { return GetToken(CompilerParser.LR_TAsteriskQuestion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusQuestion() { return GetToken(CompilerParser.LR_TPlusQuestion, 0); }
		public Pr_LElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LElementContext pr_LElement() {
		Pr_LElementContext _localctx = new Pr_LElementContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_LElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TTilde) {
				{
				State = 233;
				_localctx.isNegated = Match(LR_TTilde);
				}
			}

			State = 236;
			_localctx.valueAntlr1 = pr_LElementValue();
			State = 243;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TQuestion:
				{
				State = 237;
				_localctx.tQuestion = Match(LR_TQuestion);
				}
				break;
			case LR_TAsterisk:
				{
				State = 238;
				_localctx.tAsterisk = Match(LR_TAsterisk);
				}
				break;
			case LR_TPlus:
				{
				State = 239;
				_localctx.tPlus = Match(LR_TPlus);
				}
				break;
			case LR_TQuestionQuestion:
				{
				State = 240;
				_localctx.tQuestionQuestion = Match(LR_TQuestionQuestion);
				}
				break;
			case LR_TAsteriskQuestion:
				{
				State = 241;
				_localctx.tAsteriskQuestion = Match(LR_TAsteriskQuestion);
				}
				break;
			case LR_TPlusQuestion:
				{
				State = 242;
				_localctx.tPlusQuestion = Match(LR_TPlusQuestion);
				}
				break;
			case LR_TSemicolon:
			case LR_TBar:
			case LR_TLParen:
			case LR_TRParen:
			case LR_TTilde:
			case LR_TDot:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
			case LR_TString:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LElementValueContext : ParserRuleContext {
		public Pr_LElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LElementValue; } }
	 
		public Pr_LElementValueContext() { }
		public virtual void CopyFrom(Pr_LElementValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_LBlockContext : Pr_LElementValueContext {
		public IToken tLParen;
		public Pr_LAlternativeContext alternativesAntlr1;
		public Pr_LBlockBlock1Context _pr_LBlockBlock1;
		public IList<Pr_LBlockBlock1Context> _lBlockBlock1Antlr1 = new List<Pr_LBlockBlock1Context>();
		public IToken tRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LBlockBlock1Context[] pr_LBlockBlock1() {
			return GetRuleContexts<Pr_LBlockBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LBlockBlock1Context pr_LBlockBlock1(int i) {
			return GetRuleContext<Pr_LBlockBlock1Context>(i);
		}
		public Pr_LBlockContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LBlock(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LRangeContext : Pr_LElementValueContext {
		public IToken StartCharAntlr1;
		public IToken tDotDot;
		public IToken EndCharAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TString() { return GetTokens(CompilerParser.LR_TString); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString(int i) {
			return GetToken(CompilerParser.LR_TString, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDotDot() { return GetToken(CompilerParser.LR_TDotDot, 0); }
		public Pr_LRangeContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LFixedContext : Pr_LElementValueContext {
		public IToken textAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_LFixedContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LFixed(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LWildCardContext : Pr_LElementValueContext {
		public IToken tDot;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		public Pr_LWildCardContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LWildCard(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LReferenceContext : Pr_LElementValueContext {
		public Pr_IdentifierContext ruleAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_LReferenceContext(Pr_LElementValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LElementValueContext pr_LElementValue() {
		Pr_LElementValueContext _localctx = new Pr_LElementValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_LElementValue);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				_localctx = new Pr_LBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 245;
				((Pr_LBlockContext)_localctx).tLParen = Match(LR_TLParen);
				State = 246;
				((Pr_LBlockContext)_localctx).alternativesAntlr1 = pr_LAlternative();
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TBar) {
					{
					{
					State = 247;
					((Pr_LBlockContext)_localctx)._pr_LBlockBlock1 = pr_LBlockBlock1();
					((Pr_LBlockContext)_localctx)._lBlockBlock1Antlr1.Add(((Pr_LBlockContext)_localctx)._pr_LBlockBlock1);
					}
					}
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 253;
				((Pr_LBlockContext)_localctx).tRParen = Match(LR_TRParen);
				}
				break;
			case 2:
				_localctx = new Pr_LFixedContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 255;
				((Pr_LFixedContext)_localctx).textAntlr1 = Match(LR_TString);
				}
				break;
			case 3:
				_localctx = new Pr_LWildCardContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 256;
				((Pr_LWildCardContext)_localctx).tDot = Match(LR_TDot);
				}
				break;
			case 4:
				_localctx = new Pr_LRangeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 257;
				((Pr_LRangeContext)_localctx).StartCharAntlr1 = Match(LR_TString);
				State = 258;
				((Pr_LRangeContext)_localctx).tDotDot = Match(LR_TDotDot);
				State = 259;
				((Pr_LRangeContext)_localctx).EndCharAntlr1 = Match(LR_TString);
				}
				break;
			case 5:
				_localctx = new Pr_LReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 260;
				((Pr_LReferenceContext)_localctx).ruleAntlr1 = pr_Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ExpressionContext : ParserRuleContext {
		public Pr_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Expression; } }
	 
		public Pr_ExpressionContext() { }
		public virtual void CopyFrom(Pr_ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ReferenceExpressionContext : Pr_ExpressionContext {
		public Pr_QualifierContext symbolValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ReferenceExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ExpressionTokensContext : Pr_ExpressionContext {
		public IToken kNull;
		public IToken boolValue;
		public IToken kFalse;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNull() { return GetToken(CompilerParser.LR_KNull, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KTrue() { return GetToken(CompilerParser.LR_KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFalse() { return GetToken(CompilerParser.LR_KFalse, 0); }
		public Pr_ExpressionTokensContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ExpressionTokens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ArrayExpressionContext : Pr_ExpressionContext {
		public IToken tLBrace;
		public Pr_ArrayExpressionBlock1Context arrayExpressionBlock1Antlr1;
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(CompilerParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(CompilerParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayExpressionBlock1Context pr_ArrayExpressionBlock1() {
			return GetRuleContext<Pr_ArrayExpressionBlock1Context>(0);
		}
		public Pr_ArrayExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_IntExpressionContext : Pr_ExpressionContext {
		public IToken intValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TInteger() { return GetToken(CompilerParser.LR_TInteger, 0); }
		public Pr_IntExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IntExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_StringExpressionContext : Pr_ExpressionContext {
		public IToken stringValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(CompilerParser.LR_TString, 0); }
		public Pr_StringExpressionContext(Pr_ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_StringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ExpressionContext pr_Expression() {
		Pr_ExpressionContext _localctx = new Pr_ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_Expression);
		int _la;
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TInteger:
				_localctx = new Pr_IntExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				((Pr_IntExpressionContext)_localctx).intValueAntlr1 = Match(LR_TInteger);
				}
				break;
			case LR_TString:
				_localctx = new Pr_StringExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				((Pr_StringExpressionContext)_localctx).stringValueAntlr1 = Match(LR_TString);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 265;
				((Pr_ReferenceExpressionContext)_localctx).symbolValueAntlr1 = pr_Qualifier();
				}
				break;
			case LR_TLBrace:
				_localctx = new Pr_ArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 266;
				((Pr_ArrayExpressionContext)_localctx).tLBrace = Match(LR_TLBrace);
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 125344828882944L) != 0)) {
					{
					State = 267;
					((Pr_ArrayExpressionContext)_localctx).arrayExpressionBlock1Antlr1 = pr_ArrayExpressionBlock1();
					}
				}

				State = 270;
				((Pr_ArrayExpressionContext)_localctx).tRBrace = Match(LR_TRBrace);
				}
				break;
			case LR_KNull:
			case LR_KTrue:
			case LR_KFalse:
				_localctx = new Pr_ExpressionTokensContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 274;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_KNull:
					{
					State = 271;
					((Pr_ExpressionTokensContext)_localctx).kNull = Match(LR_KNull);
					}
					break;
				case LR_KTrue:
					{
					State = 272;
					((Pr_ExpressionTokensContext)_localctx).boolValue = Match(LR_KTrue);
					}
					break;
				case LR_KFalse:
					{
					State = 273;
					((Pr_ExpressionTokensContext)_localctx).kFalse = Match(LR_KFalse);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserAnnotationContext : ParserRuleContext {
		public IToken tLBracket;
		public Pr_QualifierContext typeAntlr1;
		public Pr_AnnotationArgumentsContext annotationArgumentsAntlr1;
		public IToken tRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(CompilerParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(CompilerParser.LR_TRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
			return GetRuleContext<Pr_AnnotationArgumentsContext>(0);
		}
		public Pr_ParserAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserAnnotationContext pr_ParserAnnotation() {
		Pr_ParserAnnotationContext _localctx = new Pr_ParserAnnotationContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_ParserAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_localctx.tLBracket = Match(LR_TLBracket);
			State = 279;
			_localctx.typeAntlr1 = pr_Qualifier();
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLParen) {
				{
				State = 280;
				_localctx.annotationArgumentsAntlr1 = pr_AnnotationArguments();
				}
			}

			State = 283;
			_localctx.tRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerAnnotationContext : ParserRuleContext {
		public IToken tLBracket;
		public Pr_QualifierContext typeAntlr1;
		public Pr_AnnotationArgumentsContext annotationArgumentsAntlr1;
		public IToken tRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(CompilerParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(CompilerParser.LR_TRBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
			return GetRuleContext<Pr_AnnotationArgumentsContext>(0);
		}
		public Pr_LexerAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerAnnotationContext pr_LexerAnnotation() {
		Pr_LexerAnnotationContext _localctx = new Pr_LexerAnnotationContext(Context, State);
		EnterRule(_localctx, 28, RULE_pr_LexerAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			_localctx.tLBracket = Match(LR_TLBracket);
			State = 286;
			_localctx.typeAntlr1 = pr_Qualifier();
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLParen) {
				{
				State = 287;
				_localctx.annotationArgumentsAntlr1 = pr_AnnotationArguments();
				}
			}

			State = 290;
			_localctx.tRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentsContext : ParserRuleContext {
		public IToken tLParen;
		public Pr_AnnotationArgumentContext argumentsAntlr1;
		public Pr_AnnotationArgumentsBlock1Context _pr_AnnotationArgumentsBlock1;
		public IList<Pr_AnnotationArgumentsBlock1Context> _annotationArgumentsBlock1Antlr1 = new List<Pr_AnnotationArgumentsBlock1Context>();
		public IToken tRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(CompilerParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
			return GetRuleContext<Pr_AnnotationArgumentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(CompilerParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsBlock1Context[] pr_AnnotationArgumentsBlock1() {
			return GetRuleContexts<Pr_AnnotationArgumentsBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentsBlock1Context pr_AnnotationArgumentsBlock1(int i) {
			return GetRuleContext<Pr_AnnotationArgumentsBlock1Context>(i);
		}
		public Pr_AnnotationArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentsContext pr_AnnotationArguments() {
		Pr_AnnotationArgumentsContext _localctx = new Pr_AnnotationArgumentsContext(Context, State);
		EnterRule(_localctx, 30, RULE_pr_AnnotationArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			_localctx.tLParen = Match(LR_TLParen);
			State = 293;
			_localctx.argumentsAntlr1 = pr_AnnotationArgument();
			State = 297;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 294;
				_localctx._pr_AnnotationArgumentsBlock1 = pr_AnnotationArgumentsBlock1();
				_localctx._annotationArgumentsBlock1Antlr1.Add(_localctx._pr_AnnotationArgumentsBlock1);
				}
				}
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 300;
			_localctx.tRParen = Match(LR_TRParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentContext : ParserRuleContext {
		public Pr_AnnotationArgumentBlock1Context annotationArgumentBlock1Antlr1;
		public Pr_ExpressionContext valueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentBlock1Context pr_AnnotationArgumentBlock1() {
			return GetRuleContext<Pr_AnnotationArgumentBlock1Context>(0);
		}
		public Pr_AnnotationArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
		Pr_AnnotationArgumentContext _localctx = new Pr_AnnotationArgumentContext(Context, State);
		EnterRule(_localctx, 32, RULE_pr_AnnotationArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				{
				State = 302;
				_localctx.annotationArgumentBlock1Antlr1 = pr_AnnotationArgumentBlock1();
				}
				break;
			}
			State = 305;
			_localctx.valueAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ReturnTypeIdentifierContext : ParserRuleContext {
		public Pr_ReturnTypeIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ReturnTypeIdentifier; } }
	 
		public Pr_ReturnTypeIdentifierContext() { }
		public virtual void CopyFrom(Pr_ReturnTypeIdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ReturnTypeIdentifierAlt1Context : Pr_ReturnTypeIdentifierContext {
		public IToken tPrimitiveTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPrimitiveType() { return GetToken(CompilerParser.LR_TPrimitiveType, 0); }
		public Pr_ReturnTypeIdentifierAlt1Context(Pr_ReturnTypeIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeIdentifierAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ReturnTypeIdentifierAlt2Context : Pr_ReturnTypeIdentifierContext {
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_ReturnTypeIdentifierAlt2Context(Pr_ReturnTypeIdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeIdentifierAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ReturnTypeIdentifierContext pr_ReturnTypeIdentifier() {
		Pr_ReturnTypeIdentifierContext _localctx = new Pr_ReturnTypeIdentifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_pr_ReturnTypeIdentifier);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TPrimitiveType:
				_localctx = new Pr_ReturnTypeIdentifierAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				((Pr_ReturnTypeIdentifierAlt1Context)_localctx).tPrimitiveTypeAntlr1 = Match(LR_TPrimitiveType);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ReturnTypeIdentifierAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				((Pr_ReturnTypeIdentifierAlt2Context)_localctx).identifierAntlr1 = pr_Identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ReturnTypeQualifierContext : ParserRuleContext {
		public Pr_ReturnTypeQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ReturnTypeQualifier; } }
	 
		public Pr_ReturnTypeQualifierContext() { }
		public virtual void CopyFrom(Pr_ReturnTypeQualifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ReturnTypeQualifierAlt1Context : Pr_ReturnTypeQualifierContext {
		public IToken tPrimitiveTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPrimitiveType() { return GetToken(CompilerParser.LR_TPrimitiveType, 0); }
		public Pr_ReturnTypeQualifierAlt1Context(Pr_ReturnTypeQualifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeQualifierAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ReturnTypeQualifierAlt2Context : Pr_ReturnTypeQualifierContext {
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ReturnTypeQualifierAlt2Context(Pr_ReturnTypeQualifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ReturnTypeQualifierAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
		Pr_ReturnTypeQualifierContext _localctx = new Pr_ReturnTypeQualifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_pr_ReturnTypeQualifier);
		try {
			State = 313;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TPrimitiveType:
				_localctx = new Pr_ReturnTypeQualifierAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 311;
				((Pr_ReturnTypeQualifierAlt1Context)_localctx).tPrimitiveTypeAntlr1 = Match(LR_TPrimitiveType);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ReturnTypeQualifierAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 312;
				((Pr_ReturnTypeQualifierAlt2Context)_localctx).qualifierAntlr1 = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 38, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		public Pr_QualifierBlock1Context _pr_QualifierBlock1;
		public IList<Pr_QualifierBlock1Context> _qualifierBlock1Antlr1 = new List<Pr_QualifierBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context[] pr_QualifierBlock1() {
			return GetRuleContexts<Pr_QualifierBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context pr_QualifierBlock1(int i) {
			return GetRuleContext<Pr_QualifierBlock1Context>(i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_pr_Qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			_localctx.identifierAntlr1 = pr_Identifier();
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TDot) {
				{
				{
				State = 318;
				_localctx._pr_QualifierBlock1 = pr_QualifierBlock1();
				_localctx._qualifierBlock1Antlr1.Add(_localctx._pr_QualifierBlock1);
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListContext : ParserRuleContext {
		public Pr_QualifierContext qualifierAntlr1;
		public Pr_QualifierListBlock1Context _pr_QualifierListBlock1;
		public IList<Pr_QualifierListBlock1Context> _qualifierListBlock1Antlr1 = new List<Pr_QualifierListBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context[] pr_QualifierListBlock1() {
			return GetRuleContexts<Pr_QualifierListBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context pr_QualifierListBlock1(int i) {
			return GetRuleContext<Pr_QualifierListBlock1Context>(i);
		}
		public Pr_QualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListContext pr_QualifierList() {
		Pr_QualifierListContext _localctx = new Pr_QualifierListContext(Context, State);
		EnterRule(_localctx, 42, RULE_pr_QualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			State = 328;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 325;
				_localctx._pr_QualifierListBlock1 = pr_QualifierListBlock1();
				_localctx._qualifierListBlock1Antlr1.Add(_localctx._pr_QualifierListBlock1);
				}
				}
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
	 
		public Pr_IdentifierContext() { }
		public virtual void CopyFrom(Pr_IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_IdentifierAlt1Context : Pr_IdentifierContext {
		public IToken tIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(CompilerParser.LR_TIdentifier, 0); }
		public Pr_IdentifierAlt1Context(Pr_IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IdentifierAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_IdentifierAlt2Context : Pr_IdentifierContext {
		public IToken tVerbatimIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TVerbatimIdentifier() { return GetToken(CompilerParser.LR_TVerbatimIdentifier, 0); }
		public Pr_IdentifierAlt2Context(Pr_IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_IdentifierAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_pr_Identifier);
		try {
			State = 333;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TIdentifier:
				_localctx = new Pr_IdentifierAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 331;
				((Pr_IdentifierAlt1Context)_localctx).tIdentifierAntlr1 = Match(LR_TIdentifier);
				}
				break;
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_IdentifierAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 332;
				((Pr_IdentifierAlt2Context)_localctx).tVerbatimIdentifierAntlr1 = Match(LR_TVerbatimIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_GrammarBlock1Context : ParserRuleContext {
		public Pr_RuleContext _pr_Rule;
		public IList<Pr_RuleContext> _rulesAntlr1 = new List<Pr_RuleContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext[] pr_Rule() {
			return GetRuleContexts<Pr_RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_RuleContext pr_Rule(int i) {
			return GetRuleContext<Pr_RuleContext>(i);
		}
		public Pr_GrammarBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_GrammarBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_GrammarBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_GrammarBlock1Context pr_GrammarBlock1() {
		Pr_GrammarBlock1Context _localctx = new Pr_GrammarBlock1Context(Context, State);
		EnterRule(_localctx, 46, RULE_pr_GrammarBlock1);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 335;
					_localctx._pr_Rule = pr_Rule();
					_localctx._rulesAntlr1.Add(_localctx._pr_Rule);
					}
					} 
				}
				State = 340;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleBlock1Context : ParserRuleContext {
		public Pr_ParserRuleBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleBlock1; } }
	 
		public Pr_ParserRuleBlock1Context() { }
		public virtual void CopyFrom(Pr_ParserRuleBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ParserRuleBlock1Alt1Context : Pr_ParserRuleBlock1Context {
		public Pr_ReturnTypeIdentifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeIdentifierContext pr_ReturnTypeIdentifier() {
			return GetRuleContext<Pr_ReturnTypeIdentifierContext>(0);
		}
		public Pr_ParserRuleBlock1Alt1Context(Pr_ParserRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ParserRuleBlock1Alt2Context : Pr_ParserRuleBlock1Context {
		public Pr_IdentifierContext identifierAntlr1;
		public IToken kReturns;
		public Pr_ReturnTypeQualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_ParserRuleBlock1Alt2Context(Pr_ParserRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleBlock1Context pr_ParserRuleBlock1() {
		Pr_ParserRuleBlock1Context _localctx = new Pr_ParserRuleBlock1Context(Context, State);
		EnterRule(_localctx, 48, RULE_pr_ParserRuleBlock1);
		try {
			State = 346;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new Pr_ParserRuleBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 341;
				((Pr_ParserRuleBlock1Alt1Context)_localctx).returnTypeAntlr1 = pr_ReturnTypeIdentifier();
				}
				break;
			case 2:
				_localctx = new Pr_ParserRuleBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 342;
				((Pr_ParserRuleBlock1Alt2Context)_localctx).identifierAntlr1 = pr_Identifier();
				State = 343;
				((Pr_ParserRuleBlock1Alt2Context)_localctx).kReturns = Match(LR_KReturns);
				State = 344;
				((Pr_ParserRuleBlock1Alt2Context)_localctx).returnTypeAntlr1 = pr_ReturnTypeQualifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParserRuleBlock2Context : ParserRuleContext {
		public IToken tBar;
		public Pr_PAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeContext pr_PAlternative() {
			return GetRuleContext<Pr_PAlternativeContext>(0);
		}
		public Pr_ParserRuleBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParserRuleBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParserRuleBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParserRuleBlock2Context pr_ParserRuleBlock2() {
		Pr_ParserRuleBlock2Context _localctx = new Pr_ParserRuleBlock2Context(Context, State);
		EnterRule(_localctx, 50, RULE_pr_ParserRuleBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			_localctx.tBar = Match(LR_TBar);
			State = 349;
			_localctx.alternativesAntlr1 = pr_PAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PBlockBlock1Context : ParserRuleContext {
		public IToken tBar;
		public Pr_PAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeContext pr_PAlternative() {
			return GetRuleContext<Pr_PAlternativeContext>(0);
		}
		public Pr_PBlockBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PBlockBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PBlockBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PBlockBlock1Context pr_PBlockBlock1() {
		Pr_PBlockBlock1Context _localctx = new Pr_PBlockBlock1Context(Context, State);
		EnterRule(_localctx, 52, RULE_pr_PBlockBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			_localctx.tBar = Match(LR_TBar);
			State = 352;
			_localctx.alternativesAntlr1 = pr_PAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PBlockInlineBlock1Context : ParserRuleContext {
		public IToken tBar;
		public Pr_PAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeContext pr_PAlternative() {
			return GetRuleContext<Pr_PAlternativeContext>(0);
		}
		public Pr_PBlockInlineBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PBlockInlineBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PBlockInlineBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PBlockInlineBlock1Context pr_PBlockInlineBlock1() {
		Pr_PBlockInlineBlock1Context _localctx = new Pr_PBlockInlineBlock1Context(Context, State);
		EnterRule(_localctx, 54, RULE_pr_PBlockInlineBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			_localctx.tBar = Match(LR_TBar);
			State = 355;
			_localctx.alternativesAntlr1 = pr_PAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PAlternativeBlock1Context : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _annotations1Antlr1 = new List<Pr_ParserAnnotationContext>();
		public IToken kAlt;
		public Pr_NameContext nameAntlr1;
		public Pr_PAlternativeBlock1Block1Context pAlternativeBlock1Block1Antlr1;
		public IToken tColon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAlt() { return GetToken(CompilerParser.LR_KAlt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PAlternativeBlock1Block1Context pr_PAlternativeBlock1Block1() {
			return GetRuleContext<Pr_PAlternativeBlock1Block1Context>(0);
		}
		public Pr_PAlternativeBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PAlternativeBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PAlternativeBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PAlternativeBlock1Context pr_PAlternativeBlock1() {
		Pr_PAlternativeBlock1Context _localctx = new Pr_PAlternativeBlock1Context(Context, State);
		EnterRule(_localctx, 56, RULE_pr_PAlternativeBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 357;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._annotations1Antlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 363;
			_localctx.kAlt = Match(LR_KAlt);
			State = 364;
			_localctx.nameAntlr1 = pr_Name();
			State = 366;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KReturns) {
				{
				State = 365;
				_localctx.pAlternativeBlock1Block1Antlr1 = pr_PAlternativeBlock1Block1();
				}
			}

			State = 368;
			_localctx.tColon = Match(LR_TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PAlternativeBlock2Context : ParserRuleContext {
		public IToken tEqGt;
		public Pr_ExpressionContext returnValueAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEqGt() { return GetToken(CompilerParser.LR_TEqGt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		public Pr_PAlternativeBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PAlternativeBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PAlternativeBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PAlternativeBlock2Context pr_PAlternativeBlock2() {
		Pr_PAlternativeBlock2Context _localctx = new Pr_PAlternativeBlock2Context(Context, State);
		EnterRule(_localctx, 58, RULE_pr_PAlternativeBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			_localctx.tEqGt = Match(LR_TEqGt);
			State = 371;
			_localctx.returnValueAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PElementBlock1Context : ParserRuleContext {
		public Pr_ParserAnnotationContext _pr_ParserAnnotation;
		public IList<Pr_ParserAnnotationContext> _nameAnnotationsAntlr1 = new List<Pr_ParserAnnotationContext>();
		public Pr_IdentifierContext symbolPropertyAntlr1;
		public IToken tEq;
		public IToken tQuestionEq;
		public IToken tExclEq;
		public IToken tPlusEq;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEq() { return GetToken(CompilerParser.LR_TEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestionEq() { return GetToken(CompilerParser.LR_TQuestionEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TExclEq() { return GetToken(CompilerParser.LR_TExclEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TPlusEq() { return GetToken(CompilerParser.LR_TPlusEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext[] pr_ParserAnnotation() {
			return GetRuleContexts<Pr_ParserAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParserAnnotationContext pr_ParserAnnotation(int i) {
			return GetRuleContext<Pr_ParserAnnotationContext>(i);
		}
		public Pr_PElementBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PElementBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PElementBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PElementBlock1Context pr_PElementBlock1() {
		Pr_PElementBlock1Context _localctx = new Pr_PElementBlock1Context(Context, State);
		EnterRule(_localctx, 60, RULE_pr_PElementBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 373;
				_localctx._pr_ParserAnnotation = pr_ParserAnnotation();
				_localctx._nameAnnotationsAntlr1.Add(_localctx._pr_ParserAnnotation);
				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 379;
			_localctx.symbolPropertyAntlr1 = pr_Identifier();
			State = 384;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TEq:
				{
				State = 380;
				_localctx.tEq = Match(LR_TEq);
				}
				break;
			case LR_TQuestionEq:
				{
				State = 381;
				_localctx.tQuestionEq = Match(LR_TQuestionEq);
				}
				break;
			case LR_TExclEq:
				{
				State = 382;
				_localctx.tExclEq = Match(LR_TExclEq);
				}
				break;
			case LR_TPlusEq:
				{
				State = 383;
				_localctx.tPlusEq = Match(LR_TPlusEq);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PReferenceAlt3Block1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_ReturnTypeQualifierContext referencedTypesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_PReferenceAlt3Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PReferenceAlt3Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PReferenceAlt3Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PReferenceAlt3Block1Context pr_PReferenceAlt3Block1() {
		Pr_PReferenceAlt3Block1Context _localctx = new Pr_PReferenceAlt3Block1Context(Context, State);
		EnterRule(_localctx, 62, RULE_pr_PReferenceAlt3Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			_localctx.tComma = Match(LR_TComma);
			State = 387;
			_localctx.referencedTypesAntlr1 = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerRuleBlock1Context : ParserRuleContext {
		public Pr_LexerRuleBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerRuleBlock1; } }
	 
		public Pr_LexerRuleBlock1Context() { }
		public virtual void CopyFrom(Pr_LexerRuleBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_LexerRuleBlock1Alt3Context : Pr_LexerRuleBlock1Context {
		public IToken isFragment;
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFragment() { return GetToken(CompilerParser.LR_KFragment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_LexerRuleBlock1Alt3Context(Pr_LexerRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock1Alt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LexerRuleBlock1Alt2Context : Pr_LexerRuleBlock1Context {
		public IToken isHidden;
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KHidden() { return GetToken(CompilerParser.LR_KHidden, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_LexerRuleBlock1Alt2Context(Pr_LexerRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_LexerRuleBlock1Alt1Context : Pr_LexerRuleBlock1Context {
		public IToken kToken;
		public Pr_NameContext nameAntlr1;
		public Pr_LexerRuleBlock1Alt1Block1Context lexerRuleBlock1Alt1Block1Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KToken() { return GetToken(CompilerParser.LR_KToken, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LexerRuleBlock1Alt1Block1Context pr_LexerRuleBlock1Alt1Block1() {
			return GetRuleContext<Pr_LexerRuleBlock1Alt1Block1Context>(0);
		}
		public Pr_LexerRuleBlock1Alt1Context(Pr_LexerRuleBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerRuleBlock1Context pr_LexerRuleBlock1() {
		Pr_LexerRuleBlock1Context _localctx = new Pr_LexerRuleBlock1Context(Context, State);
		EnterRule(_localctx, 64, RULE_pr_LexerRuleBlock1);
		int _la;
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KToken:
				_localctx = new Pr_LexerRuleBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 389;
				((Pr_LexerRuleBlock1Alt1Context)_localctx).kToken = Match(LR_KToken);
				State = 390;
				((Pr_LexerRuleBlock1Alt1Context)_localctx).nameAntlr1 = pr_Name();
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KReturns) {
					{
					State = 391;
					((Pr_LexerRuleBlock1Alt1Context)_localctx).lexerRuleBlock1Alt1Block1Antlr1 = pr_LexerRuleBlock1Alt1Block1();
					}
				}

				}
				break;
			case LR_KHidden:
				_localctx = new Pr_LexerRuleBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 394;
				((Pr_LexerRuleBlock1Alt2Context)_localctx).isHidden = Match(LR_KHidden);
				State = 395;
				((Pr_LexerRuleBlock1Alt2Context)_localctx).nameAntlr1 = pr_Name();
				}
				break;
			case LR_KFragment:
				_localctx = new Pr_LexerRuleBlock1Alt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 396;
				((Pr_LexerRuleBlock1Alt3Context)_localctx).isFragment = Match(LR_KFragment);
				State = 397;
				((Pr_LexerRuleBlock1Alt3Context)_localctx).nameAntlr1 = pr_Name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerRuleBlock2Context : ParserRuleContext {
		public IToken tBar;
		public Pr_LAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_LexerRuleBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerRuleBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerRuleBlock2Context pr_LexerRuleBlock2() {
		Pr_LexerRuleBlock2Context _localctx = new Pr_LexerRuleBlock2Context(Context, State);
		EnterRule(_localctx, 66, RULE_pr_LexerRuleBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400;
			_localctx.tBar = Match(LR_TBar);
			State = 401;
			_localctx.alternativesAntlr1 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LBlockBlock1Context : ParserRuleContext {
		public IToken tBar;
		public Pr_LAlternativeContext alternativesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TBar() { return GetToken(CompilerParser.LR_TBar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_LAlternativeContext pr_LAlternative() {
			return GetRuleContext<Pr_LAlternativeContext>(0);
		}
		public Pr_LBlockBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LBlockBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LBlockBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LBlockBlock1Context pr_LBlockBlock1() {
		Pr_LBlockBlock1Context _localctx = new Pr_LBlockBlock1Context(Context, State);
		EnterRule(_localctx, 68, RULE_pr_LBlockBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			_localctx.tBar = Match(LR_TBar);
			State = 404;
			_localctx.alternativesAntlr1 = pr_LAlternative();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ArrayExpressionBlock1Context : ParserRuleContext {
		public Pr_ExpressionContext itemsAntlr1;
		public Pr_ArrayExpressionBlock1Block1Context _pr_ArrayExpressionBlock1Block1;
		public IList<Pr_ArrayExpressionBlock1Block1Context> _arrayExpressionBlock1Block1Antlr1 = new List<Pr_ArrayExpressionBlock1Block1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayExpressionBlock1Block1Context[] pr_ArrayExpressionBlock1Block1() {
			return GetRuleContexts<Pr_ArrayExpressionBlock1Block1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayExpressionBlock1Block1Context pr_ArrayExpressionBlock1Block1(int i) {
			return GetRuleContext<Pr_ArrayExpressionBlock1Block1Context>(i);
		}
		public Pr_ArrayExpressionBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ArrayExpressionBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpressionBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ArrayExpressionBlock1Context pr_ArrayExpressionBlock1() {
		Pr_ArrayExpressionBlock1Context _localctx = new Pr_ArrayExpressionBlock1Context(Context, State);
		EnterRule(_localctx, 70, RULE_pr_ArrayExpressionBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_localctx.itemsAntlr1 = pr_Expression();
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 407;
				_localctx._pr_ArrayExpressionBlock1Block1 = pr_ArrayExpressionBlock1Block1();
				_localctx._arrayExpressionBlock1Block1Antlr1.Add(_localctx._pr_ArrayExpressionBlock1Block1);
				}
				}
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentsBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_AnnotationArgumentContext argumentsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_AnnotationArgumentContext pr_AnnotationArgument() {
			return GetRuleContext<Pr_AnnotationArgumentContext>(0);
		}
		public Pr_AnnotationArgumentsBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgumentsBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgumentsBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentsBlock1Context pr_AnnotationArgumentsBlock1() {
		Pr_AnnotationArgumentsBlock1Context _localctx = new Pr_AnnotationArgumentsBlock1Context(Context, State);
		EnterRule(_localctx, 72, RULE_pr_AnnotationArgumentsBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413;
			_localctx.tComma = Match(LR_TComma);
			State = 414;
			_localctx.argumentsAntlr1 = pr_AnnotationArgument();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_AnnotationArgumentBlock1Context : ParserRuleContext {
		public Pr_IdentifierContext namedParameterAntlr1;
		public IToken tColon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(CompilerParser.LR_TColon, 0); }
		public Pr_AnnotationArgumentBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_AnnotationArgumentBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_AnnotationArgumentBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_AnnotationArgumentBlock1Context pr_AnnotationArgumentBlock1() {
		Pr_AnnotationArgumentBlock1Context _localctx = new Pr_AnnotationArgumentBlock1Context(Context, State);
		EnterRule(_localctx, 74, RULE_pr_AnnotationArgumentBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			_localctx.namedParameterAntlr1 = pr_Identifier();
			State = 417;
			_localctx.tColon = Match(LR_TColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierBlock1Context : ParserRuleContext {
		public IToken tDot;
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(CompilerParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierBlock1Context pr_QualifierBlock1() {
		Pr_QualifierBlock1Context _localctx = new Pr_QualifierBlock1Context(Context, State);
		EnterRule(_localctx, 76, RULE_pr_QualifierBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419;
			_localctx.tDot = Match(LR_TDot);
			State = 420;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_QualifierListBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierListBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierListBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListBlock1Context pr_QualifierListBlock1() {
		Pr_QualifierListBlock1Context _localctx = new Pr_QualifierListBlock1Context(Context, State);
		EnterRule(_localctx, 78, RULE_pr_QualifierListBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			_localctx.tComma = Match(LR_TComma);
			State = 423;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PAlternativeBlock1Block1Context : ParserRuleContext {
		public IToken kReturns;
		public Pr_ReturnTypeQualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_PAlternativeBlock1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PAlternativeBlock1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PAlternativeBlock1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PAlternativeBlock1Block1Context pr_PAlternativeBlock1Block1() {
		Pr_PAlternativeBlock1Block1Context _localctx = new Pr_PAlternativeBlock1Block1Context(Context, State);
		EnterRule(_localctx, 80, RULE_pr_PAlternativeBlock1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			_localctx.kReturns = Match(LR_KReturns);
			State = 426;
			_localctx.returnTypeAntlr1 = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_LexerRuleBlock1Alt1Block1Context : ParserRuleContext {
		public IToken kReturns;
		public Pr_ReturnTypeQualifierContext returnTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReturns() { return GetToken(CompilerParser.LR_KReturns, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ReturnTypeQualifierContext pr_ReturnTypeQualifier() {
			return GetRuleContext<Pr_ReturnTypeQualifierContext>(0);
		}
		public Pr_LexerRuleBlock1Alt1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_LexerRuleBlock1Alt1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_LexerRuleBlock1Alt1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_LexerRuleBlock1Alt1Block1Context pr_LexerRuleBlock1Alt1Block1() {
		Pr_LexerRuleBlock1Alt1Block1Context _localctx = new Pr_LexerRuleBlock1Alt1Block1Context(Context, State);
		EnterRule(_localctx, 82, RULE_pr_LexerRuleBlock1Alt1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 428;
			_localctx.kReturns = Match(LR_KReturns);
			State = 429;
			_localctx.returnTypeAntlr1 = pr_ReturnTypeQualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ArrayExpressionBlock1Block1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_ExpressionContext itemsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(CompilerParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ExpressionContext pr_Expression() {
			return GetRuleContext<Pr_ExpressionContext>(0);
		}
		public Pr_ArrayExpressionBlock1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ArrayExpressionBlock1Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerParserVisitor<TResult> typedVisitor = visitor as ICompilerParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayExpressionBlock1Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ArrayExpressionBlock1Block1Context pr_ArrayExpressionBlock1Block1() {
		Pr_ArrayExpressionBlock1Block1Context _localctx = new Pr_ArrayExpressionBlock1Block1Context(Context, State);
		EnterRule(_localctx, 84, RULE_pr_ArrayExpressionBlock1Block1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_localctx.tComma = Match(LR_TComma);
			State = 432;
			_localctx.itemsAntlr1 = pr_Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,51,435,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,1,0,1,0,1,0,5,0,91,8,0,10,0,12,0,94,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
		1,1,2,1,2,5,2,105,8,2,10,2,12,2,108,9,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
		5,5,5,118,8,5,10,5,12,5,121,9,5,1,5,1,5,1,5,1,5,5,5,127,8,5,10,5,12,5,
		130,9,5,1,5,1,5,1,5,5,5,135,8,5,10,5,12,5,138,9,5,1,5,1,5,1,5,1,5,1,5,
		5,5,145,8,5,10,5,12,5,148,9,5,1,5,1,5,1,5,5,5,153,8,5,10,5,12,5,156,9,
		5,1,5,1,5,1,5,1,5,5,5,162,8,5,10,5,12,5,165,9,5,1,5,1,5,3,5,169,8,5,1,
		6,3,6,172,8,6,1,6,5,6,175,8,6,10,6,12,6,178,9,6,1,6,3,6,181,8,6,1,7,3,
		7,184,8,7,1,7,5,7,187,8,7,10,7,12,7,190,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,3,7,199,8,7,1,8,1,8,1,8,5,8,204,8,8,10,8,12,8,207,9,8,1,8,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,219,8,8,10,8,12,8,222,9,8,1,8,1,8,3,8,226,
		8,8,1,9,5,9,229,8,9,10,9,12,9,232,9,9,1,10,3,10,235,8,10,1,10,1,10,1,10,
		1,10,1,10,1,10,1,10,3,10,244,8,10,1,11,1,11,1,11,5,11,249,8,11,10,11,12,
		11,252,9,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,262,8,11,1,12,
		1,12,1,12,1,12,1,12,3,12,269,8,12,1,12,1,12,1,12,1,12,3,12,275,8,12,3,
		12,277,8,12,1,13,1,13,1,13,3,13,282,8,13,1,13,1,13,1,14,1,14,1,14,3,14,
		289,8,14,1,14,1,14,1,15,1,15,1,15,5,15,296,8,15,10,15,12,15,299,9,15,1,
		15,1,15,1,16,3,16,304,8,16,1,16,1,16,1,17,1,17,3,17,310,8,17,1,18,1,18,
		3,18,314,8,18,1,19,1,19,1,20,1,20,5,20,320,8,20,10,20,12,20,323,9,20,1,
		21,1,21,5,21,327,8,21,10,21,12,21,330,9,21,1,22,1,22,3,22,334,8,22,1,23,
		5,23,337,8,23,10,23,12,23,340,9,23,1,24,1,24,1,24,1,24,1,24,3,24,347,8,
		24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,5,28,359,8,28,10,
		28,12,28,362,9,28,1,28,1,28,1,28,3,28,367,8,28,1,28,1,28,1,29,1,29,1,29,
		1,30,5,30,375,8,30,10,30,12,30,378,9,30,1,30,1,30,1,30,1,30,1,30,3,30,
		385,8,30,1,31,1,31,1,31,1,32,1,32,1,32,3,32,393,8,32,1,32,1,32,1,32,1,
		32,3,32,399,8,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,5,35,409,8,35,
		10,35,12,35,412,9,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,
		1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,0,0,43,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,0,0,460,0,86,1,0,0,0,2,
		98,1,0,0,0,4,102,1,0,0,0,6,109,1,0,0,0,8,114,1,0,0,0,10,168,1,0,0,0,12,
		171,1,0,0,0,14,183,1,0,0,0,16,225,1,0,0,0,18,230,1,0,0,0,20,234,1,0,0,
		0,22,261,1,0,0,0,24,276,1,0,0,0,26,278,1,0,0,0,28,285,1,0,0,0,30,292,1,
		0,0,0,32,303,1,0,0,0,34,309,1,0,0,0,36,313,1,0,0,0,38,315,1,0,0,0,40,317,
		1,0,0,0,42,324,1,0,0,0,44,333,1,0,0,0,46,338,1,0,0,0,48,346,1,0,0,0,50,
		348,1,0,0,0,52,351,1,0,0,0,54,354,1,0,0,0,56,360,1,0,0,0,58,370,1,0,0,
		0,60,376,1,0,0,0,62,386,1,0,0,0,64,398,1,0,0,0,66,400,1,0,0,0,68,403,1,
		0,0,0,70,406,1,0,0,0,72,413,1,0,0,0,74,416,1,0,0,0,76,419,1,0,0,0,78,422,
		1,0,0,0,80,425,1,0,0,0,82,428,1,0,0,0,84,431,1,0,0,0,86,87,5,3,0,0,87,
		88,3,40,20,0,88,92,5,4,0,0,89,91,3,2,1,0,90,89,1,0,0,0,91,94,1,0,0,0,92,
		90,1,0,0,0,92,93,1,0,0,0,93,95,1,0,0,0,94,92,1,0,0,0,95,96,3,4,2,0,96,
		97,5,0,0,1,97,1,1,0,0,0,98,99,5,5,0,0,99,100,3,40,20,0,100,101,5,4,0,0,
		101,3,1,0,0,0,102,106,3,6,3,0,103,105,3,10,5,0,104,103,1,0,0,0,105,108,
		1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,5,1,0,0,0,108,106,1,0,0,0,
		109,110,5,6,0,0,110,111,3,38,19,0,111,112,5,4,0,0,112,113,3,8,4,0,113,
		7,1,0,0,0,114,115,3,46,23,0,115,9,1,0,0,0,116,118,3,26,13,0,117,116,1,
		0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,122,1,0,0,0,
		121,119,1,0,0,0,122,123,3,48,24,0,123,124,5,8,0,0,124,128,3,12,6,0,125,
		127,3,50,25,0,126,125,1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,
		1,0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,132,5,4,0,0,132,169,1,0,0,
		0,133,135,3,26,13,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,
		137,1,0,0,0,137,139,1,0,0,0,138,136,1,0,0,0,139,140,5,10,0,0,140,141,3,
		38,19,0,141,142,5,8,0,0,142,146,3,12,6,0,143,145,3,52,26,0,144,143,1,0,
		0,0,145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,
		146,1,0,0,0,149,150,5,4,0,0,150,169,1,0,0,0,151,153,3,28,14,0,152,151,
		1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,157,1,0,0,
		0,156,154,1,0,0,0,157,158,3,64,32,0,158,159,5,8,0,0,159,163,3,18,9,0,160,
		162,3,66,33,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,
		1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,5,4,0,0,167,169,1,0,0,
		0,168,119,1,0,0,0,168,136,1,0,0,0,168,154,1,0,0,0,169,11,1,0,0,0,170,172,
		3,56,28,0,171,170,1,0,0,0,171,172,1,0,0,0,172,176,1,0,0,0,173,175,3,14,
		7,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,
		180,1,0,0,0,178,176,1,0,0,0,179,181,3,58,29,0,180,179,1,0,0,0,180,181,
		1,0,0,0,181,13,1,0,0,0,182,184,3,60,30,0,183,182,1,0,0,0,183,184,1,0,0,
		0,184,188,1,0,0,0,185,187,3,26,13,0,186,185,1,0,0,0,187,190,1,0,0,0,188,
		186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,188,1,0,0,0,191,198,3,
		16,8,0,192,199,5,35,0,0,193,199,5,36,0,0,194,199,5,37,0,0,195,199,5,38,
		0,0,196,199,5,39,0,0,197,199,5,40,0,0,198,192,1,0,0,0,198,193,1,0,0,0,
		198,194,1,0,0,0,198,195,1,0,0,0,198,196,1,0,0,0,198,197,1,0,0,0,198,199,
		1,0,0,0,199,15,1,0,0,0,200,201,5,11,0,0,201,205,3,12,6,0,202,204,3,54,
		27,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,
		208,1,0,0,0,207,205,1,0,0,0,208,209,5,12,0,0,209,226,1,0,0,0,210,226,5,
		18,0,0,211,226,5,46,0,0,212,226,3,44,22,0,213,214,5,15,0,0,214,226,3,36,
		18,0,215,216,5,16,0,0,216,220,3,36,18,0,217,219,3,62,31,0,218,217,1,0,
		0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,
		220,1,0,0,0,223,224,5,17,0,0,224,226,1,0,0,0,225,200,1,0,0,0,225,210,1,
		0,0,0,225,211,1,0,0,0,225,212,1,0,0,0,225,213,1,0,0,0,225,215,1,0,0,0,
		226,17,1,0,0,0,227,229,3,20,10,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,
		1,0,0,0,230,231,1,0,0,0,231,19,1,0,0,0,232,230,1,0,0,0,233,235,5,22,0,
		0,234,233,1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,243,3,22,11,0,237,
		244,5,35,0,0,238,244,5,36,0,0,239,244,5,37,0,0,240,244,5,38,0,0,241,244,
		5,39,0,0,242,244,5,40,0,0,243,237,1,0,0,0,243,238,1,0,0,0,243,239,1,0,
		0,0,243,240,1,0,0,0,243,241,1,0,0,0,243,242,1,0,0,0,243,244,1,0,0,0,244,
		21,1,0,0,0,245,246,5,11,0,0,246,250,3,18,9,0,247,249,3,68,34,0,248,247,
		1,0,0,0,249,252,1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,
		0,252,250,1,0,0,0,253,254,5,12,0,0,254,262,1,0,0,0,255,262,5,46,0,0,256,
		262,5,23,0,0,257,258,5,46,0,0,258,259,5,24,0,0,259,262,5,46,0,0,260,262,
		3,44,22,0,261,245,1,0,0,0,261,255,1,0,0,0,261,256,1,0,0,0,261,257,1,0,
		0,0,261,260,1,0,0,0,262,23,1,0,0,0,263,277,5,41,0,0,264,277,5,46,0,0,265,
		277,3,40,20,0,266,268,5,28,0,0,267,269,3,70,35,0,268,267,1,0,0,0,268,269,
		1,0,0,0,269,270,1,0,0,0,270,277,5,17,0,0,271,275,5,25,0,0,272,275,5,26,
		0,0,273,275,5,27,0,0,274,271,1,0,0,0,274,272,1,0,0,0,274,273,1,0,0,0,275,
		277,1,0,0,0,276,263,1,0,0,0,276,264,1,0,0,0,276,265,1,0,0,0,276,266,1,
		0,0,0,276,274,1,0,0,0,277,25,1,0,0,0,278,279,5,29,0,0,279,281,3,40,20,
		0,280,282,3,30,15,0,281,280,1,0,0,0,281,282,1,0,0,0,282,283,1,0,0,0,283,
		284,5,30,0,0,284,27,1,0,0,0,285,286,5,29,0,0,286,288,3,40,20,0,287,289,
		3,30,15,0,288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,5,30,
		0,0,291,29,1,0,0,0,292,293,5,11,0,0,293,297,3,32,16,0,294,296,3,72,36,
		0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,
		300,1,0,0,0,299,297,1,0,0,0,300,301,5,12,0,0,301,31,1,0,0,0,302,304,3,
		74,37,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,306,3,24,12,
		0,306,33,1,0,0,0,307,310,5,43,0,0,308,310,3,44,22,0,309,307,1,0,0,0,309,
		308,1,0,0,0,310,35,1,0,0,0,311,314,5,43,0,0,312,314,3,40,20,0,313,311,
		1,0,0,0,313,312,1,0,0,0,314,37,1,0,0,0,315,316,3,44,22,0,316,39,1,0,0,
		0,317,321,3,44,22,0,318,320,3,76,38,0,319,318,1,0,0,0,320,323,1,0,0,0,
		321,319,1,0,0,0,321,322,1,0,0,0,322,41,1,0,0,0,323,321,1,0,0,0,324,328,
		3,40,20,0,325,327,3,78,39,0,326,325,1,0,0,0,327,330,1,0,0,0,328,326,1,
		0,0,0,328,329,1,0,0,0,329,43,1,0,0,0,330,328,1,0,0,0,331,334,5,44,0,0,
		332,334,5,45,0,0,333,331,1,0,0,0,333,332,1,0,0,0,334,45,1,0,0,0,335,337,
		3,10,5,0,336,335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,
		0,339,47,1,0,0,0,340,338,1,0,0,0,341,347,3,34,17,0,342,343,3,44,22,0,343,
		344,5,7,0,0,344,345,3,36,18,0,345,347,1,0,0,0,346,341,1,0,0,0,346,342,
		1,0,0,0,347,49,1,0,0,0,348,349,5,9,0,0,349,350,3,12,6,0,350,51,1,0,0,0,
		351,352,5,9,0,0,352,353,3,12,6,0,353,53,1,0,0,0,354,355,5,9,0,0,355,356,
		3,12,6,0,356,55,1,0,0,0,357,359,3,26,13,0,358,357,1,0,0,0,359,362,1,0,
		0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,363,1,0,0,0,362,360,1,0,0,0,363,
		364,5,13,0,0,364,366,3,38,19,0,365,367,3,80,40,0,366,365,1,0,0,0,366,367,
		1,0,0,0,367,368,1,0,0,0,368,369,5,8,0,0,369,57,1,0,0,0,370,371,5,14,0,
		0,371,372,3,24,12,0,372,59,1,0,0,0,373,375,3,26,13,0,374,373,1,0,0,0,375,
		378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,379,1,0,0,0,378,376,1,
		0,0,0,379,384,3,44,22,0,380,385,5,31,0,0,381,385,5,32,0,0,382,385,5,33,
		0,0,383,385,5,34,0,0,384,380,1,0,0,0,384,381,1,0,0,0,384,382,1,0,0,0,384,
		383,1,0,0,0,385,61,1,0,0,0,386,387,5,1,0,0,387,388,3,36,18,0,388,63,1,
		0,0,0,389,390,5,19,0,0,390,392,3,38,19,0,391,393,3,82,41,0,392,391,1,0,
		0,0,392,393,1,0,0,0,393,399,1,0,0,0,394,395,5,20,0,0,395,399,3,38,19,0,
		396,397,5,21,0,0,397,399,3,38,19,0,398,389,1,0,0,0,398,394,1,0,0,0,398,
		396,1,0,0,0,399,65,1,0,0,0,400,401,5,9,0,0,401,402,3,18,9,0,402,67,1,0,
		0,0,403,404,5,9,0,0,404,405,3,18,9,0,405,69,1,0,0,0,406,410,3,24,12,0,
		407,409,3,84,42,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,1,0,0,0,410,
		411,1,0,0,0,411,71,1,0,0,0,412,410,1,0,0,0,413,414,5,1,0,0,414,415,3,32,
		16,0,415,73,1,0,0,0,416,417,3,44,22,0,417,418,5,8,0,0,418,75,1,0,0,0,419,
		420,5,23,0,0,420,421,3,44,22,0,421,77,1,0,0,0,422,423,5,1,0,0,423,424,
		3,40,20,0,424,79,1,0,0,0,425,426,5,7,0,0,426,427,3,36,18,0,427,81,1,0,
		0,0,428,429,5,7,0,0,429,430,3,36,18,0,430,83,1,0,0,0,431,432,5,1,0,0,432,
		433,3,24,12,0,433,85,1,0,0,0,44,92,106,119,128,136,146,154,163,168,171,
		176,180,183,188,198,205,220,225,230,234,243,250,261,268,274,276,281,288,
		297,303,309,313,321,328,333,338,346,360,366,376,384,392,398,410
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaCompiler.Compiler
