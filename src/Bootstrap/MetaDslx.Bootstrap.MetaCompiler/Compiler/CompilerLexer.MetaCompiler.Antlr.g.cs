//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CompilerLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaCompiler.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CompilerLexer : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_KNamespace=2, LR_TSemicolon=3, LR_KUsing=4, LR_KMetamodel=5, 
		LR_KLanguage=6, LR_KReturns=7, LR_TColon=8, LR_TBar=9, LR_KBlock=10, LR_TLBrace=11, 
		LR_TRBrace=12, LR_TEqGt=13, LR_KNull=14, LR_KTrue=15, LR_KFalse=16, LR_TDot=17, 
		LR_TInteger=18, LR_TDecimal=19, LR_TIdentifier=20, LR_TString=21, LR_TWhitespace=22, 
		LR_TLineEnd=23, LR_TSingleLineComment=24, LR_TMultiLineComment=25, LR_TInvalidToken=26;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KLanguage", "LR_KReturns", "LR_TColon", "LR_TBar", "LR_KBlock", "LR_TLBrace", 
		"LR_TRBrace", "LR_TEqGt", "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TDot", 
		"LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken"
	};


	public CompilerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CompilerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'namespace'", "';'", "'using'", "'metamodel'", "'language'", 
		"'returns'", "':'", "'|'", "'block'", "'{'", "'}'", "'=>'", "'null'", 
		"'true'", "'false'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KLanguage", "LR_KReturns", "LR_TColon", "LR_TBar", "LR_KBlock", "LR_TLBrace", 
		"LR_TRBrace", "LR_TEqGt", "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TDot", 
		"LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CompilerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,26,231,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
		1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,5,17,139,8,
		17,10,17,12,17,142,9,17,3,17,144,8,17,1,18,1,18,1,18,5,18,149,8,18,10,
		18,12,18,152,9,18,3,18,154,8,18,1,18,1,18,4,18,158,8,18,11,18,12,18,159,
		1,19,4,19,163,8,19,11,19,12,19,164,1,19,5,19,168,8,19,10,19,12,19,171,
		9,19,1,20,1,20,5,20,175,8,20,10,20,12,20,178,9,20,1,20,1,20,1,20,5,20,
		183,8,20,10,20,12,20,186,9,20,1,20,3,20,189,8,20,1,21,4,21,192,8,21,11,
		21,12,21,193,1,21,1,21,1,22,1,22,1,22,3,22,201,8,22,1,22,1,22,1,23,1,23,
		1,23,1,23,5,23,209,8,23,10,23,12,23,212,9,23,1,23,1,23,1,24,1,24,1,24,
		1,24,5,24,220,8,24,10,24,12,24,223,9,24,1,24,1,24,1,24,1,24,1,24,1,25,
		1,25,3,176,184,221,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
		21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
		45,23,47,24,49,25,51,26,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
		95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,244,0,1,1,0,0,0,0,3,1,0,0,0,0,
		5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
		0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
		1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
		0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,55,1,0,0,0,5,65,1,0,0,0,7,67,1,0,0,
		0,9,73,1,0,0,0,11,83,1,0,0,0,13,92,1,0,0,0,15,100,1,0,0,0,17,102,1,0,0,
		0,19,104,1,0,0,0,21,110,1,0,0,0,23,112,1,0,0,0,25,114,1,0,0,0,27,117,1,
		0,0,0,29,122,1,0,0,0,31,127,1,0,0,0,33,133,1,0,0,0,35,143,1,0,0,0,37,153,
		1,0,0,0,39,162,1,0,0,0,41,188,1,0,0,0,43,191,1,0,0,0,45,200,1,0,0,0,47,
		204,1,0,0,0,49,215,1,0,0,0,51,229,1,0,0,0,53,54,5,44,0,0,54,2,1,0,0,0,
		55,56,5,110,0,0,56,57,5,97,0,0,57,58,5,109,0,0,58,59,5,101,0,0,59,60,5,
		115,0,0,60,61,5,112,0,0,61,62,5,97,0,0,62,63,5,99,0,0,63,64,5,101,0,0,
		64,4,1,0,0,0,65,66,5,59,0,0,66,6,1,0,0,0,67,68,5,117,0,0,68,69,5,115,0,
		0,69,70,5,105,0,0,70,71,5,110,0,0,71,72,5,103,0,0,72,8,1,0,0,0,73,74,5,
		109,0,0,74,75,5,101,0,0,75,76,5,116,0,0,76,77,5,97,0,0,77,78,5,109,0,0,
		78,79,5,111,0,0,79,80,5,100,0,0,80,81,5,101,0,0,81,82,5,108,0,0,82,10,
		1,0,0,0,83,84,5,108,0,0,84,85,5,97,0,0,85,86,5,110,0,0,86,87,5,103,0,0,
		87,88,5,117,0,0,88,89,5,97,0,0,89,90,5,103,0,0,90,91,5,101,0,0,91,12,1,
		0,0,0,92,93,5,114,0,0,93,94,5,101,0,0,94,95,5,116,0,0,95,96,5,117,0,0,
		96,97,5,114,0,0,97,98,5,110,0,0,98,99,5,115,0,0,99,14,1,0,0,0,100,101,
		5,58,0,0,101,16,1,0,0,0,102,103,5,124,0,0,103,18,1,0,0,0,104,105,5,98,
		0,0,105,106,5,108,0,0,106,107,5,111,0,0,107,108,5,99,0,0,108,109,5,107,
		0,0,109,20,1,0,0,0,110,111,5,123,0,0,111,22,1,0,0,0,112,113,5,125,0,0,
		113,24,1,0,0,0,114,115,5,61,0,0,115,116,5,62,0,0,116,26,1,0,0,0,117,118,
		5,110,0,0,118,119,5,117,0,0,119,120,5,108,0,0,120,121,5,108,0,0,121,28,
		1,0,0,0,122,123,5,116,0,0,123,124,5,114,0,0,124,125,5,117,0,0,125,126,
		5,101,0,0,126,30,1,0,0,0,127,128,5,102,0,0,128,129,5,97,0,0,129,130,5,
		108,0,0,130,131,5,115,0,0,131,132,5,101,0,0,132,32,1,0,0,0,133,134,5,46,
		0,0,134,34,1,0,0,0,135,144,5,48,0,0,136,140,2,49,57,0,137,139,2,48,57,
		0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,
		144,1,0,0,0,142,140,1,0,0,0,143,135,1,0,0,0,143,136,1,0,0,0,144,36,1,0,
		0,0,145,154,5,48,0,0,146,150,2,49,57,0,147,149,2,48,57,0,148,147,1,0,0,
		0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,154,1,0,0,0,152,
		150,1,0,0,0,153,145,1,0,0,0,153,146,1,0,0,0,154,155,1,0,0,0,155,157,5,
		46,0,0,156,158,2,48,57,0,157,156,1,0,0,0,158,159,1,0,0,0,159,157,1,0,0,
		0,159,160,1,0,0,0,160,38,1,0,0,0,161,163,7,0,0,0,162,161,1,0,0,0,163,164,
		1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,169,1,0,0,0,166,168,7,1,0,
		0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,
		40,1,0,0,0,171,169,1,0,0,0,172,176,5,34,0,0,173,175,9,0,0,0,174,173,1,
		0,0,0,175,178,1,0,0,0,176,177,1,0,0,0,176,174,1,0,0,0,177,179,1,0,0,0,
		178,176,1,0,0,0,179,189,5,34,0,0,180,184,5,39,0,0,181,183,9,0,0,0,182,
		181,1,0,0,0,183,186,1,0,0,0,184,185,1,0,0,0,184,182,1,0,0,0,185,187,1,
		0,0,0,186,184,1,0,0,0,187,189,5,39,0,0,188,172,1,0,0,0,188,180,1,0,0,0,
		189,42,1,0,0,0,190,192,7,2,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,
		1,0,0,0,193,194,1,0,0,0,194,195,1,0,0,0,195,196,6,21,0,0,196,44,1,0,0,
		0,197,198,5,13,0,0,198,201,5,10,0,0,199,201,7,3,0,0,200,197,1,0,0,0,200,
		199,1,0,0,0,201,202,1,0,0,0,202,203,6,22,0,0,203,46,1,0,0,0,204,205,5,
		47,0,0,205,206,5,47,0,0,206,210,1,0,0,0,207,209,8,3,0,0,208,207,1,0,0,
		0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,
		210,1,0,0,0,213,214,6,23,0,0,214,48,1,0,0,0,215,216,5,47,0,0,216,217,5,
		42,0,0,217,221,1,0,0,0,218,220,9,0,0,0,219,218,1,0,0,0,220,223,1,0,0,0,
		221,222,1,0,0,0,221,219,1,0,0,0,222,224,1,0,0,0,223,221,1,0,0,0,224,225,
		5,42,0,0,225,226,5,47,0,0,226,227,1,0,0,0,227,228,6,24,0,0,228,50,1,0,
		0,0,229,230,9,0,0,0,230,52,1,0,0,0,15,0,140,143,150,153,159,164,169,176,
		184,188,193,200,210,221,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaCompiler.Compiler
