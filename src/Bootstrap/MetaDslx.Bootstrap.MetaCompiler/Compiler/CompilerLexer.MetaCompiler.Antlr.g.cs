//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CompilerLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaCompiler.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CompilerLexer : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_KNamespace=2, LR_TSemicolon=3, LR_KUsing=4, LR_TDot=5, 
		LR_TInteger=6, LR_TDecimal=7, LR_TIdentifier=8, LR_TString=9, LR_TWhitespace=10, 
		LR_TLineEnd=11, LR_TSingleLineComment=12, LR_TMultiLineComment=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_TDot", 
		"LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment"
	};


	public CompilerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CompilerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'namespace'", "';'", "'using'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_TDot", 
		"LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CompilerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,134,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,
		1,4,1,5,1,5,1,5,5,5,53,8,5,10,5,12,5,56,9,5,3,5,58,8,5,1,6,1,6,1,6,5,6,
		63,8,6,10,6,12,6,66,9,6,3,6,68,8,6,1,6,1,6,4,6,72,8,6,11,6,12,6,73,1,7,
		4,7,77,8,7,11,7,12,7,78,1,7,5,7,82,8,7,10,7,12,7,85,9,7,1,8,1,8,5,8,89,
		8,8,10,8,12,8,92,9,8,1,8,1,8,1,9,4,9,97,8,9,11,9,12,9,98,1,9,1,9,1,10,
		1,10,1,10,3,10,106,8,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,114,8,11,10,
		11,12,11,117,9,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,125,8,12,10,12,12,
		12,128,9,12,1,12,1,12,1,12,1,12,1,12,2,90,126,0,13,1,1,3,2,5,3,7,4,9,5,
		11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,1,0,4,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,145,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,39,1,0,0,0,7,41,1,0,0,0,9,47,
		1,0,0,0,11,57,1,0,0,0,13,67,1,0,0,0,15,76,1,0,0,0,17,86,1,0,0,0,19,96,
		1,0,0,0,21,105,1,0,0,0,23,109,1,0,0,0,25,120,1,0,0,0,27,28,5,44,0,0,28,
		2,1,0,0,0,29,30,5,110,0,0,30,31,5,97,0,0,31,32,5,109,0,0,32,33,5,101,0,
		0,33,34,5,115,0,0,34,35,5,112,0,0,35,36,5,97,0,0,36,37,5,99,0,0,37,38,
		5,101,0,0,38,4,1,0,0,0,39,40,5,59,0,0,40,6,1,0,0,0,41,42,5,117,0,0,42,
		43,5,115,0,0,43,44,5,105,0,0,44,45,5,110,0,0,45,46,5,103,0,0,46,8,1,0,
		0,0,47,48,5,46,0,0,48,10,1,0,0,0,49,58,5,48,0,0,50,54,2,49,57,0,51,53,
		2,48,57,0,52,51,1,0,0,0,53,56,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,58,
		1,0,0,0,56,54,1,0,0,0,57,49,1,0,0,0,57,50,1,0,0,0,58,12,1,0,0,0,59,68,
		5,48,0,0,60,64,2,49,57,0,61,63,2,48,57,0,62,61,1,0,0,0,63,66,1,0,0,0,64,
		62,1,0,0,0,64,65,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,67,59,1,0,0,0,67,
		60,1,0,0,0,68,69,1,0,0,0,69,71,5,46,0,0,70,72,2,48,57,0,71,70,1,0,0,0,
		72,73,1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,14,1,0,0,0,75,77,7,0,0,0,
		76,75,1,0,0,0,77,78,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,83,1,0,0,0,
		80,82,7,1,0,0,81,80,1,0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,
		84,16,1,0,0,0,85,83,1,0,0,0,86,90,5,34,0,0,87,89,9,0,0,0,88,87,1,0,0,0,
		89,92,1,0,0,0,90,91,1,0,0,0,90,88,1,0,0,0,91,93,1,0,0,0,92,90,1,0,0,0,
		93,94,5,34,0,0,94,18,1,0,0,0,95,97,7,2,0,0,96,95,1,0,0,0,97,98,1,0,0,0,
		98,96,1,0,0,0,98,99,1,0,0,0,99,100,1,0,0,0,100,101,6,9,0,0,101,20,1,0,
		0,0,102,103,5,13,0,0,103,106,5,10,0,0,104,106,7,3,0,0,105,102,1,0,0,0,
		105,104,1,0,0,0,106,107,1,0,0,0,107,108,6,10,0,0,108,22,1,0,0,0,109,110,
		5,47,0,0,110,111,5,47,0,0,111,115,1,0,0,0,112,114,8,3,0,0,113,112,1,0,
		0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,116,1,0,0,0,116,118,1,0,0,0,117,
		115,1,0,0,0,118,119,6,11,0,0,119,24,1,0,0,0,120,121,5,47,0,0,121,122,5,
		42,0,0,122,126,1,0,0,0,123,125,9,0,0,0,124,123,1,0,0,0,125,128,1,0,0,0,
		126,127,1,0,0,0,126,124,1,0,0,0,127,129,1,0,0,0,128,126,1,0,0,0,129,130,
		5,42,0,0,130,131,5,47,0,0,131,132,1,0,0,0,132,133,6,12,0,0,133,26,1,0,
		0,0,13,0,54,57,64,67,73,78,83,90,98,105,115,126,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaCompiler.Compiler
