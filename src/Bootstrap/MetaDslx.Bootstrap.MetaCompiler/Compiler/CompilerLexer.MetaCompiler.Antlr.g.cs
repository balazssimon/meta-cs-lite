//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CompilerLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Bootstrap.MetaCompiler.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class CompilerLexer : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_Utf8Bom=2, LR_KNamespace=3, LR_TSemicolon=4, LR_KUsing=5, 
		LR_KMetamodel=6, LR_KSymbols=7, LR_KLanguage=8, LR_KBlock=9, LR_KReturns=10, 
		LR_TColon=11, LR_TBar=12, LR_TLBrace=13, LR_TRBrace=14, LR_TEqGt=15, LR_THash=16, 
		LR_THashLBrace=17, LR_KEof=18, LR_TLParen=19, LR_TRParen=20, LR_KToken=21, 
		LR_KHidden=22, LR_KFragment=23, LR_TTilde=24, LR_TDot=25, LR_TDotDot=26, 
		LR_KNull=27, LR_KTrue=28, LR_KFalse=29, LR_TLBracket=30, LR_TRBracket=31, 
		LR_TEq=32, LR_TQuestionEq=33, LR_TExclEq=34, LR_TPlusEq=35, LR_TQuestion=36, 
		LR_TAsterisk=37, LR_TPlus=38, LR_TQuestionQuestion=39, LR_TAsteriskQuestion=40, 
		LR_TPlusQuestion=41, LR_TInteger=42, LR_TDecimal=43, LR_TIdentifier=44, 
		LR_TString=45, LR_TWhitespace=46, LR_TLineEnd=47, LR_TSingleLineComment=48, 
		LR_TMultiLineComment=49, LR_TInvalidToken=50;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_TComma", "LR_Utf8Bom", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", 
		"LR_KMetamodel", "LR_KSymbols", "LR_KLanguage", "LR_KBlock", "LR_KReturns", 
		"LR_TColon", "LR_TBar", "LR_TLBrace", "LR_TRBrace", "LR_TEqGt", "LR_THash", 
		"LR_THashLBrace", "LR_KEof", "LR_TLParen", "LR_TRParen", "LR_KToken", 
		"LR_KHidden", "LR_KFragment", "LR_TTilde", "LR_TDot", "LR_TDotDot", "LR_KNull", 
		"LR_KTrue", "LR_KFalse", "LR_TLBracket", "LR_TRBracket", "LR_TEq", "LR_TQuestionEq", 
		"LR_TExclEq", "LR_TPlusEq", "LR_TQuestion", "LR_TAsterisk", "LR_TPlus", 
		"LR_TQuestionQuestion", "LR_TAsteriskQuestion", "LR_TPlusQuestion", "LR_TInteger", 
		"LR_TDecimal", "LR_TIdentifier", "LR_TString", "LR_DoubleQuoteTextCharacter", 
		"LR_DoubleQuoteTextSimple", "LR_SingleQuoteTextCharacter", "LR_SingleQuoteTextSimple", 
		"LR_CharacterEscapeSimple", "LR_CharacterEscapeSimpleCharacter", "LR_CharacterEscapeUnicode", 
		"LR_HexDigit", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment", "LR_TInvalidToken"
	};


	public CompilerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public CompilerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", null, "'namespace'", "';'", "'using'", "'metamodel'", "'symbols'", 
		"'language'", "'block'", "'returns'", "':'", "'|'", "'{'", "'}'", "'=>'", 
		"'#'", "'#{'", "'eof'", "'('", "')'", "'token'", "'hidden'", "'fragment'", 
		"'~'", "'.'", "'..'", "'null'", "'true'", "'false'", "'['", "']'", "'='", 
		"'?='", "'!='", "'+='", "'?'", "'*'", "'+'", "'??'", "'*?'", "'+?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_Utf8Bom", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", 
		"LR_KMetamodel", "LR_KSymbols", "LR_KLanguage", "LR_KBlock", "LR_KReturns", 
		"LR_TColon", "LR_TBar", "LR_TLBrace", "LR_TRBrace", "LR_TEqGt", "LR_THash", 
		"LR_THashLBrace", "LR_KEof", "LR_TLParen", "LR_TRParen", "LR_KToken", 
		"LR_KHidden", "LR_KFragment", "LR_TTilde", "LR_TDot", "LR_TDotDot", "LR_KNull", 
		"LR_KTrue", "LR_KFalse", "LR_TLBracket", "LR_TRBracket", "LR_TEq", "LR_TQuestionEq", 
		"LR_TExclEq", "LR_TPlusEq", "LR_TQuestion", "LR_TAsterisk", "LR_TPlus", 
		"LR_TQuestionQuestion", "LR_TAsteriskQuestion", "LR_TPlusQuestion", "LR_TInteger", 
		"LR_TDecimal", "LR_TIdentifier", "LR_TString", "LR_TWhitespace", "LR_TLineEnd", 
		"LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CompilerLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static CompilerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,50,422,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,
		1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,
		1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,
		1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,
		1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,
		1,40,1,41,1,41,1,41,5,41,287,8,41,10,41,12,41,290,9,41,3,41,292,8,41,1,
		42,1,42,1,42,5,42,297,8,42,10,42,12,42,300,9,42,3,42,302,8,42,1,42,1,42,
		4,42,306,8,42,11,42,12,42,307,1,43,4,43,311,8,43,11,43,12,43,312,1,43,
		5,43,316,8,43,10,43,12,43,319,9,43,1,44,1,44,5,44,323,8,44,10,44,12,44,
		326,9,44,1,44,1,44,1,44,5,44,331,8,44,10,44,12,44,334,9,44,1,44,3,44,337,
		8,44,1,45,1,45,1,45,3,45,342,8,45,1,46,1,46,1,47,1,47,1,47,3,47,349,8,
		47,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,
		51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,
		51,378,8,51,1,52,1,52,1,53,4,53,383,8,53,11,53,12,53,384,1,53,1,53,1,54,
		1,54,1,54,3,54,392,8,54,1,54,1,54,1,55,1,55,1,55,1,55,5,55,400,8,55,10,
		55,12,55,403,9,55,1,55,1,55,1,56,1,56,1,56,1,56,5,56,411,8,56,10,56,12,
		56,414,9,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,412,0,58,1,1,3,2,5,3,
		7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
		57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
		81,41,83,42,85,43,87,44,89,45,91,0,93,0,95,0,97,0,99,0,101,0,103,0,105,
		0,107,46,109,47,111,48,113,49,115,50,1,0,8,3,0,65,90,95,95,97,122,4,0,
		48,57,65,90,95,95,97,122,6,0,10,10,13,13,34,34,92,92,133,133,8232,8233,
		6,0,10,10,13,13,39,39,92,92,133,133,8232,8233,10,0,34,34,39,39,48,48,92,
		92,97,98,102,102,110,110,114,114,116,116,118,118,3,0,48,57,65,70,97,102,
		2,0,9,9,32,32,2,0,10,10,13,13,432,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,107,1,0,0,0,0,109,1,0,
		0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,1,117,1,0,0,0,3,119,1,0,
		0,0,5,125,1,0,0,0,7,135,1,0,0,0,9,137,1,0,0,0,11,143,1,0,0,0,13,153,1,
		0,0,0,15,161,1,0,0,0,17,170,1,0,0,0,19,176,1,0,0,0,21,184,1,0,0,0,23,186,
		1,0,0,0,25,188,1,0,0,0,27,190,1,0,0,0,29,192,1,0,0,0,31,195,1,0,0,0,33,
		197,1,0,0,0,35,200,1,0,0,0,37,204,1,0,0,0,39,206,1,0,0,0,41,208,1,0,0,
		0,43,214,1,0,0,0,45,221,1,0,0,0,47,230,1,0,0,0,49,232,1,0,0,0,51,234,1,
		0,0,0,53,237,1,0,0,0,55,242,1,0,0,0,57,247,1,0,0,0,59,253,1,0,0,0,61,255,
		1,0,0,0,63,257,1,0,0,0,65,259,1,0,0,0,67,262,1,0,0,0,69,265,1,0,0,0,71,
		268,1,0,0,0,73,270,1,0,0,0,75,272,1,0,0,0,77,274,1,0,0,0,79,277,1,0,0,
		0,81,280,1,0,0,0,83,291,1,0,0,0,85,301,1,0,0,0,87,310,1,0,0,0,89,336,1,
		0,0,0,91,341,1,0,0,0,93,343,1,0,0,0,95,348,1,0,0,0,97,350,1,0,0,0,99,352,
		1,0,0,0,101,355,1,0,0,0,103,377,1,0,0,0,105,379,1,0,0,0,107,382,1,0,0,
		0,109,391,1,0,0,0,111,395,1,0,0,0,113,406,1,0,0,0,115,420,1,0,0,0,117,
		118,5,44,0,0,118,2,1,0,0,0,119,120,5,239,0,0,120,121,5,187,0,0,121,122,
		5,191,0,0,122,123,1,0,0,0,123,124,6,1,0,0,124,4,1,0,0,0,125,126,5,110,
		0,0,126,127,5,97,0,0,127,128,5,109,0,0,128,129,5,101,0,0,129,130,5,115,
		0,0,130,131,5,112,0,0,131,132,5,97,0,0,132,133,5,99,0,0,133,134,5,101,
		0,0,134,6,1,0,0,0,135,136,5,59,0,0,136,8,1,0,0,0,137,138,5,117,0,0,138,
		139,5,115,0,0,139,140,5,105,0,0,140,141,5,110,0,0,141,142,5,103,0,0,142,
		10,1,0,0,0,143,144,5,109,0,0,144,145,5,101,0,0,145,146,5,116,0,0,146,147,
		5,97,0,0,147,148,5,109,0,0,148,149,5,111,0,0,149,150,5,100,0,0,150,151,
		5,101,0,0,151,152,5,108,0,0,152,12,1,0,0,0,153,154,5,115,0,0,154,155,5,
		121,0,0,155,156,5,109,0,0,156,157,5,98,0,0,157,158,5,111,0,0,158,159,5,
		108,0,0,159,160,5,115,0,0,160,14,1,0,0,0,161,162,5,108,0,0,162,163,5,97,
		0,0,163,164,5,110,0,0,164,165,5,103,0,0,165,166,5,117,0,0,166,167,5,97,
		0,0,167,168,5,103,0,0,168,169,5,101,0,0,169,16,1,0,0,0,170,171,5,98,0,
		0,171,172,5,108,0,0,172,173,5,111,0,0,173,174,5,99,0,0,174,175,5,107,0,
		0,175,18,1,0,0,0,176,177,5,114,0,0,177,178,5,101,0,0,178,179,5,116,0,0,
		179,180,5,117,0,0,180,181,5,114,0,0,181,182,5,110,0,0,182,183,5,115,0,
		0,183,20,1,0,0,0,184,185,5,58,0,0,185,22,1,0,0,0,186,187,5,124,0,0,187,
		24,1,0,0,0,188,189,5,123,0,0,189,26,1,0,0,0,190,191,5,125,0,0,191,28,1,
		0,0,0,192,193,5,61,0,0,193,194,5,62,0,0,194,30,1,0,0,0,195,196,5,35,0,
		0,196,32,1,0,0,0,197,198,5,35,0,0,198,199,5,123,0,0,199,34,1,0,0,0,200,
		201,5,101,0,0,201,202,5,111,0,0,202,203,5,102,0,0,203,36,1,0,0,0,204,205,
		5,40,0,0,205,38,1,0,0,0,206,207,5,41,0,0,207,40,1,0,0,0,208,209,5,116,
		0,0,209,210,5,111,0,0,210,211,5,107,0,0,211,212,5,101,0,0,212,213,5,110,
		0,0,213,42,1,0,0,0,214,215,5,104,0,0,215,216,5,105,0,0,216,217,5,100,0,
		0,217,218,5,100,0,0,218,219,5,101,0,0,219,220,5,110,0,0,220,44,1,0,0,0,
		221,222,5,102,0,0,222,223,5,114,0,0,223,224,5,97,0,0,224,225,5,103,0,0,
		225,226,5,109,0,0,226,227,5,101,0,0,227,228,5,110,0,0,228,229,5,116,0,
		0,229,46,1,0,0,0,230,231,5,126,0,0,231,48,1,0,0,0,232,233,5,46,0,0,233,
		50,1,0,0,0,234,235,5,46,0,0,235,236,5,46,0,0,236,52,1,0,0,0,237,238,5,
		110,0,0,238,239,5,117,0,0,239,240,5,108,0,0,240,241,5,108,0,0,241,54,1,
		0,0,0,242,243,5,116,0,0,243,244,5,114,0,0,244,245,5,117,0,0,245,246,5,
		101,0,0,246,56,1,0,0,0,247,248,5,102,0,0,248,249,5,97,0,0,249,250,5,108,
		0,0,250,251,5,115,0,0,251,252,5,101,0,0,252,58,1,0,0,0,253,254,5,91,0,
		0,254,60,1,0,0,0,255,256,5,93,0,0,256,62,1,0,0,0,257,258,5,61,0,0,258,
		64,1,0,0,0,259,260,5,63,0,0,260,261,5,61,0,0,261,66,1,0,0,0,262,263,5,
		33,0,0,263,264,5,61,0,0,264,68,1,0,0,0,265,266,5,43,0,0,266,267,5,61,0,
		0,267,70,1,0,0,0,268,269,5,63,0,0,269,72,1,0,0,0,270,271,5,42,0,0,271,
		74,1,0,0,0,272,273,5,43,0,0,273,76,1,0,0,0,274,275,5,63,0,0,275,276,5,
		63,0,0,276,78,1,0,0,0,277,278,5,42,0,0,278,279,5,63,0,0,279,80,1,0,0,0,
		280,281,5,43,0,0,281,282,5,63,0,0,282,82,1,0,0,0,283,292,5,48,0,0,284,
		288,2,49,57,0,285,287,2,48,57,0,286,285,1,0,0,0,287,290,1,0,0,0,288,286,
		1,0,0,0,288,289,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,291,283,1,0,0,
		0,291,284,1,0,0,0,292,84,1,0,0,0,293,302,5,48,0,0,294,298,2,49,57,0,295,
		297,2,48,57,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,
		1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,301,293,1,0,0,0,301,294,1,0,0,
		0,302,303,1,0,0,0,303,305,5,46,0,0,304,306,2,48,57,0,305,304,1,0,0,0,306,
		307,1,0,0,0,307,305,1,0,0,0,307,308,1,0,0,0,308,86,1,0,0,0,309,311,7,0,
		0,0,310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,
		317,1,0,0,0,314,316,7,1,0,0,315,314,1,0,0,0,316,319,1,0,0,0,317,315,1,
		0,0,0,317,318,1,0,0,0,318,88,1,0,0,0,319,317,1,0,0,0,320,324,5,34,0,0,
		321,323,3,91,45,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,0,0,324,
		325,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,337,5,34,0,0,328,332,5,
		39,0,0,329,331,3,95,47,0,330,329,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,
		0,332,333,1,0,0,0,333,335,1,0,0,0,334,332,1,0,0,0,335,337,5,39,0,0,336,
		320,1,0,0,0,336,328,1,0,0,0,337,90,1,0,0,0,338,342,3,93,46,0,339,342,3,
		99,49,0,340,342,3,103,51,0,341,338,1,0,0,0,341,339,1,0,0,0,341,340,1,0,
		0,0,342,92,1,0,0,0,343,344,8,2,0,0,344,94,1,0,0,0,345,349,3,97,48,0,346,
		349,3,99,49,0,347,349,3,103,51,0,348,345,1,0,0,0,348,346,1,0,0,0,348,347,
		1,0,0,0,349,96,1,0,0,0,350,351,8,3,0,0,351,98,1,0,0,0,352,353,5,92,0,0,
		353,354,3,101,50,0,354,100,1,0,0,0,355,356,7,4,0,0,356,102,1,0,0,0,357,
		358,5,92,0,0,358,359,5,117,0,0,359,360,1,0,0,0,360,361,3,105,52,0,361,
		362,3,105,52,0,362,363,3,105,52,0,363,364,3,105,52,0,364,378,1,0,0,0,365,
		366,5,92,0,0,366,367,5,85,0,0,367,368,1,0,0,0,368,369,3,105,52,0,369,370,
		3,105,52,0,370,371,3,105,52,0,371,372,3,105,52,0,372,373,3,105,52,0,373,
		374,3,105,52,0,374,375,3,105,52,0,375,376,3,105,52,0,376,378,1,0,0,0,377,
		357,1,0,0,0,377,365,1,0,0,0,378,104,1,0,0,0,379,380,7,5,0,0,380,106,1,
		0,0,0,381,383,7,6,0,0,382,381,1,0,0,0,383,384,1,0,0,0,384,382,1,0,0,0,
		384,385,1,0,0,0,385,386,1,0,0,0,386,387,6,53,0,0,387,108,1,0,0,0,388,389,
		5,13,0,0,389,392,5,10,0,0,390,392,7,7,0,0,391,388,1,0,0,0,391,390,1,0,
		0,0,392,393,1,0,0,0,393,394,6,54,0,0,394,110,1,0,0,0,395,396,5,47,0,0,
		396,397,5,47,0,0,397,401,1,0,0,0,398,400,8,7,0,0,399,398,1,0,0,0,400,403,
		1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,1,0,0,
		0,404,405,6,55,0,0,405,112,1,0,0,0,406,407,5,47,0,0,407,408,5,42,0,0,408,
		412,1,0,0,0,409,411,9,0,0,0,410,409,1,0,0,0,411,414,1,0,0,0,412,413,1,
		0,0,0,412,410,1,0,0,0,413,415,1,0,0,0,414,412,1,0,0,0,415,416,5,42,0,0,
		416,417,5,47,0,0,417,418,1,0,0,0,418,419,6,56,0,0,419,114,1,0,0,0,420,
		421,9,0,0,0,421,116,1,0,0,0,18,0,288,291,298,301,307,312,317,324,332,336,
		341,348,377,384,391,401,412,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Bootstrap.MetaCompiler.Compiler
