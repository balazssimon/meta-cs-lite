using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Syntax.InternalSyntax;

#nullable enable

namespace MetaDslx.Bootstrap.MetaCompiler.Compiler.Syntax
{
	public enum CompilerSyntaxKind
	{
		__FirstToken = TComma,
		__LastToken = TInvalidToken,
		__FirstFixedToken = TComma,
		__LastFixedToken = TPlusQuestion,
		__FirstRule = Main,
		__LastRule = LexerRuleBlock1Alt1Block1,

		// Built-in:
		None = InternalSyntaxKind.None,
		List = InternalSyntaxKind.List,
		BadToken = InternalSyntaxKind.BadToken,
		MissingToken = InternalSyntaxKind.MissingToken,
		SkippedTokensTrivia = InternalSyntaxKind.SkippedTokensTrivia,
		DisabledTextTrivia = InternalSyntaxKind.DisabledTextTrivia,
		ConflictMarkerTrivia = InternalSyntaxKind.ConflictMarkerTrivia,
		Eof = InternalSyntaxKind.Eof,

		// Tokens:
		TComma,
		Utf8Bom,
		KNamespace,
		TSemicolon,
		KUsing,
		KMetamodel,
		KLanguage,
		KBlock,
		KReturns,
		TColon,
		TBar,
		TLBrace,
		TRBrace,
		TEqGt,
		THash,
		THashLBrace,
		KEof,
		TLParen,
		TRParen,
		KToken,
		KHidden,
		KFragment,
		TTilde,
		TDot,
		TDotDot,
		KNull,
		KTrue,
		KFalse,
		TLBracket,
		TRBracket,
		TEq,
		TQuestionEq,
		TExclEq,
		TPlusEq,
		TQuestion,
		TAsterisk,
		TPlus,
		TQuestionQuestion,
		TAsteriskQuestion,
		TPlusQuestion,
		TInteger,
		TDecimal,
		TIdentifier,
		TString,
		DoubleQuoteTextCharacter,
		DoubleQuoteTextSimple,
		SingleQuoteTextCharacter,
		SingleQuoteTextSimple,
		CharacterEscapeSimple,
		CharacterEscapeSimpleCharacter,
		CharacterEscapeUnicode,
		HexDigit,
		TWhitespace,
		TLineEnd,
		TSingleLineComment,
		TMultiLineComment,
		TInvalidToken,

		// Rules:
		Main,
		Using,
		Declarations,
		LanguageDeclaration,
		Grammar,
		ParserRule,
		LexerRule,
		PAlternative,
		PElement,
		PReferenceAlt1,
		PReferenceAlt2,
		PReferenceAlt3,
		PEof,
		PKeyword,
		PBlock,
		LAlternative,
		LElement,
		LReference,
		LFixed,
		LWildCard,
		LRange,
		LBlock,
		IntExpression,
		StringExpression,
		ReferenceExpression,
		ExpressionTokens,
		Annotation,
		AnnotationArguments,
		AnnotationArgument,
		Name,
		Qualifier,
		QualifierList,
		Identifier,
		UsingBlock1Alt1,
		UsingBlock1Alt2,
		ParserRuleBlock1Alt1,
		ParserRuleBlock1Alt2,
		ParserRuleBlock2,
		PAlternativeBlock1,
		PAlternativeBlock2,
		PElementBlock1,
		PReferenceAlt3Block1,
		PBlockBlock1,
		LexerRuleBlock1Alt1,
		LexerRuleBlock1Alt2,
		LexerRuleBlock1Alt3,
		LexerRuleBlock2,
		LBlockBlock1,
		AnnotationArgumentsBlock1,
		AnnotationArgumentBlock1,
		QualifierBlock1,
		QualifierListBlock1,
		ParserRuleBlock1Alt2Block1,
		LexerRuleBlock1Alt1Block1,
	}

    public static class CompilerSyntaxKindExtensions
    {
        public static CompilerSyntaxKind GetCompilerKind(this SyntaxToken token)
        {
            return (CompilerSyntaxKind)token.RawKind;
        }
    }
}
