namespace MetaDslx.Bootstrap.MetaCompiler.Generators

using MetaDslx.Bootstrap.MetaCompiler.Roslyn
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq

generator RoslynApiGenerator


template GenerateCompilationFactory(Language language)
using System;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Declarations;
using MetaDslx.CodeAnalysis.Binding;

#nullable enable

namespace [language.Namespace]
{
    public class [language.Name]CompilationFactory : CompilationFactory
    {

    }
}
end template


template GenerateCompilation(Language language)
using System;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Declarations;
using MetaDslx.CodeAnalysis.Binding;

#nullable enable

namespace [language.Namespace]
{
    public class [language.Name]Compilation : Compilation
    {
        protected [language.Name]Compilation(
            string? assemblyName,
            CompilationOptions options,
            ImmutableArray<MetadataReference> references,
            ScriptCompilationInfo? scriptCompilationInfo,
            ReferenceManager? referenceManager, 
            bool reuseReferenceManager,
            SyntaxAndDeclarationManager syntaxAndDeclarations)
            : base(assemblyName, [language.Name]Language.Instance, options, references, scriptCompilationInfo, referenceManager, reuseReferenceManager, syntaxAndDeclarations)
        {

        }

        public static new [language.Name]Compilation Create(
            string? assemblyName = null, 
            IEnumerable<SyntaxTree>? syntaxTrees = null, 
            IEnumerable<MetadataReference>? references = null, 
            CompilationOptions? options = null)
        {
            return ([language.Name]Compilation)Compilation.Create(assemblyName, [language.Name]Language.Instance, syntaxTrees, references, options);
        }

        public static new [language.Name]Compilation CreateScriptCompilation(
            string assemblyName,
            SyntaxTree? syntaxTree = null,
            IEnumerable<MetadataReference>? references = null,
            CompilationOptions? options = null,
            Compilation? previousScriptCompilation = null,
            Type? returnType = null,
            Type? globalsType = null)
        {
            return ([language.Name]Compilation)Compilation.CreateScriptCompilation(assemblyName, [language.Name]Language.Instance, syntaxTree, references, options, previousScriptCompilation, returnType, globalsType);
        }
    }
}
end template
