namespace MetaDslx.Languages.MetaCompiler.Generators

using MetaDslx.Languages.MetaCompiler.Model
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq

generator RoslynApiGenerator

template GenerateLanguage(Language language)
using MetaDslx.CodeAnalysis;

namespace [language.QualifiedNamespace]
{
    using [language.QualifiedNamespace].Syntax;
    using [language.QualifiedNamespace].Syntax.InternalSyntax;

    public sealed class [language.Name]Language : Language
    {
        public static [language.Name]Language Instance = new [language.Name]Language();

        private [language.Name]SyntaxFacts _syntaxFacts;
        private [language.Name]InternalSyntaxFactory _internalSyntaxFactory;
        private [language.Name]SyntaxFactory _syntaxFactory;
        private [language.Name]CompilationFactory _compilationFactory;

        private [language.Name]Language()
        {
            _syntaxFacts = new [language.Name]SyntaxFacts();
            _internalSyntaxFactory = new [language.Name]InternalSyntaxFactory(_syntaxFacts);
            _syntaxFactory = new [language.Name]SyntaxFactory(_internalSyntaxFactory);
            _compilationFactory = new [language.Name]CompilationFactory();
        }

        public override string Name => "[language.Name]";

        public override [language.Name]InternalSyntaxFactory InternalSyntaxFactory => _internalSyntaxFactory;

        public override [language.Name]SyntaxFacts SyntaxFacts => _syntaxFacts;

        public override [language.Name]SyntaxFactory SyntaxFactory => _syntaxFactory;

        public override [language.Name]CompilationFactory CompilationFactory => _compilationFactory;
    }
}
end template

template GenerateLanguageVersion(Language language)
using MetaDslx.CodeAnalysis;
using Roslyn.Utilities;

namespace [language.QualifiedNamespace]
{
    /// <summary>
    /// Specifies the language version.
    /// </summary>
    public enum [language.Name]LanguageVersion
    {
        /// <summary>
        /// Language version 1
        /// </summary>
        Version1 = 1,

        /// <summary>
        /// The latest major supported version.
        /// </summary>
        LatestMajor = int.MaxValue - 2,

        /// <summary>
        /// Preview of the next language version.
        /// </summary>
        Preview = int.MaxValue - 1,

        /// <summary>
        /// The latest supported version of the language.
        /// </summary>
        Latest = int.MaxValue,

        /// <summary>
        /// The default language version, which is the latest supported version.
        /// </summary>
        Default = 0,
    }

    public static class [language.Name]LanguageVersionFacts
    {
        internal static bool IsValid(this [language.Name]LanguageVersion value)
        {
            switch (value)
            {
                case [language.Name]LanguageVersion.Version1:
                case [language.Name]LanguageVersion.Preview:
                    return true;
            }

            return false;
        }

        /// <summary>
        /// Displays the version number in the format expected on the command-line (/langver flag).
        /// For instance, "6", "7", "7.1", "latest".
        /// </summary>
        public static string ToDisplayString(this [language.Name]LanguageVersion version)
        {
            if (version == [language.Name]LanguageVersion.Version1) return "1";
            if (version == [language.Name]LanguageVersion.Default) return "default";
            if (version == [language.Name]LanguageVersion.Latest) return "latest";
            if (version == [language.Name]LanguageVersion.LatestMajor) return "latestmajor";
            if (version == [language.Name]LanguageVersion.Preview) return "preview";
            throw ExceptionUtilities.UnexpectedValue(version);
        }

        /// <summary>
        /// Try parse a <see cref="[language.Name]LanguageVersion"/> from a string input, returning default if input was null.
        /// </summary>
        public static bool TryParse(string version, out [language.Name]LanguageVersion result)
        {
            if (version == null)
            {
                result = [language.Name]LanguageVersion.Default;
                return true;
            }
            switch (CaseInsensitiveComparison.ToLower(version))
            {
                case "default":
                    result = [language.Name]LanguageVersion.Default;
                    return true;
                case "latest":
                    result = [language.Name]LanguageVersion.Latest;
                    return true;
                case "latestmajor":
                    result = [language.Name]LanguageVersion.LatestMajor;
                    return true;
                case "preview":
                    result = [language.Name]LanguageVersion.Preview;
                    return true;
                case "1":
                case "1.0":
                    result = [language.Name]LanguageVersion.Version1;
                    return true;
                default:
                    result = [language.Name]LanguageVersion.Default;
                    return false;
            }
        }

        /// <summary>
        /// Map a language version (such as Default, Latest, or VersionN) to a specific version (VersionM).
        /// </summary>
        internal static [language.Name]LanguageVersion MapSpecifiedToEffectiveVersion(this [language.Name]LanguageVersion version)
        {
            switch (version)
            {
                case [language.Name]LanguageVersion.Latest:
                case [language.Name]LanguageVersion.Default:
                case [language.Name]LanguageVersion.LatestMajor:
                    return [language.Name]LanguageVersion.Version1;
                default:
                    return version;
            }
        }

        public static [language.Name]LanguageVersion CurrentVersion => [language.Name]LanguageVersion.Version1;
    }

}
end template

template GenerateParseOptions(Language language)
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Syntax;
using MetaDslx.CodeAnalysis.PooledObjects;
using Roslyn.Utilities;

namespace [language.QualifiedNamespace].Syntax
{
    /// <summary>
    /// This class stores several source parsing related options and offers access to their values.
    /// </summary>
    public sealed class [language.Name]ParseOptions : ParseOptions, IEquatable<[language.Name]ParseOptions>
    {
        /// <summary>
        /// The default parse options.
        /// </summary>
        public static [language.Name]ParseOptions Default { get; } = new [language.Name]ParseOptions();

        private ImmutableArray<string> _preprocessorSymbols;
        private ImmutableDictionary<string, string> _features;

        /// <summary>
        /// Gets the effective language version, which the compiler uses to select the
        /// language rules to apply to the program.
        /// </summary>
        public [language.Name]LanguageVersion LanguageVersion { get; private set; }

        /// <summary>
        /// Gets the specified language version, which is the value that was specified in
        /// the call to the constructor, or modified using the <see cref="WithLanguageVersion"/> method,
        /// or provided on the command line.
        /// </summary>
        public [language.Name]LanguageVersion SpecifiedLanguageVersion { get; private set; }

        public override ImmutableArray<string> PreprocessorSymbols => _preprocessorSymbols;

        public [language.Name]ParseOptions(
            [language.Name]LanguageVersion languageVersion = [language.Name]LanguageVersion.Default,
            DocumentationMode documentationMode = DocumentationMode.Parse,
            SourceCodeKind kind = SourceCodeKind.Regular,
            IEnumerable<string>? preprocessorSymbols = null)
            : this(languageVersion,
                  documentationMode,
                  kind,
                  preprocessorSymbols.ToImmutableArrayOrEmpty(),
                  ImmutableDictionary<string, string>.Empty)
        {
        }

        internal [language.Name]ParseOptions(
            [language.Name]LanguageVersion languageVersion,
            DocumentationMode documentationMode,
            SourceCodeKind kind,
            ImmutableArray<string> preprocessorSymbols,
            IReadOnlyDictionary<string, string>? features)
            : base(kind, documentationMode)
        {
            this.SpecifiedLanguageVersion = languageVersion;
            this.LanguageVersion = languageVersion.MapSpecifiedToEffectiveVersion();
            _preprocessorSymbols = preprocessorSymbols.ToImmutableArrayOrEmpty();
            _features = features?.ToImmutableDictionary() ?? ImmutableDictionary<string, string>.Empty;
        }

        private [language.Name]ParseOptions([language.Name]ParseOptions other) : this(
            languageVersion: other.SpecifiedLanguageVersion,
            documentationMode: other.DocumentationMode,
            kind: other.Kind,
            preprocessorSymbols: other.PreprocessorSymbols)
        {
        }

        public override [language.Name]Language Language => [language.Name]Language.Instance;

        public new [language.Name]ParseOptions WithKind(SourceCodeKind kind)
        {
            if (kind == this.Kind)
            {
                return this;
            }

            return new [language.Name]ParseOptions(this) { Kind = kind };
        }

        public [language.Name]ParseOptions WithLanguageVersion([language.Name]LanguageVersion version)
        {
            if (version == this.SpecifiedLanguageVersion)
            {
                return this;
            }

            var effectiveLanguageVersion = version.MapSpecifiedToEffectiveVersion();
            return new [language.Name]ParseOptions(this) { SpecifiedLanguageVersion = version, LanguageVersion = effectiveLanguageVersion };
        }

        public [language.Name]ParseOptions WithPreprocessorSymbols(IEnumerable<string>? preprocessorSymbols)
        {
            return WithPreprocessorSymbols(preprocessorSymbols.AsImmutableOrNull());
        }

        public [language.Name]ParseOptions WithPreprocessorSymbols(params string["[]"]? preprocessorSymbols)
        {
            return WithPreprocessorSymbols(preprocessorSymbols.AsImmutableOrNull());
        }

        public [language.Name]ParseOptions WithPreprocessorSymbols(ImmutableArray<string> symbols)
        {
            if (symbols.IsDefault)
            {
                symbols = ImmutableArray<string>.Empty;
            }

            if (symbols.Equals(this.PreprocessorSymbols))
            {
                return this;
            }

            return new [language.Name]ParseOptions(this) { _preprocessorSymbols = symbols };
        }

        public new [language.Name]ParseOptions WithDocumentationMode(DocumentationMode documentationMode)
        {
            if (documentationMode == this.DocumentationMode)
            {
                return this;
            }

            return new [language.Name]ParseOptions(this) { DocumentationMode = documentationMode };
        }

        protected override ParseOptions CommonWithKind(SourceCodeKind kind)
        {
            return WithKind(kind);
        }

        protected override ParseOptions CommonWithDocumentationMode(DocumentationMode documentationMode)
        {
            return WithDocumentationMode(documentationMode);
        }

        protected override bool IsFeatureEnabled(string feature)
        {
            [language.Name]LanguageVersion availableVersion = LanguageVersion;
            [language.Name]LanguageVersion requiredVersion = Language.SyntaxFacts.GetRequiredLanguageVersion(feature);
            return availableVersion >= requiredVersion;
        }

        public override Diagnostic? GetDiagnosticForFeature(string feature)
        {
            [language.Name]LanguageVersion availableVersion = LanguageVersion;
            [language.Name]LanguageVersion requiredVersion = Language.SyntaxFacts.GetRequiredLanguageVersion(feature);
            if (availableVersion < requiredVersion)
            {
                return Diagnostic.Create(ErrorCode.ERR_FeatureNotAvailableInVersion, Location.None, feature, Language.Name, availableVersion.ToDisplayString(), requiredVersion.ToDisplayString());
            }
            return null;
        }

        protected override void CommonValidateOptions(ArrayBuilder<Diagnostic> builder)
        {
            // Validate LanguageVersion not SpecifiedLanguageVersion, after Latest/Default has been converted:
            if (!LanguageVersion.IsValid())
            {
                builder.Add(Diagnostic.Create(ErrorCode.ERR_BadLanguageVersion, Location.None, LanguageVersion.ToString()));
            }

            if (!PreprocessorSymbols.IsDefaultOrEmpty)
            {
                foreach (var symbol in PreprocessorSymbols)
                {
                    if (symbol == null)
                    {
                        builder.Add(Diagnostic.Create(ErrorCode.ERR_InvalidPreprocessingSymbol, Location.None, "null"));
                    }
                    else if (!Language.SyntaxFacts.IsValidIdentifier(symbol))
                    {
                        builder.Add(Diagnostic.Create(ErrorCode.ERR_InvalidPreprocessingSymbol, Location.None, symbol));
                    }
                }
            }
        }

        public override bool Equals(object? obj)
        {
            return this.Equals(obj as [language.Name]ParseOptions);
        }

        public bool Equals([language.Name]ParseOptions? other)
        {
            if (object.ReferenceEquals(this, other))
            {
                return true;
            }

            if (!base.EqualsHelper(other))
            {
                return false;
            }

            return this.SpecifiedLanguageVersion == other.SpecifiedLanguageVersion;
        }

        public override int GetHashCode()
        {
            return
                Hash.Combine(base.GetHashCodeHelper(),
                Hash.Combine((int)this.SpecifiedLanguageVersion, 0));
        }
    }
}
end template

