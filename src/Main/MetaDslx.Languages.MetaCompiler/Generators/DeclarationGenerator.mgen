namespace MetaDslx.Languages.MetaCompiler.Generators

using MetaDslx.Languages.MetaCompiler.Model
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq

generator RoslynApiGenerator


template GenerateDeclarationTreeBuilderVisitor(Language language)
using System;
using MetaDslx.CodeAnalysis;

#nullable enable

namespace [language.QualifiedNamespace].Declarations
{
    using [language.QualifiedNamespace].Syntax;

    public class [language.Name]DeclarationTreeBuilderVisitor : MetaDslx.CodeAnalysis.Declarations.DeclarationTreeBuilderVisitor, I[language.Name]SyntaxVisitor
    {
        protected [language.Name]DeclarationTreeBuilderVisitor([language.Name]SyntaxTree syntaxTree, string scriptClassName, bool isSubmission)
            : base(syntaxTree, scriptClassName, isSubmission)
        {
        }

        public static MetaDslx.CodeAnalysis.Declarations.RootSingleDeclaration ForTree([language.Name]SyntaxTree syntaxTree, string scriptClassName, bool isSubmission)
        {
            var builder = new [language.Name]DeclarationTreeBuilderVisitor(syntaxTree, scriptClassName, isSubmission);
            [if (language.Grammar.RootType is not null)]
            return builder.CreateRoot(syntaxTree.GetRoot(), typeof([language.Grammar.RootType.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat)]));
            [else]
            return builder.CreateRoot(syntaxTree.GetRoot(), null);
            [end if]
        }

		[foreach (var rule in language.Grammar.ParserRules)]
			[foreach (var alt in rule.Alternatives)]

        [GenerateDeclarationTreeBuilderVisit(language, rule, alt)]
			[end foreach]
		[end foreach]

		public virtual void VisitSkippedTokensTrivia([language.Name]SkippedTokensTriviaSyntax node)
		{
		}
    }
}
end template

template GenerateDeclarationTreeBuilderVisit(Language language, ParserRule rule, ParserRuleAlternative alt)
public virtual void Visit[alt.CSharpName]([alt.RedName] node)
{
    [var annotIndex = 0]
	[var body = GenerateDeclarationTreeBuilderVisitBody(language, alt, ref annotIndex)]
    [body = GenerateDeclarationTreeBuilderVisitAnnotations(alt.Annotations, body, ref annotIndex)]
    [body = GenerateDeclarationTreeBuilderVisitAnnotations(rule.Annotations, body, ref annotIndex)]
    [body]
}
end template

template GenerateDeclarationTreeBuilderVisitBody(Language language, ParserRuleAlternative alt, ref int annotIndex)
[foreach (var elem in alt.Elements)]
[var body = GenerateDeclarationTreeBuilderVisitElement(language, alt, elem)]
[GenerateDeclarationTreeBuilderVisitAnnotations(elem.Annotations, body, ref annotIndex)]
[end foreach]    
end template

template GenerateDeclarationTreeBuilderVisitAnnotations(IEnumerable<Annotation> annotations, string body, ref int annotIndex)
[foreach (var annot in annotations.Reverse())]
[body = GenerateDeclarationTreeBuilderVisitAnnotation(annot, body, ref annotIndex)]
[end foreach]
[body]
end template

template GenerateDeclarationTreeBuilderVisitAnnotation(Annotation annot, string body, ref int annotIndex)
[var annotVarName = "annot"+(annotIndex++)]
[var annotName = annot.Name.LastOrDefault()]
var [annotVarName] = new [annot.QualifiedName]Annotation();
try
{
    this.Begin[annotName](node, [annotVarName]);
    [body]
}
finally
{
    this.End[annotName](node, [annotVarName]);
}
end template

template GenerateDeclarationTreeBuilderVisitElement(Language language, ParserRuleAlternative alt, ParserRuleElement elem)
	[if (elem.IsList)]
this.VisitList(node.[elem.PropertyName]);
	[else]
		[if (elem.IsToken)]
this.VisitToken(node.[elem.PropertyName]);
		[else]
this.Visit(node.[elem.PropertyName]);
		[end if]
	[end if]
end template

