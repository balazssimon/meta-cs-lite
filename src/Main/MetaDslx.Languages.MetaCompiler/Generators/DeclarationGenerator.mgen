namespace MetaDslx.Languages.MetaCompiler.Generators

using MetaDslx.Languages.MetaCompiler.Model
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq

generator RoslynApiGenerator


template GenerateDeclarationTreeBuilderVisitor(Language language)
using System;
using MetaDslx.CodeAnalysis;
[foreach (var use in language.Usings)]
using [if (use.Alias is not null)][use.Alias] = [end if][use.QualifiedReference];
[end foreach]

#nullable enable

namespace [language.QualifiedNamespace].Declarations
{
    using [language.QualifiedNamespace].Syntax;

    public class [language.Name]DeclarationTreeBuilderVisitor : MetaDslx.CodeAnalysis.Declarations.DeclarationTreeBuilderVisitor, I[language.Name]SyntaxVisitor
    {
        protected [language.Name]DeclarationTreeBuilderVisitor([language.Name]SyntaxTree syntaxTree, string scriptClassName, bool isSubmission)
            : base(syntaxTree, scriptClassName, isSubmission)
        {
        }

        public static MetaDslx.CodeAnalysis.Declarations.RootSingleDeclaration ForTree([language.Name]SyntaxTree syntaxTree, string scriptClassName, bool isSubmission)
        {
            var builder = new [language.Name]DeclarationTreeBuilderVisitor(syntaxTree, scriptClassName, isSubmission);
            [if (language.Grammar.RootType is not null)]
            return builder.CreateRoot(syntaxTree.GetRoot(), typeof([language.Grammar.RootType.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat)]));
            [else]
            return builder.CreateRoot(syntaxTree.GetRoot(), null);
            [end if]
        }

		[foreach (var rule in language.Grammar.ParserRules)]
			[foreach (var alt in rule.Alternatives)]

        [GenerateDeclarationTreeBuilderVisit(language, rule, alt)]
			[end foreach]
		[end foreach]

		public virtual void VisitSkippedTokensTrivia([language.Name]SkippedTokensTriviaSyntax node)
		{
		}
    }
}
end template

template GenerateDeclarationTreeBuilderVisit(Language language, ParserRule rule, ParserRuleAlternative alt)
public virtual void Visit[alt.CSharpName]([alt.RedName] node)
{
    [var annotIndex = 0]
	[var body = GenerateDeclarationTreeBuilderVisitBody(language, alt, ref annotIndex)]
    [body = GenerateDeclarationTreeBuilderVisitAnnotations(alt.Annotations, body, ref annotIndex)]
    [body = GenerateDeclarationTreeBuilderVisitAnnotations(rule.Annotations, body, ref annotIndex)]
    [body]
}
end template

template GenerateDeclarationTreeBuilderVisitBody(Language language, ParserRuleAlternative alt, ref int annotIndex)
[foreach (var elem in alt.Elements)]
[GenerateDeclarationTreeBuilderVisitElement(language, alt, elem, ref annotIndex)]
[end foreach]    
end template

template GenerateDeclarationTreeBuilderVisitAnnotations(IEnumerable<Annotation> annotations, string body, ref int annotIndex)
[foreach (var annot in annotations.Reverse())]
[body = GenerateDeclarationTreeBuilderVisitAnnotation(annot, body, ref annotIndex)]
[end foreach]
[body]
end template

template GenerateDeclarationTreeBuilderVisitAnnotation(Annotation annot, string body, ref int annotIndex)
[var annotVarName = "annot"+(annotIndex++)]
[var annotName = annot.Name.LastOrDefault()]
var [annotVarName] = new [annot.QualifiedName]Annotation();
try
{
    this.Begin[annotName](node, [annotVarName]);
    [body]
}
finally
{
    this.End[annotName](node, [annotVarName]);
}
end template

template GenerateDeclarationTreeBuilderVisitElement(Language language, ParserRuleAlternative alt, ParserRuleElement elem, ref int annotIndex)
	[if (elem.IsList)]
var [elem.ParameterName]List = node.[elem.PropertyName];
for (var [elem.ParameterName]Index = 0; [elem.ParameterName]Index < [elem.ParameterName]List.Count; ++[elem.ParameterName]Index)
{
    [if (elem.IsSeparated && elem is ParserRuleListElement listElem)]
    [if (listElem.ListKind == ListKind.WithFirstItem || listElem.ListKind == ListKind.WithFirstItemSeparator)]
    if ([elem.ParameterName]Index == 0)
    {
        [var elemBody = "this.Visit(node."+elem.PropertyName+"["+elem.ParameterName+"Index]);"]
        [GenerateDeclarationTreeBuilderVisitAnnotations(listElem.FirstItem.Annotations, elemBody, ref annotIndex)]
    }
    [end if]
    [if (listElem.ListKind == ListKind.WithLastItem || listElem.ListKind == ListKind.WithLastItemSeparator || listElem.ListKind == ListKind.WithFirstItemSeparator)]
    [if (listElem.ListKind == ListKind.WithFirstItemSeparator)]else [end if]if ([elem.ParameterName]Index == [elem.ParameterName]List.Count - 1)
    {
        [if (listElem.ListKind == ListKind.WithLastItem || listElem.ListKind == ListKind.WithLastItemSeparator)]
            [var elemBody = "this.Visit(node."+elem.PropertyName+"["+elem.ParameterName+"Index]);"]
        [GenerateDeclarationTreeBuilderVisitAnnotations(listElem.LastItem.Annotations, elemBody, ref annotIndex)]
        [end if]
        [if (listElem.ListKind == ListKind.WithFirstItemSeparator || listElem.ListKind == ListKind.WithLastItemSeparator)]
        if ([elem.ParameterName]Index == [elem.ParameterName]List.SeparatorCount - 1)
        {
            [var elemBody = "this.VisitToken(node."+elem.PropertyName+".GetSeparator("+elem.ParameterName+"Index));"]
            [GenerateDeclarationTreeBuilderVisitAnnotations(listElem.LastSeparator.Annotations, elemBody, ref annotIndex)]
        }
        [end if]
    }
    [end if]
    [if (listElem.ListKind == ListKind.WithFirstItem || listElem.ListKind == ListKind.WithLastItem || listElem.ListKind == ListKind.WithLastItemSeparator || listElem.ListKind == ListKind.WithFirstItemSeparator)]
    else
    {
        [var elemBody = GenerateDeclarationTreeBuilderVisitListElement(listElem, ref annotIndex)]
        [GenerateDeclarationTreeBuilderVisitAnnotations(listElem.RepeatedRule.Annotations, elemBody, ref annotIndex)]
    }
    [else]
    [var elemBody = GenerateDeclarationTreeBuilderVisitListElement(listElem, ref annotIndex)]
    [GenerateDeclarationTreeBuilderVisitAnnotations(listElem.RepeatedRule.Annotations, elemBody, ref annotIndex)]
    [end if]
        [else if (elem.IsToken)]
            [var elemBody = "this.VisitToken(node."+elem.PropertyName+"["+elem.ParameterName+"Index]);"]
    [GenerateDeclarationTreeBuilderVisitAnnotations(elem.Annotations, elemBody, ref annotIndex)]
        [else]
            [var elemBody = "this.Visit(node."+elem.PropertyName+"["+elem.ParameterName+"Index]);"]
    [GenerateDeclarationTreeBuilderVisitAnnotations(elem.Annotations, elemBody, ref annotIndex)]
        [end if]
}
	[else]
		[if (elem.IsToken)]
            [var elemBody = "this.VisitToken(node."+elem.PropertyName+");"]
            [if (elem is ParserRuleFixedStringAlternativesElement fixedAltsElem)]
switch (([language.Name]SyntaxKind)node.[elem.PropertyName].RawKind)
{
                [foreach (var fixedAlt in fixedAltsElem.Alternatives)]
case [language.Name]SyntaxKind.[fixedAlt.CSharpName]:
    [GenerateDeclarationTreeBuilderVisitAnnotations(fixedAlt.Annotations, elemBody, ref annotIndex)]
    break;
                [end foreach]
}
            [else]
if (node.[elem.PropertyName].RawKind != (int)[language.Name]SyntaxKind.None)
{
    [GenerateDeclarationTreeBuilderVisitAnnotations(elem.Annotations, elemBody, ref annotIndex)]
}
            [end if]
		[else]
            [var elemBody = "this.Visit(node."+elem.PropertyName+");"]
    [GenerateDeclarationTreeBuilderVisitAnnotations(elem.Annotations, elemBody, ref annotIndex)]
		[end if]
	[end if]
end template

template GenerateDeclarationTreeBuilderVisitListElement(ParserRuleListElement listElem, ref int annotIndex)
    [if (listElem.IsReversed)]
        [var sepBody = "this.VisitToken(node."+listElem.PropertyName+".GetSeparator("+listElem.ParameterName+"Index));"]
[GenerateDeclarationTreeBuilderVisitAnnotations(listElem.RepeatedSeparator.Annotations, sepBody, ref annotIndex)]
        [var itemBody = "this.Visit(node."+listElem.PropertyName+"["+listElem.ParameterName+"Index]);"]
[GenerateDeclarationTreeBuilderVisitAnnotations(listElem.RepeatedItem.Annotations, itemBody, ref annotIndex)]
    [else]
        [var itemBody = "this.Visit(node."+listElem.PropertyName+"["+listElem.ParameterName+"Index]);"]
[GenerateDeclarationTreeBuilderVisitAnnotations(listElem.RepeatedItem.Annotations, itemBody, ref annotIndex)]
        [var sepBody = "this.VisitToken(node."+listElem.PropertyName+".GetSeparator("+listElem.ParameterName+"Index));"]
[GenerateDeclarationTreeBuilderVisitAnnotations(listElem.RepeatedSeparator.Annotations, sepBody, ref annotIndex)]
    [end if]
end template

