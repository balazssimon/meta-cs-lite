namespace MetaDslx.Languages.MetaCompiler.Generators

using MetaDslx.Languages.MetaCompiler.Model
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq

generator RoslynApiGenerator


template GenerateDeclarationTreeBuilderVisitor(Language language)
using System;
using MetaDslx.CodeAnalysis;

#nullable enable

namespace [language.QualifiedNamespace].Declarations
{
    using [language.QualifiedNamespace].Syntax;

    public class [language.Name]DeclarationTreeBuilderVisitor : MetaDslx.CodeAnalysis.Declarations.DeclarationTreeBuilderVisitor, I[language.Name]SyntaxVisitor
    {
        protected [language.Name]DeclarationTreeBuilderVisitor([language.Name]SyntaxTree syntaxTree, string scriptClassName, bool isSubmission)
            : base(syntaxTree, scriptClassName, isSubmission)
        {
        }

        public static MetaDslx.CodeAnalysis.Declarations.RootSingleDeclaration ForTree([language.Name]SyntaxTree syntaxTree, string scriptClassName, bool isSubmission)
        {
            var builder = new [language.Name]DeclarationTreeBuilderVisitor(syntaxTree, scriptClassName, isSubmission);
            [if (language.Grammar.RootType is not null)]
            return builder.CreateRoot(syntaxTree.GetRoot(), typeof([language.Grammar.RootType.ToDisplayString(Microsoft.CodeAnalysis.SymbolDisplayFormat.FullyQualifiedFormat)]));
            [else]
            return builder.CreateRoot(syntaxTree.GetRoot(), null);
            [end if]
        }

		[foreach (var rule in language.Grammar.ParserRules)]
			[foreach (var alt in rule.Alternatives)]

        [GenerateDeclarationTreeBuilderVisit(language, alt)]
			[end foreach]
		[end foreach]

		public virtual void VisitSkippedTokensTrivia([language.Name]SkippedTokensTriviaSyntax node)
		{
		}
    }
}
end template

template GenerateDeclarationTreeBuilderVisit(Language language, ParserRuleAlternative alt)
public virtual void Visit[alt.CSharpName]([alt.RedName] node)
{
}
end template
