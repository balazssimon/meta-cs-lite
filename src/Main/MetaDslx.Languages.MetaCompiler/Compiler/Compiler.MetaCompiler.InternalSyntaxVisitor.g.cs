#nullable enable

namespace MetaDslx.Languages.MetaCompiler.Compiler.Syntax.InternalSyntax
{
	internal class CompilerInternalSyntaxVisitor : global::MetaDslx.CodeAnalysis.Syntax.InternalSyntax.InternalSyntaxVisitor
	{
		public virtual void VisitSkippedTokensTrivia(GreenSkippedTokensTriviaSyntax node) => this.DefaultVisit(node);
		public virtual void VisitMainGreen(MainGreen node) => this.DefaultVisit(node);
		public virtual void VisitUsingGreen(UsingGreen node) => this.DefaultVisit(node);
		public virtual void VisitDeclarationsGreen(DeclarationsGreen node) => this.DefaultVisit(node);
		public virtual void VisitLanguageDeclarationGreen(LanguageDeclarationGreen node) => this.DefaultVisit(node);
		public virtual void VisitGrammarGreen(GrammarGreen node) => this.DefaultVisit(node);
		public virtual void VisitGrammarRuleAlt1Green(GrammarRuleAlt1Green node) => this.DefaultVisit(node);
		public virtual void VisitBlockGreen(BlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitTokenGreen(TokenGreen node) => this.DefaultVisit(node);
		public virtual void VisitFragmentGreen(FragmentGreen node) => this.DefaultVisit(node);
		public virtual void VisitRuleGreen(RuleGreen node) => this.DefaultVisit(node);
		public virtual void VisitAlternativeGreen(AlternativeGreen node) => this.DefaultVisit(node);
		public virtual void VisitElementGreen(ElementGreen node) => this.DefaultVisit(node);
		public virtual void VisitElementValueTokensGreen(ElementValueTokensGreen node) => this.DefaultVisit(node);
		public virtual void VisitBlockInlineGreen(BlockInlineGreen node) => this.DefaultVisit(node);
		public virtual void VisitRuleRefAlt1Green(RuleRefAlt1Green node) => this.DefaultVisit(node);
		public virtual void VisitRuleRefAlt2Green(RuleRefAlt2Green node) => this.DefaultVisit(node);
		public virtual void VisitRuleRefAlt3Green(RuleRefAlt3Green node) => this.DefaultVisit(node);
		public virtual void VisitLAlternativeGreen(LAlternativeGreen node) => this.DefaultVisit(node);
		public virtual void VisitLElementGreen(LElementGreen node) => this.DefaultVisit(node);
		public virtual void VisitLElementValueTokensGreen(LElementValueTokensGreen node) => this.DefaultVisit(node);
		public virtual void VisitLBlockGreen(LBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitLRangeGreen(LRangeGreen node) => this.DefaultVisit(node);
		public virtual void VisitLReferenceGreen(LReferenceGreen node) => this.DefaultVisit(node);
		public virtual void VisitExpressionAlt1Green(ExpressionAlt1Green node) => this.DefaultVisit(node);
		public virtual void VisitArrayExpressionGreen(ArrayExpressionGreen node) => this.DefaultVisit(node);
		public virtual void VisitSingleExpressionGreen(SingleExpressionGreen node) => this.DefaultVisit(node);
		public virtual void VisitParserAnnotationGreen(ParserAnnotationGreen node) => this.DefaultVisit(node);
		public virtual void VisitLexerAnnotationGreen(LexerAnnotationGreen node) => this.DefaultVisit(node);
		public virtual void VisitAnnotationArgumentsGreen(AnnotationArgumentsGreen node) => this.DefaultVisit(node);
		public virtual void VisitAnnotationArgumentGreen(AnnotationArgumentGreen node) => this.DefaultVisit(node);
		public virtual void VisitReturnTypeIdentifierAlt1Green(ReturnTypeIdentifierAlt1Green node) => this.DefaultVisit(node);
		public virtual void VisitReturnTypeIdentifierAlt2Green(ReturnTypeIdentifierAlt2Green node) => this.DefaultVisit(node);
		public virtual void VisitReturnTypeQualifierAlt1Green(ReturnTypeQualifierAlt1Green node) => this.DefaultVisit(node);
		public virtual void VisitReturnTypeQualifierAlt2Green(ReturnTypeQualifierAlt2Green node) => this.DefaultVisit(node);
		public virtual void VisitNameGreen(NameGreen node) => this.DefaultVisit(node);
		public virtual void VisitIdentifierGreen(IdentifierGreen node) => this.DefaultVisit(node);
		public virtual void VisitSimpleIdentifierGreen(SimpleIdentifierGreen node) => this.DefaultVisit(node);
		public virtual void VisitRuleBlock1Alt1Green(RuleBlock1Alt1Green node) => this.DefaultVisit(node);
		public virtual void VisitRuleBlock1Alt2Green(RuleBlock1Alt2Green node) => this.DefaultVisit(node);
		public virtual void VisitRuleAlternativesBlockGreen(RuleAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitBlockBlock1Green(BlockBlock1Green node) => this.DefaultVisit(node);
		public virtual void VisitBlockAlternativesBlockGreen(BlockAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitBlockInlineAlternativesBlockGreen(BlockInlineAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitAlternativeBlock1Green(AlternativeBlock1Green node) => this.DefaultVisit(node);
		public virtual void VisitAlternativeBlock1Block1Green(AlternativeBlock1Block1Green node) => this.DefaultVisit(node);
		public virtual void VisitAlternativeBlock2Green(AlternativeBlock2Green node) => this.DefaultVisit(node);
		public virtual void VisitElementBlock1Green(ElementBlock1Green node) => this.DefaultVisit(node);
		public virtual void VisitRuleRefAlt3ReferencedTypesBlockGreen(RuleRefAlt3ReferencedTypesBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitRuleRefAlt3Block1Green(RuleRefAlt3Block1Green node) => this.DefaultVisit(node);
		public virtual void VisitTokenBlock1Alt1Green(TokenBlock1Alt1Green node) => this.DefaultVisit(node);
		public virtual void VisitTokenBlock1Alt2Green(TokenBlock1Alt2Green node) => this.DefaultVisit(node);
		public virtual void VisitTokenBlock1Alt1Block1Green(TokenBlock1Alt1Block1Green node) => this.DefaultVisit(node);
		public virtual void VisitTokenAlternativesBlockGreen(TokenAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitFragmentAlternativesBlockGreen(FragmentAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitLBlockAlternativesBlockGreen(LBlockAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitTokensGreen(TokensGreen node) => this.DefaultVisit(node);
		public virtual void VisitSingleExpressionBlock1Alt2Green(SingleExpressionBlock1Alt2Green node) => this.DefaultVisit(node);
		public virtual void VisitSingleExpressionBlock1Alt3Green(SingleExpressionBlock1Alt3Green node) => this.DefaultVisit(node);
		public virtual void VisitArrayExpressionItemsBlockGreen(ArrayExpressionItemsBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitAnnotationArgumentsArgumentsBlockGreen(AnnotationArgumentsArgumentsBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitAnnotationArgumentBlock1Green(AnnotationArgumentBlock1Green node) => this.DefaultVisit(node);
		public virtual void VisitMainQualifierBlockGreen(MainQualifierBlockGreen node) => this.DefaultVisit(node);
		public virtual void VisitSingleExpressionBlock1Alt3SimpleQualifierBlockGreen(SingleExpressionBlock1Alt3SimpleQualifierBlockGreen node) => this.DefaultVisit(node);
	}

	internal class CompilerInternalSyntaxVisitor<TResult> : global::MetaDslx.CodeAnalysis.Syntax.InternalSyntax.InternalSyntaxVisitor<TResult>
	{
		public virtual TResult VisitSkippedTokensTrivia(GreenSkippedTokensTriviaSyntax node) => this.DefaultVisit(node);
		public virtual TResult VisitMainGreen(MainGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitUsingGreen(UsingGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitDeclarationsGreen(DeclarationsGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitLanguageDeclarationGreen(LanguageDeclarationGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitGrammarGreen(GrammarGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitGrammarRuleAlt1Green(GrammarRuleAlt1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitBlockGreen(BlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitTokenGreen(TokenGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitFragmentGreen(FragmentGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitRuleGreen(RuleGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitAlternativeGreen(AlternativeGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitElementGreen(ElementGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitElementValueTokensGreen(ElementValueTokensGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitBlockInlineGreen(BlockInlineGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitRuleRefAlt1Green(RuleRefAlt1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitRuleRefAlt2Green(RuleRefAlt2Green node) => this.DefaultVisit(node);
		public virtual TResult VisitRuleRefAlt3Green(RuleRefAlt3Green node) => this.DefaultVisit(node);
		public virtual TResult VisitLAlternativeGreen(LAlternativeGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitLElementGreen(LElementGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitLElementValueTokensGreen(LElementValueTokensGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitLBlockGreen(LBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitLRangeGreen(LRangeGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitLReferenceGreen(LReferenceGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitExpressionAlt1Green(ExpressionAlt1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitArrayExpressionGreen(ArrayExpressionGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitSingleExpressionGreen(SingleExpressionGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitParserAnnotationGreen(ParserAnnotationGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitLexerAnnotationGreen(LexerAnnotationGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitAnnotationArgumentsGreen(AnnotationArgumentsGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitAnnotationArgumentGreen(AnnotationArgumentGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitReturnTypeIdentifierAlt1Green(ReturnTypeIdentifierAlt1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitReturnTypeIdentifierAlt2Green(ReturnTypeIdentifierAlt2Green node) => this.DefaultVisit(node);
		public virtual TResult VisitReturnTypeQualifierAlt1Green(ReturnTypeQualifierAlt1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitReturnTypeQualifierAlt2Green(ReturnTypeQualifierAlt2Green node) => this.DefaultVisit(node);
		public virtual TResult VisitNameGreen(NameGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitIdentifierGreen(IdentifierGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitSimpleIdentifierGreen(SimpleIdentifierGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitRuleBlock1Alt1Green(RuleBlock1Alt1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitRuleBlock1Alt2Green(RuleBlock1Alt2Green node) => this.DefaultVisit(node);
		public virtual TResult VisitRuleAlternativesBlockGreen(RuleAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitBlockBlock1Green(BlockBlock1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitBlockAlternativesBlockGreen(BlockAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitBlockInlineAlternativesBlockGreen(BlockInlineAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitAlternativeBlock1Green(AlternativeBlock1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitAlternativeBlock1Block1Green(AlternativeBlock1Block1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitAlternativeBlock2Green(AlternativeBlock2Green node) => this.DefaultVisit(node);
		public virtual TResult VisitElementBlock1Green(ElementBlock1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitRuleRefAlt3ReferencedTypesBlockGreen(RuleRefAlt3ReferencedTypesBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitRuleRefAlt3Block1Green(RuleRefAlt3Block1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitTokenBlock1Alt1Green(TokenBlock1Alt1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitTokenBlock1Alt2Green(TokenBlock1Alt2Green node) => this.DefaultVisit(node);
		public virtual TResult VisitTokenBlock1Alt1Block1Green(TokenBlock1Alt1Block1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitTokenAlternativesBlockGreen(TokenAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitFragmentAlternativesBlockGreen(FragmentAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitLBlockAlternativesBlockGreen(LBlockAlternativesBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitTokensGreen(TokensGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitSingleExpressionBlock1Alt2Green(SingleExpressionBlock1Alt2Green node) => this.DefaultVisit(node);
		public virtual TResult VisitSingleExpressionBlock1Alt3Green(SingleExpressionBlock1Alt3Green node) => this.DefaultVisit(node);
		public virtual TResult VisitArrayExpressionItemsBlockGreen(ArrayExpressionItemsBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitAnnotationArgumentsArgumentsBlockGreen(AnnotationArgumentsArgumentsBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitAnnotationArgumentBlock1Green(AnnotationArgumentBlock1Green node) => this.DefaultVisit(node);
		public virtual TResult VisitMainQualifierBlockGreen(MainQualifierBlockGreen node) => this.DefaultVisit(node);
		public virtual TResult VisitSingleExpressionBlock1Alt3SimpleQualifierBlockGreen(SingleExpressionBlock1Alt3SimpleQualifierBlockGreen node) => this.DefaultVisit(node);
	}
}
