#nullable enable

namespace MetaDslx.Languages.MetaCompiler.Model
{
    using __MetaMetaModel = global::MetaDslx.Languages.MetaModel.Model.Meta;
    using __MetaModelFactory = global::MetaDslx.Languages.MetaModel.Model.MetaModelFactory;
    using __Model = global::MetaDslx.Modeling.Model;
    using __MetaModel = global::MetaDslx.Modeling.MetaModel;
    using __IModelObject = global::MetaDslx.Modeling.IModelObject;
    using __ModelFactory = global::MetaDslx.Modeling.ModelFactory;
    using __MultiModelFactory = global::MetaDslx.Modeling.MultiModelFactory;
    using __ModelVersion = global::MetaDslx.Modeling.ModelVersion;
    using __ModelEnumInfo = global::MetaDslx.Modeling.ModelEnumInfo;
    using __ModelClassInfo = global::MetaDslx.Modeling.ModelClassInfo;
    using __ModelProperty = global::MetaDslx.Modeling.ModelProperty;
    using __ModelPropertyFlags = global::MetaDslx.Modeling.ModelPropertyFlags;
    using __ModelOperation = global::MetaDslx.Modeling.ModelOperation;
    using __ModelOperationInfo = global::MetaDslx.Modeling.ModelOperationInfo;
    using __ImmutableArray = global::System.Collections.Immutable.ImmutableArray;
    using __ImmutableDictionary = global::System.Collections.Immutable.ImmutableDictionary;
    using __MetaType = global::MetaDslx.CodeAnalysis.MetaType;
    using __MetaSymbol = global::MetaDslx.CodeAnalysis.MetaSymbol;
    using __Type = global::System.Type;
    using __Enum = global::System.Enum;

    internal interface ICompiler
    {
    }
    
    public sealed class Compiler : __MetaModel, ICompiler
    {
        // If there is an error at the following line, create a new class called 'CustomCompilerImplementation'
        // inheriting from the class 'CustomCompilerImplementationBase' and provide the custom implementation
        // for the derived properties and operations defined in the metamodel
        internal static readonly CustomCompilerImplementationBase __CustomImpl = new CustomCompilerImplementation();
    
        private static readonly Compiler _instance;
        public static Compiler MInstance => _instance;
    
        private static readonly __ModelProperty _Alternative_ReturnType;
        private static readonly __ModelProperty _Alternative_ReturnValue;
        private static readonly __ModelProperty _Alternative_Elements;
        private static readonly __ModelProperty _Alternative_GreenName;
        private static readonly __ModelProperty _Alternative_GreenConstructorParameters;
        private static readonly __ModelProperty _Alternative_GreenConstructorArguments;
        private static readonly __ModelProperty _Alternative_GreenUpdateParameters;
        private static readonly __ModelProperty _Alternative_GreenUpdateArguments;
        private static readonly __ModelProperty _Alternative_RedName;
        private static readonly __ModelProperty _Alternative_RedUpdateParameters;
        private static readonly __ModelProperty _Alternative_RedUpdateArguments;
        private static readonly __ModelProperty _Alternative_RedOptionalUpdateParameters;
        private static readonly __ModelProperty _Alternative_RedToGreenArgumentList;
        private static readonly __ModelProperty _Alternative_RedToGreenOptionalArgumentList;
        private static readonly __ModelProperty _Alternative_HasRedToGreenOptionalArguments;
        private static readonly __ModelProperty _Annotation_AttributeClass;
        private static readonly __ModelProperty _Annotation_Arguments;
        private static readonly __ModelProperty _AnnotationArgument_NamedParameter;
        private static readonly __ModelProperty _AnnotationArgument_Parameter;
        private static readonly __ModelProperty _AnnotationArgument_ParameterType;
        private static readonly __ModelProperty _AnnotationArgument_Value;
        private static readonly __ModelProperty _ArrayExpression_Items;
        private static readonly __ModelProperty _Binder_TypeName;
        private static readonly __ModelProperty _Binder_Arguments;
        private static readonly __ModelProperty _Binder_IsNegated;
        private static readonly __ModelProperty _Binder_ConstructorArguments;
        private static readonly __ModelProperty _BinderArgument_Name;
        private static readonly __ModelProperty _BinderArgument_TypeName;
        private static readonly __ModelProperty _BinderArgument_IsArray;
        private static readonly __ModelProperty _BinderArgument_Values;
        private static readonly __ModelProperty _Block_GreenType;
        private static readonly __ModelProperty _Block_GreenSyntaxCondition;
        private static readonly __ModelProperty _Block_RedType;
        private static readonly __ModelProperty _CSharpElement_Annotations;
        private static readonly __ModelProperty _CSharpElement_CSharpName;
        private static readonly __ModelProperty _CSharpElement_AntlrName;
        private static readonly __ModelProperty _CSharpElement_Binders;
        private static readonly __ModelProperty _CSharpElement_ContainsBinders;
        private static readonly __ModelProperty _Declaration_Name;
        private static readonly __ModelProperty _Declaration_Namespace;
        private static readonly __ModelProperty _Declaration_FullName;
        private static readonly __ModelProperty _Element_Name;
        private static readonly __ModelProperty _Element_Assignment;
        private static readonly __ModelProperty _Element_Value;
        private static readonly __ModelProperty _Element_IsToken;
        private static readonly __ModelProperty _Element_IsList;
        private static readonly __ModelProperty _Element_FieldName;
        private static readonly __ModelProperty _Element_ParameterName;
        private static readonly __ModelProperty _Element_PropertyName;
        private static readonly __ModelProperty _Element_GreenFieldType;
        private static readonly __ModelProperty _Element_GreenParameterValue;
        private static readonly __ModelProperty _Element_GreenPropertyType;
        private static readonly __ModelProperty _Element_GreenPropertyValue;
        private static readonly __ModelProperty _Element_GreenSyntaxNullCondition;
        private static readonly __ModelProperty _Element_GreenSyntaxCondition;
        private static readonly __ModelProperty _Element_IsOptionalUpdateParameter;
        private static readonly __ModelProperty _Element_RedFieldType;
        private static readonly __ModelProperty _Element_RedParameterValue;
        private static readonly __ModelProperty _Element_RedPropertyType;
        private static readonly __ModelProperty _Element_RedPropertyValue;
        private static readonly __ModelProperty _Element_RedToGreenArgument;
        private static readonly __ModelProperty _Element_RedToGreenOptionalArgument;
        private static readonly __ModelProperty _Element_RedSyntaxNullCondition;
        private static readonly __ModelProperty _Element_RedSyntaxCondition;
        private static readonly __ModelProperty _Element_VisitCall;
        private static readonly __ModelProperty _ElementValue_Multiplicity;
        private static readonly __ModelProperty _ElementValue_GreenType;
        private static readonly __ModelProperty _ElementValue_GreenSyntaxCondition;
        private static readonly __ModelProperty _ElementValue_RedType;
        private static readonly __ModelProperty _Eof_GreenType;
        private static readonly __ModelProperty _Eof_GreenSyntaxCondition;
        private static readonly __ModelProperty _Eof_RedType;
        private static readonly __ModelProperty _Expression_Value;
        private static readonly __ModelProperty _Fixed_Text;
        private static readonly __ModelProperty _Grammar_Language;
        private static readonly __ModelProperty _Grammar_GrammarRules;
        private static readonly __ModelProperty _Grammar_TokenKinds;
        private static readonly __ModelProperty _Grammar_Tokens;
        private static readonly __ModelProperty _Grammar_Rules;
        private static readonly __ModelProperty _Grammar_Blocks;
        private static readonly __ModelProperty _Grammar_DefaultWhitespace;
        private static readonly __ModelProperty _Grammar_DefaultEndOfLine;
        private static readonly __ModelProperty _Grammar_DefaultSeparator;
        private static readonly __ModelProperty _Grammar_DefaultIdentifier;
        private static readonly __ModelProperty _Grammar_MainRule;
        private static readonly __ModelProperty _GrammarRule_Language;
        private static readonly __ModelProperty _GrammarRule_Grammar;
        private static readonly __ModelProperty _LAlternative_IsFixed;
        private static readonly __ModelProperty _LAlternative_FixedText;
        private static readonly __ModelProperty _LAlternative_Elements;
        private static readonly __ModelProperty _Language_BaseLanguages;
        private static readonly __ModelProperty _Language_Grammar;
        private static readonly __ModelProperty _LBlock_IsFixed;
        private static readonly __ModelProperty _LBlock_FixedText;
        private static readonly __ModelProperty _LBlock_Alternatives;
        private static readonly __ModelProperty _LElement_IsFixed;
        private static readonly __ModelProperty _LElement_FixedText;
        private static readonly __ModelProperty _LElement_IsNegated;
        private static readonly __ModelProperty _LElement_Value;
        private static readonly __ModelProperty _LElement_Multiplicity;
        private static readonly __ModelProperty _LElementValue_IsFixed;
        private static readonly __ModelProperty _LElementValue_FixedText;
        private static readonly __ModelProperty _LexerRule_Alternatives;
        private static readonly __ModelProperty _LexerRule_IsFixed;
        private static readonly __ModelProperty _LexerRule_FixedText;
        private static readonly __ModelProperty _LFixed_IsFixed;
        private static readonly __ModelProperty _LFixed_FixedText;
        private static readonly __ModelProperty _LFixed_Text;
        private static readonly __ModelProperty _LRange_IsFixed;
        private static readonly __ModelProperty _LRange_FixedText;
        private static readonly __ModelProperty _LRange_StartChar;
        private static readonly __ModelProperty _LRange_EndChar;
        private static readonly __ModelProperty _LReference_IsFixed;
        private static readonly __ModelProperty _LReference_FixedText;
        private static readonly __ModelProperty _LReference_Rule;
        private static readonly __ModelProperty _LSet_IsFixed;
        private static readonly __ModelProperty _LSet_FixedText;
        private static readonly __ModelProperty _LSet_Items;
        private static readonly __ModelProperty _LSetChar_IsFixed;
        private static readonly __ModelProperty _LSetChar_FixedText;
        private static readonly __ModelProperty _LSetChar_Char;
        private static readonly __ModelProperty _LSetItem_IsFixed;
        private static readonly __ModelProperty _LSetItem_FixedText;
        private static readonly __ModelProperty _LSetRange_IsFixed;
        private static readonly __ModelProperty _LSetRange_FixedText;
        private static readonly __ModelProperty _LSetRange_StartChar;
        private static readonly __ModelProperty _LSetRange_EndChar;
        private static readonly __ModelProperty _LWildCard_IsFixed;
        private static readonly __ModelProperty _LWildCard_FixedText;
        private static readonly __ModelProperty _Rule_ReturnType;
        private static readonly __ModelProperty _Rule_Alternatives;
        private static readonly __ModelProperty _Rule_BaseRule;
        private static readonly __ModelProperty _Rule_GreenName;
        private static readonly __ModelProperty _Rule_RedName;
        private static readonly __ModelProperty _RuleRef_GrammarRule;
        private static readonly __ModelProperty _RuleRef_ReferencedTypes;
        private static readonly __ModelProperty _RuleRef_Token;
        private static readonly __ModelProperty _RuleRef_Rule;
        private static readonly __ModelProperty _RuleRef_GreenType;
        private static readonly __ModelProperty _RuleRef_GreenSyntaxCondition;
        private static readonly __ModelProperty _RuleRef_RedType;
        private static readonly __ModelProperty _SeparatedList_SeparatorFirst;
        private static readonly __ModelProperty _SeparatedList_RepeatedSeparatorFirst;
        private static readonly __ModelProperty _SeparatedList_FirstItems;
        private static readonly __ModelProperty _SeparatedList_FirstSeparators;
        private static readonly __ModelProperty _SeparatedList_RepeatedBlock;
        private static readonly __ModelProperty _SeparatedList_RepeatedItem;
        private static readonly __ModelProperty _SeparatedList_RepeatedSeparator;
        private static readonly __ModelProperty _SeparatedList_LastItems;
        private static readonly __ModelProperty _SeparatedList_LastSeparators;
        private static readonly __ModelProperty _SeparatedList_GreenType;
        private static readonly __ModelProperty _SeparatedList_GreenSyntaxCondition;
        private static readonly __ModelProperty _SeparatedList_RedType;
        private static readonly __ModelProperty _Token_ReturnType;
        private static readonly __ModelProperty _Token_IsTrivia;
        private static readonly __ModelProperty _Token_TokenKind;
        private static readonly __ModelProperty _TokenAlts_Tokens;
        private static readonly __ModelProperty _TokenAlts_GreenType;
        private static readonly __ModelProperty _TokenAlts_GreenSyntaxCondition;
        private static readonly __ModelProperty _TokenAlts_RedType;
        private static readonly __ModelProperty _TokenKind_Name;
        private static readonly __ModelProperty _TokenKind_TypeName;
    
        static Compiler()
        {
            _Alternative_Elements = new __ModelProperty(typeof(Alternative), "Elements", typeof(Element), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, "Elements");
            _Alternative_GreenConstructorArguments = new __ModelProperty(typeof(Alternative), "GreenConstructorArguments", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_GreenConstructorParameters = new __ModelProperty(typeof(Alternative), "GreenConstructorParameters", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_GreenName = new __ModelProperty(typeof(Alternative), "GreenName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_GreenUpdateArguments = new __ModelProperty(typeof(Alternative), "GreenUpdateArguments", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_GreenUpdateParameters = new __ModelProperty(typeof(Alternative), "GreenUpdateParameters", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_HasRedToGreenOptionalArguments = new __ModelProperty(typeof(Alternative), "HasRedToGreenOptionalArguments", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_RedName = new __ModelProperty(typeof(Alternative), "RedName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_RedOptionalUpdateParameters = new __ModelProperty(typeof(Alternative), "RedOptionalUpdateParameters", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_RedToGreenArgumentList = new __ModelProperty(typeof(Alternative), "RedToGreenArgumentList", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_RedToGreenOptionalArgumentList = new __ModelProperty(typeof(Alternative), "RedToGreenOptionalArgumentList", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_RedUpdateArguments = new __ModelProperty(typeof(Alternative), "RedUpdateArguments", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_RedUpdateParameters = new __ModelProperty(typeof(Alternative), "RedUpdateParameters", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Alternative_ReturnType = new __ModelProperty(typeof(Alternative), "ReturnType", typeof(MetaDslx.CodeAnalysis.MetaType), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, "ReturnType");
            _Alternative_ReturnValue = new __ModelProperty(typeof(Alternative), "ReturnValue", typeof(MetaDslx.Languages.MetaCompiler.Model.Expression), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Single, "ReturnValue");
            _Annotation_Arguments = new __ModelProperty(typeof(Annotation), "Arguments", typeof(AnnotationArgument), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, "Arguments");
            _Annotation_AttributeClass = new __ModelProperty(typeof(Annotation), "AttributeClass", typeof(MetaDslx.CodeAnalysis.MetaType), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, "AttributeClass");
            _AnnotationArgument_NamedParameter = new __ModelProperty(typeof(AnnotationArgument), "NamedParameter", typeof(__MetaSymbol), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Collection, "NamedParameter");
            _AnnotationArgument_Parameter = new __ModelProperty(typeof(AnnotationArgument), "Parameter", typeof(MetaDslx.CodeAnalysis.Symbols.DeclarationSymbol), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.Single, "Parameter");
            _AnnotationArgument_ParameterType = new __ModelProperty(typeof(AnnotationArgument), "ParameterType", typeof(MetaDslx.CodeAnalysis.MetaType), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _AnnotationArgument_Value = new __ModelProperty(typeof(AnnotationArgument), "Value", typeof(MetaDslx.Languages.MetaCompiler.Model.Expression), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Single, "Value");
            _ArrayExpression_Items = new __ModelProperty(typeof(ArrayExpression), "Items", typeof(Expression), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Collection, null);
            _Binder_Arguments = new __ModelProperty(typeof(Binder), "Arguments", typeof(BinderArgument), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _Binder_ConstructorArguments = new __ModelProperty(typeof(Binder), "ConstructorArguments", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Binder_IsNegated = new __ModelProperty(typeof(Binder), "IsNegated", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Binder_TypeName = new __ModelProperty(typeof(Binder), "TypeName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _BinderArgument_IsArray = new __ModelProperty(typeof(BinderArgument), "IsArray", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _BinderArgument_Name = new __ModelProperty(typeof(BinderArgument), "Name", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _BinderArgument_TypeName = new __ModelProperty(typeof(BinderArgument), "TypeName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _BinderArgument_Values = new __ModelProperty(typeof(BinderArgument), "Values", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Collection, null);
            _Block_GreenSyntaxCondition = new __ModelProperty(typeof(Block), "GreenSyntaxCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Block_GreenType = new __ModelProperty(typeof(Block), "GreenType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Block_RedType = new __ModelProperty(typeof(Block), "RedType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _CSharpElement_Annotations = new __ModelProperty(typeof(CSharpElement), "Annotations", typeof(Annotation), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _CSharpElement_AntlrName = new __ModelProperty(typeof(CSharpElement), "AntlrName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _CSharpElement_Binders = new __ModelProperty(typeof(CSharpElement), "Binders", typeof(Binder), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _CSharpElement_ContainsBinders = new __ModelProperty(typeof(CSharpElement), "ContainsBinders", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _CSharpElement_CSharpName = new __ModelProperty(typeof(CSharpElement), "CSharpName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Declaration_FullName = new __ModelProperty(typeof(Declaration), "FullName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Declaration_Name = new __ModelProperty(typeof(Declaration), "Name", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.Name, "Name");
            _Declaration_Namespace = new __ModelProperty(typeof(Declaration), "Namespace", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_Assignment = new __ModelProperty(typeof(Element), "Assignment", typeof(MetaDslx.Languages.MetaCompiler.Model.Assignment), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.EnumType | __ModelPropertyFlags.Single, "Assignment");
            _Element_FieldName = new __ModelProperty(typeof(Element), "FieldName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_GreenFieldType = new __ModelProperty(typeof(Element), "GreenFieldType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_GreenParameterValue = new __ModelProperty(typeof(Element), "GreenParameterValue", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_GreenPropertyType = new __ModelProperty(typeof(Element), "GreenPropertyType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_GreenPropertyValue = new __ModelProperty(typeof(Element), "GreenPropertyValue", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_GreenSyntaxCondition = new __ModelProperty(typeof(Element), "GreenSyntaxCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_GreenSyntaxNullCondition = new __ModelProperty(typeof(Element), "GreenSyntaxNullCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_IsList = new __ModelProperty(typeof(Element), "IsList", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_IsOptionalUpdateParameter = new __ModelProperty(typeof(Element), "IsOptionalUpdateParameter", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_IsToken = new __ModelProperty(typeof(Element), "IsToken", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_Name = new __ModelProperty(typeof(Element), "Name", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.Name, "Name");
            _Element_ParameterName = new __ModelProperty(typeof(Element), "ParameterName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_PropertyName = new __ModelProperty(typeof(Element), "PropertyName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_RedFieldType = new __ModelProperty(typeof(Element), "RedFieldType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_RedParameterValue = new __ModelProperty(typeof(Element), "RedParameterValue", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_RedPropertyType = new __ModelProperty(typeof(Element), "RedPropertyType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_RedPropertyValue = new __ModelProperty(typeof(Element), "RedPropertyValue", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_RedSyntaxCondition = new __ModelProperty(typeof(Element), "RedSyntaxCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_RedSyntaxNullCondition = new __ModelProperty(typeof(Element), "RedSyntaxNullCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_RedToGreenArgument = new __ModelProperty(typeof(Element), "RedToGreenArgument", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_RedToGreenOptionalArgument = new __ModelProperty(typeof(Element), "RedToGreenOptionalArgument", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Element_Value = new __ModelProperty(typeof(Element), "Value", typeof(MetaDslx.Languages.MetaCompiler.Model.ElementValue), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Single, "Value");
            _Element_VisitCall = new __ModelProperty(typeof(Element), "VisitCall", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _ElementValue_GreenSyntaxCondition = new __ModelProperty(typeof(ElementValue), "GreenSyntaxCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _ElementValue_GreenType = new __ModelProperty(typeof(ElementValue), "GreenType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _ElementValue_Multiplicity = new __ModelProperty(typeof(ElementValue), "Multiplicity", typeof(MetaDslx.Languages.MetaCompiler.Model.Multiplicity), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.EnumType | __ModelPropertyFlags.Single, null);
            _ElementValue_RedType = new __ModelProperty(typeof(ElementValue), "RedType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Eof_GreenSyntaxCondition = new __ModelProperty(typeof(Eof), "GreenSyntaxCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Eof_GreenType = new __ModelProperty(typeof(Eof), "GreenType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Eof_RedType = new __ModelProperty(typeof(Eof), "RedType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Expression_Value = new __ModelProperty(typeof(Expression), "Value", typeof(MetaDslx.CodeAnalysis.MetaSymbol), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, "Value");
            _Fixed_Text = new __ModelProperty(typeof(Fixed), "Text", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Grammar_Blocks = new __ModelProperty(typeof(Grammar), "Blocks", typeof(Block), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Collection, null);
            _Grammar_DefaultEndOfLine = new __ModelProperty(typeof(Grammar), "DefaultEndOfLine", typeof(Token), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Grammar_DefaultIdentifier = new __ModelProperty(typeof(Grammar), "DefaultIdentifier", typeof(Token), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Grammar_DefaultSeparator = new __ModelProperty(typeof(Grammar), "DefaultSeparator", typeof(Token), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Grammar_DefaultWhitespace = new __ModelProperty(typeof(Grammar), "DefaultWhitespace", typeof(Token), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Grammar_GrammarRules = new __ModelProperty(typeof(Grammar), "GrammarRules", typeof(GrammarRule), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _Grammar_Language = new __ModelProperty(typeof(Grammar), "Language", typeof(MetaDslx.Languages.MetaCompiler.Model.Language), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Grammar_MainRule = new __ModelProperty(typeof(Grammar), "MainRule", typeof(Rule), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Grammar_Rules = new __ModelProperty(typeof(Grammar), "Rules", typeof(Rule), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _Grammar_TokenKinds = new __ModelProperty(typeof(Grammar), "TokenKinds", typeof(TokenKind), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _Grammar_Tokens = new __ModelProperty(typeof(Grammar), "Tokens", typeof(Token), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _GrammarRule_Grammar = new __ModelProperty(typeof(GrammarRule), "Grammar", typeof(MetaDslx.Languages.MetaCompiler.Model.Grammar), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _GrammarRule_Language = new __ModelProperty(typeof(GrammarRule), "Language", typeof(MetaDslx.Languages.MetaCompiler.Model.Language), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LAlternative_Elements = new __ModelProperty(typeof(LAlternative), "Elements", typeof(LElement), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _LAlternative_FixedText = new __ModelProperty(typeof(LAlternative), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LAlternative_IsFixed = new __ModelProperty(typeof(LAlternative), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Language_BaseLanguages = new __ModelProperty(typeof(Language), "BaseLanguages", typeof(__MetaType), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Collection, null);
            _Language_Grammar = new __ModelProperty(typeof(Language), "Grammar", typeof(MetaDslx.Languages.MetaCompiler.Model.Grammar), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Single, null);
            _LBlock_Alternatives = new __ModelProperty(typeof(LBlock), "Alternatives", typeof(LAlternative), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _LBlock_FixedText = new __ModelProperty(typeof(LBlock), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LBlock_IsFixed = new __ModelProperty(typeof(LBlock), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LElement_FixedText = new __ModelProperty(typeof(LElement), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LElement_IsFixed = new __ModelProperty(typeof(LElement), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LElement_IsNegated = new __ModelProperty(typeof(LElement), "IsNegated", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _LElement_Multiplicity = new __ModelProperty(typeof(LElement), "Multiplicity", typeof(MetaDslx.Languages.MetaCompiler.Model.Multiplicity), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.EnumType | __ModelPropertyFlags.Single, null);
            _LElement_Value = new __ModelProperty(typeof(LElement), "Value", typeof(MetaDslx.Languages.MetaCompiler.Model.LElementValue), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Single, null);
            _LElementValue_FixedText = new __ModelProperty(typeof(LElementValue), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LElementValue_IsFixed = new __ModelProperty(typeof(LElementValue), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LexerRule_Alternatives = new __ModelProperty(typeof(LexerRule), "Alternatives", typeof(LAlternative), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _LexerRule_FixedText = new __ModelProperty(typeof(LexerRule), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LexerRule_IsFixed = new __ModelProperty(typeof(LexerRule), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LFixed_FixedText = new __ModelProperty(typeof(LFixed), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LFixed_IsFixed = new __ModelProperty(typeof(LFixed), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LFixed_Text = new __ModelProperty(typeof(LFixed), "Text", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _LRange_EndChar = new __ModelProperty(typeof(LRange), "EndChar", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _LRange_FixedText = new __ModelProperty(typeof(LRange), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LRange_IsFixed = new __ModelProperty(typeof(LRange), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LRange_StartChar = new __ModelProperty(typeof(LRange), "StartChar", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _LReference_FixedText = new __ModelProperty(typeof(LReference), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LReference_IsFixed = new __ModelProperty(typeof(LReference), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LReference_Rule = new __ModelProperty(typeof(LReference), "Rule", typeof(MetaDslx.Languages.MetaCompiler.Model.LexerRule), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _LSet_FixedText = new __ModelProperty(typeof(LSet), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LSet_IsFixed = new __ModelProperty(typeof(LSet), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LSet_Items = new __ModelProperty(typeof(LSet), "Items", typeof(LSetItem), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _LSetChar_Char = new __ModelProperty(typeof(LSetChar), "Char", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _LSetChar_FixedText = new __ModelProperty(typeof(LSetChar), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LSetChar_IsFixed = new __ModelProperty(typeof(LSetChar), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LSetItem_FixedText = new __ModelProperty(typeof(LSetItem), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LSetItem_IsFixed = new __ModelProperty(typeof(LSetItem), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LSetRange_EndChar = new __ModelProperty(typeof(LSetRange), "EndChar", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _LSetRange_FixedText = new __ModelProperty(typeof(LSetRange), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LSetRange_IsFixed = new __ModelProperty(typeof(LSetRange), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LSetRange_StartChar = new __ModelProperty(typeof(LSetRange), "StartChar", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _LWildCard_FixedText = new __ModelProperty(typeof(LWildCard), "FixedText", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _LWildCard_IsFixed = new __ModelProperty(typeof(LWildCard), "IsFixed", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Rule_Alternatives = new __ModelProperty(typeof(Rule), "Alternatives", typeof(Alternative), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, "Alternatives");
            _Rule_BaseRule = new __ModelProperty(typeof(Rule), "BaseRule", typeof(Alternative), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Rule_GreenName = new __ModelProperty(typeof(Rule), "GreenName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Rule_RedName = new __ModelProperty(typeof(Rule), "RedName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Rule_ReturnType = new __ModelProperty(typeof(Rule), "ReturnType", typeof(MetaDslx.CodeAnalysis.MetaType), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, "ReturnType");
            _RuleRef_GrammarRule = new __ModelProperty(typeof(RuleRef), "GrammarRule", typeof(MetaDslx.Languages.MetaCompiler.Model.GrammarRule), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, "Rule");
            _RuleRef_GreenSyntaxCondition = new __ModelProperty(typeof(RuleRef), "GreenSyntaxCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _RuleRef_GreenType = new __ModelProperty(typeof(RuleRef), "GreenType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _RuleRef_RedType = new __ModelProperty(typeof(RuleRef), "RedType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _RuleRef_ReferencedTypes = new __ModelProperty(typeof(RuleRef), "ReferencedTypes", typeof(__MetaType), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Collection, "ReferencedTypes");
            _RuleRef_Rule = new __ModelProperty(typeof(RuleRef), "Rule", typeof(Rule), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _RuleRef_Token = new __ModelProperty(typeof(RuleRef), "Token", typeof(Token), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _SeparatedList_FirstItems = new __ModelProperty(typeof(SeparatedList), "FirstItems", typeof(Element), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _SeparatedList_FirstSeparators = new __ModelProperty(typeof(SeparatedList), "FirstSeparators", typeof(Element), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _SeparatedList_GreenSyntaxCondition = new __ModelProperty(typeof(SeparatedList), "GreenSyntaxCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _SeparatedList_GreenType = new __ModelProperty(typeof(SeparatedList), "GreenType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _SeparatedList_LastItems = new __ModelProperty(typeof(SeparatedList), "LastItems", typeof(Element), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _SeparatedList_LastSeparators = new __ModelProperty(typeof(SeparatedList), "LastSeparators", typeof(Element), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _SeparatedList_RedType = new __ModelProperty(typeof(SeparatedList), "RedType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _SeparatedList_RepeatedBlock = new __ModelProperty(typeof(SeparatedList), "RepeatedBlock", typeof(MetaDslx.Languages.MetaCompiler.Model.Element), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Single, null);
            _SeparatedList_RepeatedItem = new __ModelProperty(typeof(SeparatedList), "RepeatedItem", typeof(MetaDslx.Languages.MetaCompiler.Model.Element), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _SeparatedList_RepeatedSeparator = new __ModelProperty(typeof(SeparatedList), "RepeatedSeparator", typeof(MetaDslx.Languages.MetaCompiler.Model.Element), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _SeparatedList_RepeatedSeparatorFirst = new __ModelProperty(typeof(SeparatedList), "RepeatedSeparatorFirst", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _SeparatedList_SeparatorFirst = new __ModelProperty(typeof(SeparatedList), "SeparatorFirst", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Token_IsTrivia = new __ModelProperty(typeof(Token), "IsTrivia", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Token_ReturnType = new __ModelProperty(typeof(Token), "ReturnType", typeof(MetaDslx.CodeAnalysis.MetaType), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, "ReturnType");
            _Token_TokenKind = new __ModelProperty(typeof(Token), "TokenKind", typeof(TokenKind), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _TokenAlts_GreenSyntaxCondition = new __ModelProperty(typeof(TokenAlts), "GreenSyntaxCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _TokenAlts_GreenType = new __ModelProperty(typeof(TokenAlts), "GreenType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _TokenAlts_RedType = new __ModelProperty(typeof(TokenAlts), "RedType", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _TokenAlts_Tokens = new __ModelProperty(typeof(TokenAlts), "Tokens", typeof(RuleRef), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _TokenKind_Name = new __ModelProperty(typeof(TokenKind), "Name", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _TokenKind_TypeName = new __ModelProperty(typeof(TokenKind), "TypeName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _instance = new Compiler();
        }
    
        private readonly __Model _model;
    
        private readonly global::System.Collections.Immutable.ImmutableArray<__MetaType> _enumTypes;
        private readonly global::System.Collections.Immutable.ImmutableArray<__ModelEnumInfo> _enumInfos;
        private readonly global::System.Collections.Immutable.ImmutableDictionary<__MetaType, __ModelEnumInfo> _enumInfosByType;
        private readonly global::System.Collections.Immutable.ImmutableDictionary<string, __ModelEnumInfo> _enumInfosByName;
    
        private readonly global::System.Collections.Immutable.ImmutableArray<__MetaType> _classTypes;
        private readonly global::System.Collections.Immutable.ImmutableArray<__ModelClassInfo> _classInfos;
        private readonly global::System.Collections.Immutable.ImmutableDictionary<__MetaType, __ModelClassInfo> _classInfosByType;
        private readonly global::System.Collections.Immutable.ImmutableDictionary<string, __ModelClassInfo> _classInfosByName;
    
    
        private Compiler()
        {
            _enumTypes = __ImmutableArray.Create<__MetaType>(typeof(Assignment), typeof(Multiplicity));
            _enumInfos = __ImmutableArray.Create<__ModelEnumInfo>(AssignmentInfo, MultiplicityInfo);
            var enumInfosByType = __ImmutableDictionary.CreateBuilder<__MetaType, __ModelEnumInfo>();
            enumInfosByType.Add(typeof(Assignment), AssignmentInfo);
            enumInfosByType.Add(typeof(Multiplicity), MultiplicityInfo);
            _enumInfosByType = enumInfosByType.ToImmutable();
            var enumInfosByName = __ImmutableDictionary.CreateBuilder<string, __ModelEnumInfo>();
            enumInfosByName.Add("Assignment", AssignmentInfo);
            enumInfosByName.Add("Multiplicity", MultiplicityInfo);
            _enumInfosByName = enumInfosByName.ToImmutable();
    
            _classTypes = __ImmutableArray.Create<__MetaType>(typeof(Alternative), typeof(Annotation), typeof(AnnotationArgument), typeof(ArrayExpression), typeof(Binder), typeof(BinderArgument), typeof(Block), typeof(CSharpElement), typeof(Declaration), typeof(Element), typeof(ElementValue), typeof(Eof), typeof(Expression), typeof(Fixed), typeof(Fragment), typeof(Grammar), typeof(GrammarRule), typeof(LAlternative), typeof(Language), typeof(LBlock), typeof(LElement), typeof(LElementValue), typeof(LexerRule), typeof(LFixed), typeof(LRange), typeof(LReference), typeof(LSet), typeof(LSetChar), typeof(LSetItem), typeof(LSetRange), typeof(LWildCard), typeof(Rule), typeof(RuleRef), typeof(SeparatedList), typeof(Token), typeof(TokenAlts), typeof(TokenKind));
            _classInfos = __ImmutableArray.Create<__ModelClassInfo>(AlternativeInfo, AnnotationInfo, AnnotationArgumentInfo, ArrayExpressionInfo, BinderInfo, BinderArgumentInfo, BlockInfo, CSharpElementInfo, DeclarationInfo, ElementInfo, ElementValueInfo, EofInfo, ExpressionInfo, FixedInfo, FragmentInfo, GrammarInfo, GrammarRuleInfo, LAlternativeInfo, LanguageInfo, LBlockInfo, LElementInfo, LElementValueInfo, LexerRuleInfo, LFixedInfo, LRangeInfo, LReferenceInfo, LSetInfo, LSetCharInfo, LSetItemInfo, LSetRangeInfo, LWildCardInfo, RuleInfo, RuleRefInfo, SeparatedListInfo, TokenInfo, TokenAltsInfo, TokenKindInfo);
            var classInfosByType = __ImmutableDictionary.CreateBuilder<__MetaType, __ModelClassInfo>();
            classInfosByType.Add(typeof(Alternative), AlternativeInfo);
            classInfosByType.Add(typeof(Annotation), AnnotationInfo);
            classInfosByType.Add(typeof(AnnotationArgument), AnnotationArgumentInfo);
            classInfosByType.Add(typeof(ArrayExpression), ArrayExpressionInfo);
            classInfosByType.Add(typeof(Binder), BinderInfo);
            classInfosByType.Add(typeof(BinderArgument), BinderArgumentInfo);
            classInfosByType.Add(typeof(Block), BlockInfo);
            classInfosByType.Add(typeof(CSharpElement), CSharpElementInfo);
            classInfosByType.Add(typeof(Declaration), DeclarationInfo);
            classInfosByType.Add(typeof(Element), ElementInfo);
            classInfosByType.Add(typeof(ElementValue), ElementValueInfo);
            classInfosByType.Add(typeof(Eof), EofInfo);
            classInfosByType.Add(typeof(Expression), ExpressionInfo);
            classInfosByType.Add(typeof(Fixed), FixedInfo);
            classInfosByType.Add(typeof(Fragment), FragmentInfo);
            classInfosByType.Add(typeof(Grammar), GrammarInfo);
            classInfosByType.Add(typeof(GrammarRule), GrammarRuleInfo);
            classInfosByType.Add(typeof(LAlternative), LAlternativeInfo);
            classInfosByType.Add(typeof(Language), LanguageInfo);
            classInfosByType.Add(typeof(LBlock), LBlockInfo);
            classInfosByType.Add(typeof(LElement), LElementInfo);
            classInfosByType.Add(typeof(LElementValue), LElementValueInfo);
            classInfosByType.Add(typeof(LexerRule), LexerRuleInfo);
            classInfosByType.Add(typeof(LFixed), LFixedInfo);
            classInfosByType.Add(typeof(LRange), LRangeInfo);
            classInfosByType.Add(typeof(LReference), LReferenceInfo);
            classInfosByType.Add(typeof(LSet), LSetInfo);
            classInfosByType.Add(typeof(LSetChar), LSetCharInfo);
            classInfosByType.Add(typeof(LSetItem), LSetItemInfo);
            classInfosByType.Add(typeof(LSetRange), LSetRangeInfo);
            classInfosByType.Add(typeof(LWildCard), LWildCardInfo);
            classInfosByType.Add(typeof(Rule), RuleInfo);
            classInfosByType.Add(typeof(RuleRef), RuleRefInfo);
            classInfosByType.Add(typeof(SeparatedList), SeparatedListInfo);
            classInfosByType.Add(typeof(Token), TokenInfo);
            classInfosByType.Add(typeof(TokenAlts), TokenAltsInfo);
            classInfosByType.Add(typeof(TokenKind), TokenKindInfo);
            _classInfosByType = classInfosByType.ToImmutable();
            var classInfosByName = __ImmutableDictionary.CreateBuilder<string, __ModelClassInfo>();
            classInfosByName.Add("Alternative", AlternativeInfo);
            classInfosByName.Add("Annotation", AnnotationInfo);
            classInfosByName.Add("AnnotationArgument", AnnotationArgumentInfo);
            classInfosByName.Add("ArrayExpression", ArrayExpressionInfo);
            classInfosByName.Add("Binder", BinderInfo);
            classInfosByName.Add("BinderArgument", BinderArgumentInfo);
            classInfosByName.Add("Block", BlockInfo);
            classInfosByName.Add("CSharpElement", CSharpElementInfo);
            classInfosByName.Add("Declaration", DeclarationInfo);
            classInfosByName.Add("Element", ElementInfo);
            classInfosByName.Add("ElementValue", ElementValueInfo);
            classInfosByName.Add("Eof", EofInfo);
            classInfosByName.Add("Expression", ExpressionInfo);
            classInfosByName.Add("Fixed", FixedInfo);
            classInfosByName.Add("Fragment", FragmentInfo);
            classInfosByName.Add("Grammar", GrammarInfo);
            classInfosByName.Add("GrammarRule", GrammarRuleInfo);
            classInfosByName.Add("LAlternative", LAlternativeInfo);
            classInfosByName.Add("Language", LanguageInfo);
            classInfosByName.Add("LBlock", LBlockInfo);
            classInfosByName.Add("LElement", LElementInfo);
            classInfosByName.Add("LElementValue", LElementValueInfo);
            classInfosByName.Add("LexerRule", LexerRuleInfo);
            classInfosByName.Add("LFixed", LFixedInfo);
            classInfosByName.Add("LRange", LRangeInfo);
            classInfosByName.Add("LReference", LReferenceInfo);
            classInfosByName.Add("LSet", LSetInfo);
            classInfosByName.Add("LSetChar", LSetCharInfo);
            classInfosByName.Add("LSetItem", LSetItemInfo);
            classInfosByName.Add("LSetRange", LSetRangeInfo);
            classInfosByName.Add("LWildCard", LWildCardInfo);
            classInfosByName.Add("Rule", RuleInfo);
            classInfosByName.Add("RuleRef", RuleRefInfo);
            classInfosByName.Add("SeparatedList", SeparatedListInfo);
            classInfosByName.Add("Token", TokenInfo);
            classInfosByName.Add("TokenAlts", TokenAltsInfo);
            classInfosByName.Add("TokenKind", TokenKindInfo);
            _classInfosByName = classInfosByName.ToImmutable();
            _model = new __Model();
            var cf = new CompilerModelFactory(_model, this);
            var f = new __MetaModelFactory(_model);
            var obj1 = f.MetaModel();
            var obj2 = f.MetaClass();
            var obj3 = f.MetaProperty();
            var obj4 = f.MetaProperty();
            var obj5 = f.MetaProperty();
            var obj6 = f.MetaProperty();
            var obj7 = f.MetaProperty();
            var obj8 = f.MetaProperty();
            var obj9 = f.MetaProperty();
            var obj10 = f.MetaProperty();
            var obj11 = f.MetaProperty();
            var obj12 = f.MetaProperty();
            var obj13 = f.MetaProperty();
            var obj14 = f.MetaProperty();
            var obj15 = f.MetaProperty();
            var obj16 = f.MetaProperty();
            var obj17 = f.MetaProperty();
            var obj18 = f.MetaTypeReference();
            var obj19 = f.MetaTypeReference();
            var obj20 = f.MetaTypeReference();
            var obj21 = f.MetaTypeReference();
            var obj22 = f.MetaTypeReference();
            var obj23 = f.MetaTypeReference();
            var obj24 = f.MetaTypeReference();
            var obj25 = f.MetaTypeReference();
            var obj26 = f.MetaTypeReference();
            var obj27 = f.MetaTypeReference();
            var obj28 = f.MetaTypeReference();
            var obj29 = f.MetaTypeReference();
            var obj30 = f.MetaTypeReference();
            var obj31 = f.MetaTypeReference();
            var obj32 = f.MetaTypeReference();
            var obj33 = f.MetaClass();
            var obj34 = f.MetaProperty();
            var obj35 = f.MetaProperty();
            var obj36 = f.MetaTypeReference();
            var obj37 = f.MetaTypeReference();
            var obj38 = f.MetaClass();
            var obj39 = f.MetaProperty();
            var obj40 = f.MetaProperty();
            var obj41 = f.MetaProperty();
            var obj42 = f.MetaProperty();
            var obj43 = f.MetaTypeReference();
            var obj44 = f.MetaTypeReference();
            var obj45 = f.MetaTypeReference();
            var obj46 = f.MetaTypeReference();
            var obj47 = f.MetaClass();
            var obj48 = f.MetaProperty();
            var obj49 = f.MetaTypeReference();
            var obj50 = f.MetaClass();
            var obj51 = f.MetaProperty();
            var obj52 = f.MetaProperty();
            var obj53 = f.MetaProperty();
            var obj54 = f.MetaProperty();
            var obj55 = f.MetaTypeReference();
            var obj56 = f.MetaTypeReference();
            var obj57 = f.MetaTypeReference();
            var obj58 = f.MetaTypeReference();
            var obj59 = f.MetaClass();
            var obj60 = f.MetaProperty();
            var obj61 = f.MetaProperty();
            var obj62 = f.MetaProperty();
            var obj63 = f.MetaProperty();
            var obj64 = f.MetaTypeReference();
            var obj65 = f.MetaTypeReference();
            var obj66 = f.MetaTypeReference();
            var obj67 = f.MetaTypeReference();
            var obj68 = f.MetaClass();
            var obj69 = f.MetaProperty();
            var obj70 = f.MetaProperty();
            var obj71 = f.MetaProperty();
            var obj72 = f.MetaTypeReference();
            var obj73 = f.MetaTypeReference();
            var obj74 = f.MetaTypeReference();
            var obj75 = f.MetaClass();
            var obj76 = f.MetaProperty();
            var obj77 = f.MetaProperty();
            var obj78 = f.MetaProperty();
            var obj79 = f.MetaProperty();
            var obj80 = f.MetaProperty();
            var obj81 = f.MetaTypeReference();
            var obj82 = f.MetaTypeReference();
            var obj83 = f.MetaTypeReference();
            var obj84 = f.MetaTypeReference();
            var obj85 = f.MetaTypeReference();
            var obj86 = f.MetaClass();
            var obj87 = f.MetaProperty();
            var obj88 = f.MetaProperty();
            var obj89 = f.MetaProperty();
            var obj90 = f.MetaTypeReference();
            var obj91 = f.MetaTypeReference();
            var obj92 = f.MetaTypeReference();
            var obj93 = f.MetaClass();
            var obj94 = f.MetaProperty();
            var obj95 = f.MetaProperty();
            var obj96 = f.MetaProperty();
            var obj97 = f.MetaProperty();
            var obj98 = f.MetaProperty();
            var obj99 = f.MetaProperty();
            var obj100 = f.MetaProperty();
            var obj101 = f.MetaProperty();
            var obj102 = f.MetaProperty();
            var obj103 = f.MetaProperty();
            var obj104 = f.MetaProperty();
            var obj105 = f.MetaProperty();
            var obj106 = f.MetaProperty();
            var obj107 = f.MetaProperty();
            var obj108 = f.MetaProperty();
            var obj109 = f.MetaProperty();
            var obj110 = f.MetaProperty();
            var obj111 = f.MetaProperty();
            var obj112 = f.MetaProperty();
            var obj113 = f.MetaProperty();
            var obj114 = f.MetaProperty();
            var obj115 = f.MetaProperty();
            var obj116 = f.MetaProperty();
            var obj117 = f.MetaProperty();
            var obj118 = f.MetaTypeReference();
            var obj119 = f.MetaTypeReference();
            var obj120 = f.MetaTypeReference();
            var obj121 = f.MetaTypeReference();
            var obj122 = f.MetaTypeReference();
            var obj123 = f.MetaTypeReference();
            var obj124 = f.MetaTypeReference();
            var obj125 = f.MetaTypeReference();
            var obj126 = f.MetaTypeReference();
            var obj127 = f.MetaTypeReference();
            var obj128 = f.MetaTypeReference();
            var obj129 = f.MetaTypeReference();
            var obj130 = f.MetaTypeReference();
            var obj131 = f.MetaTypeReference();
            var obj132 = f.MetaTypeReference();
            var obj133 = f.MetaTypeReference();
            var obj134 = f.MetaTypeReference();
            var obj135 = f.MetaTypeReference();
            var obj136 = f.MetaTypeReference();
            var obj137 = f.MetaTypeReference();
            var obj138 = f.MetaTypeReference();
            var obj139 = f.MetaTypeReference();
            var obj140 = f.MetaTypeReference();
            var obj141 = f.MetaTypeReference();
            var obj142 = f.MetaClass();
            var obj143 = f.MetaProperty();
            var obj144 = f.MetaProperty();
            var obj145 = f.MetaProperty();
            var obj146 = f.MetaProperty();
            var obj147 = f.MetaTypeReference();
            var obj148 = f.MetaTypeReference();
            var obj149 = f.MetaTypeReference();
            var obj150 = f.MetaTypeReference();
            var obj151 = f.MetaClass();
            var obj152 = f.MetaProperty();
            var obj153 = f.MetaProperty();
            var obj154 = f.MetaProperty();
            var obj155 = f.MetaTypeReference();
            var obj156 = f.MetaTypeReference();
            var obj157 = f.MetaTypeReference();
            var obj158 = f.MetaClass();
            var obj159 = f.MetaProperty();
            var obj160 = f.MetaTypeReference();
            var obj161 = f.MetaClass();
            var obj162 = f.MetaProperty();
            var obj163 = f.MetaTypeReference();
            var obj164 = f.MetaClass();
            var obj165 = f.MetaClass();
            var obj166 = f.MetaProperty();
            var obj167 = f.MetaProperty();
            var obj168 = f.MetaProperty();
            var obj169 = f.MetaProperty();
            var obj170 = f.MetaProperty();
            var obj171 = f.MetaProperty();
            var obj172 = f.MetaProperty();
            var obj173 = f.MetaProperty();
            var obj174 = f.MetaProperty();
            var obj175 = f.MetaProperty();
            var obj176 = f.MetaProperty();
            var obj177 = f.MetaTypeReference();
            var obj178 = f.MetaTypeReference();
            var obj179 = f.MetaTypeReference();
            var obj180 = f.MetaTypeReference();
            var obj181 = f.MetaTypeReference();
            var obj182 = f.MetaTypeReference();
            var obj183 = f.MetaTypeReference();
            var obj184 = f.MetaTypeReference();
            var obj185 = f.MetaTypeReference();
            var obj186 = f.MetaTypeReference();
            var obj187 = f.MetaTypeReference();
            var obj188 = f.MetaClass();
            var obj189 = f.MetaProperty();
            var obj190 = f.MetaProperty();
            var obj191 = f.MetaTypeReference();
            var obj192 = f.MetaTypeReference();
            var obj193 = f.MetaClass();
            var obj194 = f.MetaProperty();
            var obj195 = f.MetaProperty();
            var obj196 = f.MetaProperty();
            var obj197 = f.MetaTypeReference();
            var obj198 = f.MetaTypeReference();
            var obj199 = f.MetaTypeReference();
            var obj200 = f.MetaClass();
            var obj201 = f.MetaProperty();
            var obj202 = f.MetaProperty();
            var obj203 = f.MetaTypeReference();
            var obj204 = f.MetaTypeReference();
            var obj205 = f.MetaClass();
            var obj206 = f.MetaProperty();
            var obj207 = f.MetaProperty();
            var obj208 = f.MetaProperty();
            var obj209 = f.MetaTypeReference();
            var obj210 = f.MetaTypeReference();
            var obj211 = f.MetaTypeReference();
            var obj212 = f.MetaClass();
            var obj213 = f.MetaProperty();
            var obj214 = f.MetaProperty();
            var obj215 = f.MetaProperty();
            var obj216 = f.MetaProperty();
            var obj217 = f.MetaProperty();
            var obj218 = f.MetaTypeReference();
            var obj219 = f.MetaTypeReference();
            var obj220 = f.MetaTypeReference();
            var obj221 = f.MetaTypeReference();
            var obj222 = f.MetaTypeReference();
            var obj223 = f.MetaClass();
            var obj224 = f.MetaProperty();
            var obj225 = f.MetaProperty();
            var obj226 = f.MetaTypeReference();
            var obj227 = f.MetaTypeReference();
            var obj228 = f.MetaClass();
            var obj229 = f.MetaProperty();
            var obj230 = f.MetaProperty();
            var obj231 = f.MetaProperty();
            var obj232 = f.MetaTypeReference();
            var obj233 = f.MetaTypeReference();
            var obj234 = f.MetaTypeReference();
            var obj235 = f.MetaClass();
            var obj236 = f.MetaProperty();
            var obj237 = f.MetaProperty();
            var obj238 = f.MetaProperty();
            var obj239 = f.MetaTypeReference();
            var obj240 = f.MetaTypeReference();
            var obj241 = f.MetaTypeReference();
            var obj242 = f.MetaClass();
            var obj243 = f.MetaProperty();
            var obj244 = f.MetaProperty();
            var obj245 = f.MetaProperty();
            var obj246 = f.MetaProperty();
            var obj247 = f.MetaTypeReference();
            var obj248 = f.MetaTypeReference();
            var obj249 = f.MetaTypeReference();
            var obj250 = f.MetaTypeReference();
            var obj251 = f.MetaClass();
            var obj252 = f.MetaProperty();
            var obj253 = f.MetaProperty();
            var obj254 = f.MetaProperty();
            var obj255 = f.MetaTypeReference();
            var obj256 = f.MetaTypeReference();
            var obj257 = f.MetaTypeReference();
            var obj258 = f.MetaClass();
            var obj259 = f.MetaProperty();
            var obj260 = f.MetaProperty();
            var obj261 = f.MetaProperty();
            var obj262 = f.MetaTypeReference();
            var obj263 = f.MetaTypeReference();
            var obj264 = f.MetaTypeReference();
            var obj265 = f.MetaClass();
            var obj266 = f.MetaProperty();
            var obj267 = f.MetaProperty();
            var obj268 = f.MetaProperty();
            var obj269 = f.MetaTypeReference();
            var obj270 = f.MetaTypeReference();
            var obj271 = f.MetaTypeReference();
            var obj272 = f.MetaClass();
            var obj273 = f.MetaProperty();
            var obj274 = f.MetaProperty();
            var obj275 = f.MetaTypeReference();
            var obj276 = f.MetaTypeReference();
            var obj277 = f.MetaClass();
            var obj278 = f.MetaProperty();
            var obj279 = f.MetaProperty();
            var obj280 = f.MetaProperty();
            var obj281 = f.MetaProperty();
            var obj282 = f.MetaTypeReference();
            var obj283 = f.MetaTypeReference();
            var obj284 = f.MetaTypeReference();
            var obj285 = f.MetaTypeReference();
            var obj286 = f.MetaClass();
            var obj287 = f.MetaProperty();
            var obj288 = f.MetaProperty();
            var obj289 = f.MetaTypeReference();
            var obj290 = f.MetaTypeReference();
            var obj291 = f.MetaClass();
            var obj292 = f.MetaProperty();
            var obj293 = f.MetaProperty();
            var obj294 = f.MetaProperty();
            var obj295 = f.MetaProperty();
            var obj296 = f.MetaProperty();
            var obj297 = f.MetaTypeReference();
            var obj298 = f.MetaTypeReference();
            var obj299 = f.MetaTypeReference();
            var obj300 = f.MetaTypeReference();
            var obj301 = f.MetaTypeReference();
            var obj302 = f.MetaClass();
            var obj303 = f.MetaProperty();
            var obj304 = f.MetaProperty();
            var obj305 = f.MetaProperty();
            var obj306 = f.MetaProperty();
            var obj307 = f.MetaProperty();
            var obj308 = f.MetaProperty();
            var obj309 = f.MetaProperty();
            var obj310 = f.MetaTypeReference();
            var obj311 = f.MetaTypeReference();
            var obj312 = f.MetaTypeReference();
            var obj313 = f.MetaTypeReference();
            var obj314 = f.MetaTypeReference();
            var obj315 = f.MetaTypeReference();
            var obj316 = f.MetaTypeReference();
            var obj317 = f.MetaClass();
            var obj318 = f.MetaProperty();
            var obj319 = f.MetaProperty();
            var obj320 = f.MetaProperty();
            var obj321 = f.MetaProperty();
            var obj322 = f.MetaProperty();
            var obj323 = f.MetaProperty();
            var obj324 = f.MetaProperty();
            var obj325 = f.MetaProperty();
            var obj326 = f.MetaProperty();
            var obj327 = f.MetaProperty();
            var obj328 = f.MetaProperty();
            var obj329 = f.MetaProperty();
            var obj330 = f.MetaTypeReference();
            var obj331 = f.MetaTypeReference();
            var obj332 = f.MetaTypeReference();
            var obj333 = f.MetaTypeReference();
            var obj334 = f.MetaTypeReference();
            var obj335 = f.MetaTypeReference();
            var obj336 = f.MetaTypeReference();
            var obj337 = f.MetaTypeReference();
            var obj338 = f.MetaTypeReference();
            var obj339 = f.MetaTypeReference();
            var obj340 = f.MetaTypeReference();
            var obj341 = f.MetaTypeReference();
            var obj342 = f.MetaClass();
            var obj343 = f.MetaProperty();
            var obj344 = f.MetaProperty();
            var obj345 = f.MetaProperty();
            var obj346 = f.MetaTypeReference();
            var obj347 = f.MetaTypeReference();
            var obj348 = f.MetaTypeReference();
            var obj349 = f.MetaClass();
            var obj350 = f.MetaProperty();
            var obj351 = f.MetaProperty();
            var obj352 = f.MetaProperty();
            var obj353 = f.MetaProperty();
            var obj354 = f.MetaTypeReference();
            var obj355 = f.MetaTypeReference();
            var obj356 = f.MetaTypeReference();
            var obj357 = f.MetaTypeReference();
            var obj358 = f.MetaClass();
            var obj359 = f.MetaProperty();
            var obj360 = f.MetaProperty();
            var obj361 = f.MetaTypeReference();
            var obj362 = f.MetaTypeReference();
            var obj363 = f.MetaEnum();
            var obj364 = f.MetaEnumLiteral();
            var obj365 = f.MetaEnumLiteral();
            var obj366 = f.MetaEnumLiteral();
            var obj367 = f.MetaEnumLiteral();
            var obj368 = f.MetaEnum();
            var obj369 = f.MetaEnumLiteral();
            var obj370 = f.MetaEnumLiteral();
            var obj371 = f.MetaEnumLiteral();
            var obj372 = f.MetaEnumLiteral();
            var obj373 = f.MetaEnumLiteral();
            var obj374 = f.MetaEnumLiteral();
            var obj375 = f.MetaEnumLiteral();
            __CustomImpl.Compiler(this);
            obj1.Name = "Compiler";
            obj2.MChildren.Add(obj3);
            obj2.MChildren.Add(obj4);
            obj2.MChildren.Add(obj5);
            obj2.MChildren.Add(obj6);
            obj2.MChildren.Add(obj7);
            obj2.MChildren.Add(obj8);
            obj2.MChildren.Add(obj9);
            obj2.MChildren.Add(obj10);
            obj2.MChildren.Add(obj11);
            obj2.MChildren.Add(obj12);
            obj2.MChildren.Add(obj13);
            obj2.MChildren.Add(obj14);
            obj2.MChildren.Add(obj15);
            obj2.MChildren.Add(obj16);
            obj2.MChildren.Add(obj17);
            obj2.BaseTypes.Add(obj86);
            obj2.BaseTypes.Add(obj75);
            obj2.Properties.Add(obj3);
            obj2.Properties.Add(obj4);
            obj2.Properties.Add(obj5);
            obj2.Properties.Add(obj6);
            obj2.Properties.Add(obj7);
            obj2.Properties.Add(obj8);
            obj2.Properties.Add(obj9);
            obj2.Properties.Add(obj10);
            obj2.Properties.Add(obj11);
            obj2.Properties.Add(obj12);
            obj2.Properties.Add(obj13);
            obj2.Properties.Add(obj14);
            obj2.Properties.Add(obj15);
            obj2.Properties.Add(obj16);
            obj2.Properties.Add(obj17);
            obj2.SymbolType = typeof(global::MetaDslx.Languages.MetaCompiler.Symbols.PAlternativeSymbol);
            obj2.Name = "Alternative";
            obj3.MChildren.Add(obj18);
            obj3.SymbolProperty = __MetaSymbol.FromValue("ReturnType");
            obj3.Type = obj18;
            obj3.Name = "ReturnType";
            obj4.MChildren.Add(obj19);
            obj4.IsContainment = true;
            obj4.SymbolProperty = __MetaSymbol.FromValue("ReturnValue");
            obj4.Type = obj19;
            obj4.Name = "ReturnValue";
            obj5.MChildren.Add(obj20);
            obj5.IsContainment = true;
            obj5.SymbolProperty = __MetaSymbol.FromValue("Elements");
            obj5.Type = obj20;
            obj5.Name = "Elements";
            obj6.MChildren.Add(obj21);
            obj6.IsDerived = true;
            obj6.Type = obj21;
            obj6.Name = "GreenName";
            obj7.MChildren.Add(obj22);
            obj7.IsDerived = true;
            obj7.Type = obj22;
            obj7.Name = "GreenConstructorParameters";
            obj8.MChildren.Add(obj23);
            obj8.IsDerived = true;
            obj8.Type = obj23;
            obj8.Name = "GreenConstructorArguments";
            obj9.MChildren.Add(obj24);
            obj9.IsDerived = true;
            obj9.Type = obj24;
            obj9.Name = "GreenUpdateParameters";
            obj10.MChildren.Add(obj25);
            obj10.IsDerived = true;
            obj10.Type = obj25;
            obj10.Name = "GreenUpdateArguments";
            obj11.MChildren.Add(obj26);
            obj11.IsDerived = true;
            obj11.Type = obj26;
            obj11.Name = "RedName";
            obj12.MChildren.Add(obj27);
            obj12.IsDerived = true;
            obj12.Type = obj27;
            obj12.Name = "RedUpdateParameters";
            obj13.MChildren.Add(obj28);
            obj13.IsDerived = true;
            obj13.Type = obj28;
            obj13.Name = "RedUpdateArguments";
            obj14.MChildren.Add(obj29);
            obj14.IsDerived = true;
            obj14.Type = obj29;
            obj14.Name = "RedOptionalUpdateParameters";
            obj15.MChildren.Add(obj30);
            obj15.IsDerived = true;
            obj15.Type = obj30;
            obj15.Name = "RedToGreenArgumentList";
            obj16.MChildren.Add(obj31);
            obj16.IsDerived = true;
            obj16.Type = obj31;
            obj16.Name = "RedToGreenOptionalArgumentList";
            obj17.MChildren.Add(obj32);
            obj17.IsDerived = true;
            obj17.Type = obj32;
            obj17.Name = "HasRedToGreenOptionalArguments";
            obj18.Type = typeof(__MetaType);
            obj19.Type = __MetaType.FromModelObject(obj158);
            obj20.IsArray = true;
            obj20.Type = __MetaType.FromModelObject(obj93);
            obj21.Type = typeof(string);
            obj22.Type = typeof(string);
            obj23.Type = typeof(string);
            obj24.Type = typeof(string);
            obj25.Type = typeof(string);
            obj26.Type = typeof(string);
            obj27.Type = typeof(string);
            obj28.Type = typeof(string);
            obj29.Type = typeof(string);
            obj30.Type = typeof(string);
            obj31.Type = typeof(string);
            obj32.Type = typeof(bool);
            obj33.MChildren.Add(obj34);
            obj33.MChildren.Add(obj35);
            obj33.Properties.Add(obj34);
            obj33.Properties.Add(obj35);
            obj33.SymbolType = typeof(global::MetaDslx.Languages.MetaCompiler.Symbols.AnnotationSymbol);
            obj33.Name = "Annotation";
            obj34.MChildren.Add(obj36);
            obj34.SymbolProperty = __MetaSymbol.FromValue("AttributeClass");
            obj34.Type = obj36;
            obj34.Name = "AttributeClass";
            obj35.MChildren.Add(obj37);
            obj35.IsContainment = true;
            obj35.SymbolProperty = __MetaSymbol.FromValue("Arguments");
            obj35.Type = obj37;
            obj35.Name = "Arguments";
            obj36.Type = typeof(__MetaType);
            obj37.IsArray = true;
            obj37.Type = __MetaType.FromModelObject(obj38);
            obj38.MChildren.Add(obj39);
            obj38.MChildren.Add(obj40);
            obj38.MChildren.Add(obj41);
            obj38.MChildren.Add(obj42);
            obj38.Properties.Add(obj39);
            obj38.Properties.Add(obj40);
            obj38.Properties.Add(obj41);
            obj38.Properties.Add(obj42);
            obj38.SymbolType = typeof(global::MetaDslx.Languages.MetaCompiler.Symbols.AnnotationArgumentSymbol);
            obj38.Name = "AnnotationArgument";
            obj39.MChildren.Add(obj43);
            obj39.SymbolProperty = __MetaSymbol.FromValue("NamedParameter");
            obj39.Type = obj43;
            obj39.Name = "NamedParameter";
            obj40.MChildren.Add(obj44);
            obj40.SymbolProperty = __MetaSymbol.FromValue("Parameter");
            obj40.Type = obj44;
            obj40.Name = "Parameter";
            obj41.MChildren.Add(obj45);
            obj41.Type = obj45;
            obj41.Name = "ParameterType";
            obj42.MChildren.Add(obj46);
            obj42.IsContainment = true;
            obj42.SymbolProperty = __MetaSymbol.FromValue("Value");
            obj42.Type = obj46;
            obj42.Name = "Value";
            obj43.IsArray = true;
            obj43.Type = typeof(__MetaSymbol);
            obj44.Type = typeof(global::MetaDslx.CodeAnalysis.Symbols.DeclarationSymbol);
            obj45.Type = typeof(__MetaType);
            obj46.Type = __MetaType.FromModelObject(obj158);
            obj47.MChildren.Add(obj48);
            obj47.BaseTypes.Add(obj158);
            obj47.Properties.Add(obj48);
            obj47.Name = "ArrayExpression";
            obj48.MChildren.Add(obj49);
            obj48.Type = obj49;
            obj48.Name = "Items";
            obj49.IsArray = true;
            obj49.Type = __MetaType.FromModelObject(obj158);
            obj50.MChildren.Add(obj51);
            obj50.MChildren.Add(obj52);
            obj50.MChildren.Add(obj53);
            obj50.MChildren.Add(obj54);
            obj50.Properties.Add(obj51);
            obj50.Properties.Add(obj52);
            obj50.Properties.Add(obj53);
            obj50.Properties.Add(obj54);
            obj50.Name = "Binder";
            obj51.MChildren.Add(obj55);
            obj51.Type = obj55;
            obj51.Name = "TypeName";
            obj52.MChildren.Add(obj56);
            obj52.IsContainment = true;
            obj52.Type = obj56;
            obj52.Name = "Arguments";
            obj53.MChildren.Add(obj57);
            obj53.Type = obj57;
            obj53.Name = "IsNegated";
            obj54.MChildren.Add(obj58);
            obj54.IsDerived = true;
            obj54.Type = obj58;
            obj54.Name = "ConstructorArguments";
            obj55.Type = typeof(string);
            obj56.IsArray = true;
            obj56.Type = __MetaType.FromModelObject(obj59);
            obj57.Type = typeof(bool);
            obj58.Type = typeof(string);
            obj59.MChildren.Add(obj60);
            obj59.MChildren.Add(obj61);
            obj59.MChildren.Add(obj62);
            obj59.MChildren.Add(obj63);
            obj59.Properties.Add(obj60);
            obj59.Properties.Add(obj61);
            obj59.Properties.Add(obj62);
            obj59.Properties.Add(obj63);
            obj59.Name = "BinderArgument";
            obj60.MChildren.Add(obj64);
            obj60.Type = obj64;
            obj60.Name = "Name";
            obj61.MChildren.Add(obj65);
            obj61.Type = obj65;
            obj61.Name = "TypeName";
            obj62.MChildren.Add(obj66);
            obj62.Type = obj66;
            obj62.Name = "IsArray";
            obj63.MChildren.Add(obj67);
            obj63.Type = obj67;
            obj63.Name = "Values";
            obj64.Type = typeof(string);
            obj65.Type = typeof(string);
            obj66.Type = typeof(bool);
            obj67.IsArray = true;
            obj67.IsNullable = true;
            obj67.Type = typeof(string);
            obj68.MChildren.Add(obj69);
            obj68.MChildren.Add(obj70);
            obj68.MChildren.Add(obj71);
            obj68.BaseTypes.Add(obj142);
            obj68.BaseTypes.Add(obj291);
            obj68.Properties.Add(obj69);
            obj68.Properties.Add(obj70);
            obj68.Properties.Add(obj71);
            obj68.SymbolType = typeof(global::MetaDslx.Languages.MetaCompiler.Symbols.PBlockSymbol);
            obj68.Name = "Block";
            obj69.MChildren.Add(obj72);
            obj69.IsDerived = true;
            obj69.Type = obj72;
            obj69.Name = "GreenType";
            obj70.MChildren.Add(obj73);
            obj70.IsDerived = true;
            obj70.Type = obj73;
            obj70.Name = "GreenSyntaxCondition";
            obj71.MChildren.Add(obj74);
            obj71.IsDerived = true;
            obj71.Type = obj74;
            obj71.Name = "RedType";
            obj72.Type = typeof(string);
            obj73.IsNullable = true;
            obj73.Type = typeof(string);
            obj74.Type = typeof(string);
            obj75.MChildren.Add(obj76);
            obj75.MChildren.Add(obj77);
            obj75.MChildren.Add(obj78);
            obj75.MChildren.Add(obj79);
            obj75.MChildren.Add(obj80);
            obj75.Properties.Add(obj76);
            obj75.Properties.Add(obj77);
            obj75.Properties.Add(obj78);
            obj75.Properties.Add(obj79);
            obj75.Properties.Add(obj80);
            obj75.Name = "CSharpElement";
            obj76.MChildren.Add(obj81);
            obj76.IsContainment = true;
            obj76.Type = obj81;
            obj76.Name = "Annotations";
            obj77.MChildren.Add(obj82);
            obj77.Type = obj82;
            obj77.Name = "CSharpName";
            obj78.MChildren.Add(obj83);
            obj78.Type = obj83;
            obj78.Name = "AntlrName";
            obj79.MChildren.Add(obj84);
            obj79.IsContainment = true;
            obj79.Type = obj84;
            obj79.Name = "Binders";
            obj80.MChildren.Add(obj85);
            obj80.Type = obj85;
            obj80.Name = "ContainsBinders";
            obj81.IsArray = true;
            obj81.Type = __MetaType.FromModelObject(obj33);
            obj82.Type = typeof(string);
            obj83.Type = typeof(string);
            obj84.IsArray = true;
            obj84.Type = __MetaType.FromModelObject(obj50);
            obj85.Type = typeof(bool);
            obj86.MChildren.Add(obj87);
            obj86.MChildren.Add(obj88);
            obj86.MChildren.Add(obj89);
            obj86.Properties.Add(obj87);
            obj86.Properties.Add(obj88);
            obj86.Properties.Add(obj89);
            obj86.SymbolType = typeof(global::MetaDslx.CodeAnalysis.Symbols.DeclarationSymbol);
            obj86.Name = "Declaration";
            obj87.MChildren.Add(obj90);
            obj87.SymbolProperty = __MetaSymbol.FromValue("Name");
            obj87.Type = obj90;
            obj87.Name = "Name";
            obj88.MChildren.Add(obj91);
            obj88.IsDerived = true;
            obj88.Type = obj91;
            obj88.Name = "Namespace";
            obj89.MChildren.Add(obj92);
            obj89.IsDerived = true;
            obj89.Type = obj92;
            obj89.Name = "FullName";
            obj90.IsNullable = true;
            obj90.Type = typeof(string);
            obj91.Type = typeof(string);
            obj92.IsNullable = true;
            obj92.Type = typeof(string);
            obj93.MChildren.Add(obj94);
            obj93.MChildren.Add(obj95);
            obj93.MChildren.Add(obj96);
            obj93.MChildren.Add(obj97);
            obj93.MChildren.Add(obj98);
            obj93.MChildren.Add(obj99);
            obj93.MChildren.Add(obj100);
            obj93.MChildren.Add(obj101);
            obj93.MChildren.Add(obj102);
            obj93.MChildren.Add(obj103);
            obj93.MChildren.Add(obj104);
            obj93.MChildren.Add(obj105);
            obj93.MChildren.Add(obj106);
            obj93.MChildren.Add(obj107);
            obj93.MChildren.Add(obj108);
            obj93.MChildren.Add(obj109);
            obj93.MChildren.Add(obj110);
            obj93.MChildren.Add(obj111);
            obj93.MChildren.Add(obj112);
            obj93.MChildren.Add(obj113);
            obj93.MChildren.Add(obj114);
            obj93.MChildren.Add(obj115);
            obj93.MChildren.Add(obj116);
            obj93.MChildren.Add(obj117);
            obj93.BaseTypes.Add(obj75);
            obj93.Properties.Add(obj94);
            obj93.Properties.Add(obj95);
            obj93.Properties.Add(obj96);
            obj93.Properties.Add(obj97);
            obj93.Properties.Add(obj98);
            obj93.Properties.Add(obj99);
            obj93.Properties.Add(obj100);
            obj93.Properties.Add(obj101);
            obj93.Properties.Add(obj102);
            obj93.Properties.Add(obj103);
            obj93.Properties.Add(obj104);
            obj93.Properties.Add(obj105);
            obj93.Properties.Add(obj106);
            obj93.Properties.Add(obj107);
            obj93.Properties.Add(obj108);
            obj93.Properties.Add(obj109);
            obj93.Properties.Add(obj110);
            obj93.Properties.Add(obj111);
            obj93.Properties.Add(obj112);
            obj93.Properties.Add(obj113);
            obj93.Properties.Add(obj114);
            obj93.Properties.Add(obj115);
            obj93.Properties.Add(obj116);
            obj93.Properties.Add(obj117);
            obj93.SymbolType = typeof(global::MetaDslx.Languages.MetaCompiler.Symbols.PElementSymbol);
            obj93.Name = "Element";
            obj94.MChildren.Add(obj118);
            obj94.SymbolProperty = __MetaSymbol.FromValue("Name");
            obj94.Type = obj118;
            obj94.Name = "Name";
            obj95.MChildren.Add(obj119);
            obj95.SymbolProperty = __MetaSymbol.FromValue("Assignment");
            obj95.Type = obj119;
            obj95.Name = "Assignment";
            obj96.MChildren.Add(obj120);
            obj96.IsContainment = true;
            obj96.SymbolProperty = __MetaSymbol.FromValue("Value");
            obj96.Type = obj120;
            obj96.Name = "Value";
            obj97.MChildren.Add(obj121);
            obj97.IsDerived = true;
            obj97.Type = obj121;
            obj97.Name = "IsToken";
            obj98.MChildren.Add(obj122);
            obj98.IsDerived = true;
            obj98.Type = obj122;
            obj98.Name = "IsList";
            obj99.MChildren.Add(obj123);
            obj99.IsDerived = true;
            obj99.Type = obj123;
            obj99.Name = "FieldName";
            obj100.MChildren.Add(obj124);
            obj100.IsDerived = true;
            obj100.Type = obj124;
            obj100.Name = "ParameterName";
            obj101.MChildren.Add(obj125);
            obj101.IsDerived = true;
            obj101.Type = obj125;
            obj101.Name = "PropertyName";
            obj102.MChildren.Add(obj126);
            obj102.IsDerived = true;
            obj102.Type = obj126;
            obj102.Name = "GreenFieldType";
            obj103.MChildren.Add(obj127);
            obj103.IsDerived = true;
            obj103.Type = obj127;
            obj103.Name = "GreenParameterValue";
            obj104.MChildren.Add(obj128);
            obj104.IsDerived = true;
            obj104.Type = obj128;
            obj104.Name = "GreenPropertyType";
            obj105.MChildren.Add(obj129);
            obj105.IsDerived = true;
            obj105.Type = obj129;
            obj105.Name = "GreenPropertyValue";
            obj106.MChildren.Add(obj130);
            obj106.IsDerived = true;
            obj106.Type = obj130;
            obj106.Name = "GreenSyntaxNullCondition";
            obj107.MChildren.Add(obj131);
            obj107.IsDerived = true;
            obj107.Type = obj131;
            obj107.Name = "GreenSyntaxCondition";
            obj108.MChildren.Add(obj132);
            obj108.IsDerived = true;
            obj108.Type = obj132;
            obj108.Name = "IsOptionalUpdateParameter";
            obj109.MChildren.Add(obj133);
            obj109.IsDerived = true;
            obj109.Type = obj133;
            obj109.Name = "RedFieldType";
            obj110.MChildren.Add(obj134);
            obj110.IsDerived = true;
            obj110.Type = obj134;
            obj110.Name = "RedParameterValue";
            obj111.MChildren.Add(obj135);
            obj111.IsDerived = true;
            obj111.Type = obj135;
            obj111.Name = "RedPropertyType";
            obj112.MChildren.Add(obj136);
            obj112.IsDerived = true;
            obj112.Type = obj136;
            obj112.Name = "RedPropertyValue";
            obj113.MChildren.Add(obj137);
            obj113.IsDerived = true;
            obj113.Type = obj137;
            obj113.Name = "RedToGreenArgument";
            obj114.MChildren.Add(obj138);
            obj114.IsDerived = true;
            obj114.Type = obj138;
            obj114.Name = "RedToGreenOptionalArgument";
            obj115.MChildren.Add(obj139);
            obj115.IsDerived = true;
            obj115.Type = obj139;
            obj115.Name = "RedSyntaxNullCondition";
            obj116.MChildren.Add(obj140);
            obj116.IsDerived = true;
            obj116.Type = obj140;
            obj116.Name = "RedSyntaxCondition";
            obj117.MChildren.Add(obj141);
            obj117.IsDerived = true;
            obj117.Type = obj141;
            obj117.Name = "VisitCall";
            obj118.IsNullable = true;
            obj118.Type = typeof(string);
            obj119.Type = __MetaType.FromModelObject(obj363);
            obj120.Type = __MetaType.FromModelObject(obj142);
            obj121.Type = typeof(bool);
            obj122.Type = typeof(bool);
            obj123.Type = typeof(string);
            obj124.Type = typeof(string);
            obj125.Type = typeof(string);
            obj126.Type = typeof(string);
            obj127.Type = typeof(string);
            obj128.Type = typeof(string);
            obj129.Type = typeof(string);
            obj130.IsNullable = true;
            obj130.Type = typeof(string);
            obj131.IsNullable = true;
            obj131.Type = typeof(string);
            obj132.Type = typeof(bool);
            obj133.Type = typeof(string);
            obj134.Type = typeof(string);
            obj135.Type = typeof(string);
            obj136.Type = typeof(string);
            obj137.Type = typeof(string);
            obj138.Type = typeof(string);
            obj139.IsNullable = true;
            obj139.Type = typeof(string);
            obj140.IsNullable = true;
            obj140.Type = typeof(string);
            obj141.IsNullable = true;
            obj141.Type = typeof(string);
            obj142.MChildren.Add(obj143);
            obj142.MChildren.Add(obj144);
            obj142.MChildren.Add(obj145);
            obj142.MChildren.Add(obj146);
            obj142.BaseTypes.Add(obj75);
            obj142.IsAbstract = true;
            obj142.Properties.Add(obj143);
            obj142.Properties.Add(obj144);
            obj142.Properties.Add(obj145);
            obj142.Properties.Add(obj146);
            obj142.SymbolType = typeof(global::MetaDslx.CodeAnalysis.Symbols.Symbol);
            obj142.Name = "ElementValue";
            obj143.MChildren.Add(obj147);
            obj143.Type = obj147;
            obj143.Name = "Multiplicity";
            obj144.MChildren.Add(obj148);
            obj144.IsDerived = true;
            obj144.Type = obj148;
            obj144.Name = "GreenType";
            obj145.MChildren.Add(obj149);
            obj145.IsDerived = true;
            obj145.Type = obj149;
            obj145.Name = "GreenSyntaxCondition";
            obj146.MChildren.Add(obj150);
            obj146.IsDerived = true;
            obj146.Type = obj150;
            obj146.Name = "RedType";
            obj147.Type = __MetaType.FromModelObject(obj368);
            obj148.Type = typeof(string);
            obj149.IsNullable = true;
            obj149.Type = typeof(string);
            obj150.Type = typeof(string);
            obj151.MChildren.Add(obj152);
            obj151.MChildren.Add(obj153);
            obj151.MChildren.Add(obj154);
            obj151.BaseTypes.Add(obj142);
            obj151.Properties.Add(obj152);
            obj151.Properties.Add(obj153);
            obj151.Properties.Add(obj154);
            obj151.Name = "Eof";
            obj152.MChildren.Add(obj155);
            obj152.IsDerived = true;
            obj152.Type = obj155;
            obj152.Name = "GreenType";
            obj153.MChildren.Add(obj156);
            obj153.IsDerived = true;
            obj153.Type = obj156;
            obj153.Name = "GreenSyntaxCondition";
            obj154.MChildren.Add(obj157);
            obj154.IsDerived = true;
            obj154.Type = obj157;
            obj154.Name = "RedType";
            obj155.Type = typeof(string);
            obj156.IsNullable = true;
            obj156.Type = typeof(string);
            obj157.Type = typeof(string);
            obj158.MChildren.Add(obj159);
            obj158.Properties.Add(obj159);
            obj158.SymbolType = typeof(global::MetaDslx.Languages.MetaCompiler.Symbols.ExpressionSymbol);
            obj158.Name = "Expression";
            obj159.MChildren.Add(obj160);
            obj159.SymbolProperty = __MetaSymbol.FromValue("Value");
            obj159.Type = obj160;
            obj159.Name = "Value";
            obj160.Type = typeof(__MetaSymbol);
            obj161.MChildren.Add(obj162);
            obj161.BaseTypes.Add(obj142);
            obj161.Properties.Add(obj162);
            obj161.Name = "Fixed";
            obj162.MChildren.Add(obj163);
            obj162.Type = obj163;
            obj162.Name = "Text";
            obj163.Type = typeof(string);
            obj164.BaseTypes.Add(obj228);
            obj164.Name = "Fragment";
            obj165.MChildren.Add(obj166);
            obj165.MChildren.Add(obj167);
            obj165.MChildren.Add(obj168);
            obj165.MChildren.Add(obj169);
            obj165.MChildren.Add(obj170);
            obj165.MChildren.Add(obj171);
            obj165.MChildren.Add(obj172);
            obj165.MChildren.Add(obj173);
            obj165.MChildren.Add(obj174);
            obj165.MChildren.Add(obj175);
            obj165.MChildren.Add(obj176);
            obj165.BaseTypes.Add(obj86);
            obj165.Properties.Add(obj166);
            obj165.Properties.Add(obj167);
            obj165.Properties.Add(obj168);
            obj165.Properties.Add(obj169);
            obj165.Properties.Add(obj170);
            obj165.Properties.Add(obj171);
            obj165.Properties.Add(obj172);
            obj165.Properties.Add(obj173);
            obj165.Properties.Add(obj174);
            obj165.Properties.Add(obj175);
            obj165.Properties.Add(obj176);
            obj165.Name = "Grammar";
            obj166.MChildren.Add(obj177);
            obj166.IsDerived = true;
            obj166.Type = obj177;
            obj166.Name = "Language";
            obj167.MChildren.Add(obj178);
            obj167.IsContainment = true;
            obj167.Type = obj178;
            obj167.Name = "GrammarRules";
            obj168.MChildren.Add(obj179);
            obj168.IsContainment = true;
            obj168.Type = obj179;
            obj168.Name = "TokenKinds";
            obj169.MChildren.Add(obj180);
            obj169.IsContainment = true;
            obj169.SubsettedProperties.Add(obj167);
            obj169.Type = obj180;
            obj169.Name = "Tokens";
            obj170.MChildren.Add(obj181);
            obj170.IsContainment = true;
            obj170.SubsettedProperties.Add(obj167);
            obj170.Type = obj181;
            obj170.Name = "Rules";
            obj171.MChildren.Add(obj182);
            obj171.Type = obj182;
            obj171.Name = "Blocks";
            obj172.MChildren.Add(obj183);
            obj172.Type = obj183;
            obj172.Name = "DefaultWhitespace";
            obj173.MChildren.Add(obj184);
            obj173.Type = obj184;
            obj173.Name = "DefaultEndOfLine";
            obj174.MChildren.Add(obj185);
            obj174.Type = obj185;
            obj174.Name = "DefaultSeparator";
            obj175.MChildren.Add(obj186);
            obj175.Type = obj186;
            obj175.Name = "DefaultIdentifier";
            obj176.MChildren.Add(obj187);
            obj176.Type = obj187;
            obj176.Name = "MainRule";
            obj177.Type = __MetaType.FromModelObject(obj200);
            obj178.IsArray = true;
            obj178.Type = __MetaType.FromModelObject(obj188);
            obj179.IsArray = true;
            obj179.Type = __MetaType.FromModelObject(obj358);
            obj180.IsArray = true;
            obj180.Type = __MetaType.FromModelObject(obj342);
            obj181.IsArray = true;
            obj181.Type = __MetaType.FromModelObject(obj291);
            obj182.IsArray = true;
            obj182.Type = __MetaType.FromModelObject(obj68);
            obj183.IsNullable = true;
            obj183.Type = __MetaType.FromModelObject(obj342);
            obj184.IsNullable = true;
            obj184.Type = __MetaType.FromModelObject(obj342);
            obj185.IsNullable = true;
            obj185.Type = __MetaType.FromModelObject(obj342);
            obj186.IsNullable = true;
            obj186.Type = __MetaType.FromModelObject(obj342);
            obj187.IsNullable = true;
            obj187.Type = __MetaType.FromModelObject(obj291);
            obj188.MChildren.Add(obj189);
            obj188.MChildren.Add(obj190);
            obj188.BaseTypes.Add(obj86);
            obj188.BaseTypes.Add(obj75);
            obj188.IsAbstract = true;
            obj188.Properties.Add(obj189);
            obj188.Properties.Add(obj190);
            obj188.Name = "GrammarRule";
            obj189.MChildren.Add(obj191);
            obj189.IsDerived = true;
            obj189.Type = obj191;
            obj189.Name = "Language";
            obj190.MChildren.Add(obj192);
            obj190.IsDerived = true;
            obj190.Type = obj192;
            obj190.Name = "Grammar";
            obj191.Type = __MetaType.FromModelObject(obj200);
            obj192.Type = __MetaType.FromModelObject(obj165);
            obj193.MChildren.Add(obj194);
            obj193.MChildren.Add(obj195);
            obj193.MChildren.Add(obj196);
            obj193.Properties.Add(obj194);
            obj193.Properties.Add(obj195);
            obj193.Properties.Add(obj196);
            obj193.SymbolType = typeof(global::MetaDslx.CodeAnalysis.Symbols.Symbol);
            obj193.Name = "LAlternative";
            obj194.MChildren.Add(obj197);
            obj194.IsDerived = true;
            obj194.Type = obj197;
            obj194.Name = "IsFixed";
            obj195.MChildren.Add(obj198);
            obj195.IsDerived = true;
            obj195.Type = obj198;
            obj195.Name = "FixedText";
            obj196.MChildren.Add(obj199);
            obj196.IsContainment = true;
            obj196.Type = obj199;
            obj196.Name = "Elements";
            obj197.Type = typeof(bool);
            obj198.IsNullable = true;
            obj198.Type = typeof(string);
            obj199.IsArray = true;
            obj199.Type = __MetaType.FromModelObject(obj212);
            obj200.MChildren.Add(obj201);
            obj200.MChildren.Add(obj202);
            obj200.BaseTypes.Add(obj86);
            obj200.Properties.Add(obj201);
            obj200.Properties.Add(obj202);
            obj200.Name = "Language";
            obj201.MChildren.Add(obj203);
            obj201.Type = obj203;
            obj201.Name = "BaseLanguages";
            obj202.MChildren.Add(obj204);
            obj202.IsContainment = true;
            obj202.Type = obj204;
            obj202.Name = "Grammar";
            obj203.IsArray = true;
            obj203.Type = typeof(__MetaType);
            obj204.Type = __MetaType.FromModelObject(obj165);
            obj205.MChildren.Add(obj206);
            obj205.MChildren.Add(obj207);
            obj205.MChildren.Add(obj208);
            obj205.BaseTypes.Add(obj223);
            obj205.Properties.Add(obj206);
            obj205.Properties.Add(obj207);
            obj205.Properties.Add(obj208);
            obj205.Name = "LBlock";
            obj206.MChildren.Add(obj209);
            obj206.IsDerived = true;
            obj206.Type = obj209;
            obj206.Name = "IsFixed";
            obj207.MChildren.Add(obj210);
            obj207.IsDerived = true;
            obj207.Type = obj210;
            obj207.Name = "FixedText";
            obj208.MChildren.Add(obj211);
            obj208.IsContainment = true;
            obj208.Type = obj211;
            obj208.Name = "Alternatives";
            obj209.Type = typeof(bool);
            obj210.IsNullable = true;
            obj210.Type = typeof(string);
            obj211.IsArray = true;
            obj211.Type = __MetaType.FromModelObject(obj193);
            obj212.MChildren.Add(obj213);
            obj212.MChildren.Add(obj214);
            obj212.MChildren.Add(obj215);
            obj212.MChildren.Add(obj216);
            obj212.MChildren.Add(obj217);
            obj212.Properties.Add(obj213);
            obj212.Properties.Add(obj214);
            obj212.Properties.Add(obj215);
            obj212.Properties.Add(obj216);
            obj212.Properties.Add(obj217);
            obj212.SymbolType = typeof(global::MetaDslx.CodeAnalysis.Symbols.Symbol);
            obj212.Name = "LElement";
            obj213.MChildren.Add(obj218);
            obj213.IsDerived = true;
            obj213.Type = obj218;
            obj213.Name = "IsFixed";
            obj214.MChildren.Add(obj219);
            obj214.IsDerived = true;
            obj214.Type = obj219;
            obj214.Name = "FixedText";
            obj215.MChildren.Add(obj220);
            obj215.Type = obj220;
            obj215.Name = "IsNegated";
            obj216.MChildren.Add(obj221);
            obj216.IsContainment = true;
            obj216.Type = obj221;
            obj216.Name = "Value";
            obj217.MChildren.Add(obj222);
            obj217.Type = obj222;
            obj217.Name = "Multiplicity";
            obj218.Type = typeof(bool);
            obj219.IsNullable = true;
            obj219.Type = typeof(string);
            obj220.Type = typeof(bool);
            obj221.Type = __MetaType.FromModelObject(obj223);
            obj222.Type = __MetaType.FromModelObject(obj368);
            obj223.MChildren.Add(obj224);
            obj223.MChildren.Add(obj225);
            obj223.IsAbstract = true;
            obj223.Properties.Add(obj224);
            obj223.Properties.Add(obj225);
            obj223.SymbolType = typeof(global::MetaDslx.CodeAnalysis.Symbols.Symbol);
            obj223.Name = "LElementValue";
            obj224.MChildren.Add(obj226);
            obj224.IsDerived = true;
            obj224.Type = obj226;
            obj224.Name = "IsFixed";
            obj225.MChildren.Add(obj227);
            obj225.IsDerived = true;
            obj225.Type = obj227;
            obj225.Name = "FixedText";
            obj226.Type = typeof(bool);
            obj227.IsNullable = true;
            obj227.Type = typeof(string);
            obj228.MChildren.Add(obj229);
            obj228.MChildren.Add(obj230);
            obj228.MChildren.Add(obj231);
            obj228.BaseTypes.Add(obj188);
            obj228.IsAbstract = true;
            obj228.Properties.Add(obj229);
            obj228.Properties.Add(obj230);
            obj228.Properties.Add(obj231);
            obj228.Name = "LexerRule";
            obj229.MChildren.Add(obj232);
            obj229.IsContainment = true;
            obj229.Type = obj232;
            obj229.Name = "Alternatives";
            obj230.MChildren.Add(obj233);
            obj230.IsDerived = true;
            obj230.Type = obj233;
            obj230.Name = "IsFixed";
            obj231.MChildren.Add(obj234);
            obj231.IsDerived = true;
            obj231.Type = obj234;
            obj231.Name = "FixedText";
            obj232.IsArray = true;
            obj232.Type = __MetaType.FromModelObject(obj193);
            obj233.Type = typeof(bool);
            obj234.IsNullable = true;
            obj234.Type = typeof(string);
            obj235.MChildren.Add(obj236);
            obj235.MChildren.Add(obj237);
            obj235.MChildren.Add(obj238);
            obj235.BaseTypes.Add(obj223);
            obj235.Properties.Add(obj236);
            obj235.Properties.Add(obj237);
            obj235.Properties.Add(obj238);
            obj235.Name = "LFixed";
            obj236.MChildren.Add(obj239);
            obj236.IsDerived = true;
            obj236.Type = obj239;
            obj236.Name = "IsFixed";
            obj237.MChildren.Add(obj240);
            obj237.IsDerived = true;
            obj237.Type = obj240;
            obj237.Name = "FixedText";
            obj238.MChildren.Add(obj241);
            obj238.Type = obj241;
            obj238.Name = "Text";
            obj239.Type = typeof(bool);
            obj240.IsNullable = true;
            obj240.Type = typeof(string);
            obj241.Type = typeof(string);
            obj242.MChildren.Add(obj243);
            obj242.MChildren.Add(obj244);
            obj242.MChildren.Add(obj245);
            obj242.MChildren.Add(obj246);
            obj242.BaseTypes.Add(obj223);
            obj242.Properties.Add(obj243);
            obj242.Properties.Add(obj244);
            obj242.Properties.Add(obj245);
            obj242.Properties.Add(obj246);
            obj242.Name = "LRange";
            obj243.MChildren.Add(obj247);
            obj243.IsDerived = true;
            obj243.Type = obj247;
            obj243.Name = "IsFixed";
            obj244.MChildren.Add(obj248);
            obj244.IsDerived = true;
            obj244.Type = obj248;
            obj244.Name = "FixedText";
            obj245.MChildren.Add(obj249);
            obj245.Type = obj249;
            obj245.Name = "StartChar";
            obj246.MChildren.Add(obj250);
            obj246.Type = obj250;
            obj246.Name = "EndChar";
            obj247.Type = typeof(bool);
            obj248.IsNullable = true;
            obj248.Type = typeof(string);
            obj249.Type = typeof(string);
            obj250.Type = typeof(string);
            obj251.MChildren.Add(obj252);
            obj251.MChildren.Add(obj253);
            obj251.MChildren.Add(obj254);
            obj251.BaseTypes.Add(obj223);
            obj251.Properties.Add(obj252);
            obj251.Properties.Add(obj253);
            obj251.Properties.Add(obj254);
            obj251.Name = "LReference";
            obj252.MChildren.Add(obj255);
            obj252.IsDerived = true;
            obj252.Type = obj255;
            obj252.Name = "IsFixed";
            obj253.MChildren.Add(obj256);
            obj253.IsDerived = true;
            obj253.Type = obj256;
            obj253.Name = "FixedText";
            obj254.MChildren.Add(obj257);
            obj254.Type = obj257;
            obj254.Name = "Rule";
            obj255.Type = typeof(bool);
            obj256.IsNullable = true;
            obj256.Type = typeof(string);
            obj257.Type = __MetaType.FromModelObject(obj228);
            obj258.MChildren.Add(obj259);
            obj258.MChildren.Add(obj260);
            obj258.MChildren.Add(obj261);
            obj258.BaseTypes.Add(obj223);
            obj258.Properties.Add(obj259);
            obj258.Properties.Add(obj260);
            obj258.Properties.Add(obj261);
            obj258.Name = "LSet";
            obj259.MChildren.Add(obj262);
            obj259.IsDerived = true;
            obj259.Type = obj262;
            obj259.Name = "IsFixed";
            obj260.MChildren.Add(obj263);
            obj260.IsDerived = true;
            obj260.Type = obj263;
            obj260.Name = "FixedText";
            obj261.MChildren.Add(obj264);
            obj261.IsContainment = true;
            obj261.Type = obj264;
            obj261.Name = "Items";
            obj262.Type = typeof(bool);
            obj263.IsNullable = true;
            obj263.Type = typeof(string);
            obj264.IsArray = true;
            obj264.Type = __MetaType.FromModelObject(obj272);
            obj265.MChildren.Add(obj266);
            obj265.MChildren.Add(obj267);
            obj265.MChildren.Add(obj268);
            obj265.BaseTypes.Add(obj272);
            obj265.Properties.Add(obj266);
            obj265.Properties.Add(obj267);
            obj265.Properties.Add(obj268);
            obj265.Name = "LSetChar";
            obj266.MChildren.Add(obj269);
            obj266.IsDerived = true;
            obj266.Type = obj269;
            obj266.Name = "IsFixed";
            obj267.MChildren.Add(obj270);
            obj267.IsDerived = true;
            obj267.Type = obj270;
            obj267.Name = "FixedText";
            obj268.MChildren.Add(obj271);
            obj268.Type = obj271;
            obj268.Name = "Char";
            obj269.Type = typeof(bool);
            obj270.IsNullable = true;
            obj270.Type = typeof(string);
            obj271.Type = typeof(string);
            obj272.MChildren.Add(obj273);
            obj272.MChildren.Add(obj274);
            obj272.IsAbstract = true;
            obj272.Properties.Add(obj273);
            obj272.Properties.Add(obj274);
            obj272.Name = "LSetItem";
            obj273.MChildren.Add(obj275);
            obj273.IsDerived = true;
            obj273.Type = obj275;
            obj273.Name = "IsFixed";
            obj274.MChildren.Add(obj276);
            obj274.IsDerived = true;
            obj274.Type = obj276;
            obj274.Name = "FixedText";
            obj275.Type = typeof(bool);
            obj276.IsNullable = true;
            obj276.Type = typeof(string);
            obj277.MChildren.Add(obj278);
            obj277.MChildren.Add(obj279);
            obj277.MChildren.Add(obj280);
            obj277.MChildren.Add(obj281);
            obj277.BaseTypes.Add(obj272);
            obj277.Properties.Add(obj278);
            obj277.Properties.Add(obj279);
            obj277.Properties.Add(obj280);
            obj277.Properties.Add(obj281);
            obj277.Name = "LSetRange";
            obj278.MChildren.Add(obj282);
            obj278.IsDerived = true;
            obj278.Type = obj282;
            obj278.Name = "IsFixed";
            obj279.MChildren.Add(obj283);
            obj279.IsDerived = true;
            obj279.Type = obj283;
            obj279.Name = "FixedText";
            obj280.MChildren.Add(obj284);
            obj280.Type = obj284;
            obj280.Name = "StartChar";
            obj281.MChildren.Add(obj285);
            obj281.Type = obj285;
            obj281.Name = "EndChar";
            obj282.Type = typeof(bool);
            obj283.IsNullable = true;
            obj283.Type = typeof(string);
            obj284.Type = typeof(string);
            obj285.Type = typeof(string);
            obj286.MChildren.Add(obj287);
            obj286.MChildren.Add(obj288);
            obj286.BaseTypes.Add(obj223);
            obj286.Properties.Add(obj287);
            obj286.Properties.Add(obj288);
            obj286.Name = "LWildCard";
            obj287.MChildren.Add(obj289);
            obj287.IsDerived = true;
            obj287.Type = obj289;
            obj287.Name = "IsFixed";
            obj288.MChildren.Add(obj290);
            obj288.IsDerived = true;
            obj288.Type = obj290;
            obj288.Name = "FixedText";
            obj289.Type = typeof(bool);
            obj290.IsNullable = true;
            obj290.Type = typeof(string);
            obj291.MChildren.Add(obj292);
            obj291.MChildren.Add(obj293);
            obj291.MChildren.Add(obj294);
            obj291.MChildren.Add(obj295);
            obj291.MChildren.Add(obj296);
            obj291.BaseTypes.Add(obj188);
            obj291.Properties.Add(obj292);
            obj291.Properties.Add(obj293);
            obj291.Properties.Add(obj294);
            obj291.Properties.Add(obj295);
            obj291.Properties.Add(obj296);
            obj291.SymbolType = typeof(global::MetaDslx.Languages.MetaCompiler.Symbols.ParserRuleSymbol);
            obj291.Name = "Rule";
            obj292.MChildren.Add(obj297);
            obj292.SymbolProperty = __MetaSymbol.FromValue("ReturnType");
            obj292.Type = obj297;
            obj292.Name = "ReturnType";
            obj293.MChildren.Add(obj298);
            obj293.IsContainment = true;
            obj293.SymbolProperty = __MetaSymbol.FromValue("Alternatives");
            obj293.Type = obj298;
            obj293.Name = "Alternatives";
            obj294.MChildren.Add(obj299);
            obj294.Type = obj299;
            obj294.Name = "BaseRule";
            obj295.MChildren.Add(obj300);
            obj295.IsDerived = true;
            obj295.Type = obj300;
            obj295.Name = "GreenName";
            obj296.MChildren.Add(obj301);
            obj296.IsDerived = true;
            obj296.Type = obj301;
            obj296.Name = "RedName";
            obj297.Type = typeof(__MetaType);
            obj298.IsArray = true;
            obj298.Type = __MetaType.FromModelObject(obj2);
            obj299.IsNullable = true;
            obj299.Type = __MetaType.FromModelObject(obj2);
            obj300.Type = typeof(string);
            obj301.Type = typeof(string);
            obj302.MChildren.Add(obj303);
            obj302.MChildren.Add(obj304);
            obj302.MChildren.Add(obj305);
            obj302.MChildren.Add(obj306);
            obj302.MChildren.Add(obj307);
            obj302.MChildren.Add(obj308);
            obj302.MChildren.Add(obj309);
            obj302.BaseTypes.Add(obj142);
            obj302.Properties.Add(obj303);
            obj302.Properties.Add(obj304);
            obj302.Properties.Add(obj305);
            obj302.Properties.Add(obj306);
            obj302.Properties.Add(obj307);
            obj302.Properties.Add(obj308);
            obj302.Properties.Add(obj309);
            obj302.SymbolType = typeof(global::MetaDslx.Languages.MetaCompiler.Symbols.PReferenceSymbol);
            obj302.Name = "RuleRef";
            obj303.MChildren.Add(obj310);
            obj303.SymbolProperty = __MetaSymbol.FromValue("Rule");
            obj303.Type = obj310;
            obj303.Name = "GrammarRule";
            obj304.MChildren.Add(obj311);
            obj304.SymbolProperty = __MetaSymbol.FromValue("ReferencedTypes");
            obj304.Type = obj311;
            obj304.Name = "ReferencedTypes";
            obj305.MChildren.Add(obj312);
            obj305.IsDerived = true;
            obj305.Type = obj312;
            obj305.Name = "Token";
            obj306.MChildren.Add(obj313);
            obj306.IsDerived = true;
            obj306.Type = obj313;
            obj306.Name = "Rule";
            obj307.MChildren.Add(obj314);
            obj307.IsDerived = true;
            obj307.Type = obj314;
            obj307.Name = "GreenType";
            obj308.MChildren.Add(obj315);
            obj308.IsDerived = true;
            obj308.Type = obj315;
            obj308.Name = "GreenSyntaxCondition";
            obj309.MChildren.Add(obj316);
            obj309.IsDerived = true;
            obj309.Type = obj316;
            obj309.Name = "RedType";
            obj310.Type = __MetaType.FromModelObject(obj188);
            obj311.IsArray = true;
            obj311.Type = typeof(__MetaType);
            obj312.IsNullable = true;
            obj312.Type = __MetaType.FromModelObject(obj342);
            obj313.IsNullable = true;
            obj313.Type = __MetaType.FromModelObject(obj291);
            obj314.Type = typeof(string);
            obj315.IsNullable = true;
            obj315.Type = typeof(string);
            obj316.Type = typeof(string);
            obj317.MChildren.Add(obj318);
            obj317.MChildren.Add(obj319);
            obj317.MChildren.Add(obj320);
            obj317.MChildren.Add(obj321);
            obj317.MChildren.Add(obj322);
            obj317.MChildren.Add(obj323);
            obj317.MChildren.Add(obj324);
            obj317.MChildren.Add(obj325);
            obj317.MChildren.Add(obj326);
            obj317.MChildren.Add(obj327);
            obj317.MChildren.Add(obj328);
            obj317.MChildren.Add(obj329);
            obj317.BaseTypes.Add(obj142);
            obj317.Properties.Add(obj318);
            obj317.Properties.Add(obj319);
            obj317.Properties.Add(obj320);
            obj317.Properties.Add(obj321);
            obj317.Properties.Add(obj322);
            obj317.Properties.Add(obj323);
            obj317.Properties.Add(obj324);
            obj317.Properties.Add(obj325);
            obj317.Properties.Add(obj326);
            obj317.Properties.Add(obj327);
            obj317.Properties.Add(obj328);
            obj317.Properties.Add(obj329);
            obj317.Name = "SeparatedList";
            obj318.MChildren.Add(obj330);
            obj318.Type = obj330;
            obj318.Name = "SeparatorFirst";
            obj319.MChildren.Add(obj331);
            obj319.Type = obj331;
            obj319.Name = "RepeatedSeparatorFirst";
            obj320.MChildren.Add(obj332);
            obj320.IsContainment = true;
            obj320.Type = obj332;
            obj320.Name = "FirstItems";
            obj321.MChildren.Add(obj333);
            obj321.IsContainment = true;
            obj321.Type = obj333;
            obj321.Name = "FirstSeparators";
            obj322.MChildren.Add(obj334);
            obj322.IsContainment = true;
            obj322.Type = obj334;
            obj322.Name = "RepeatedBlock";
            obj323.MChildren.Add(obj335);
            obj323.Type = obj335;
            obj323.Name = "RepeatedItem";
            obj324.MChildren.Add(obj336);
            obj324.Type = obj336;
            obj324.Name = "RepeatedSeparator";
            obj325.MChildren.Add(obj337);
            obj325.IsContainment = true;
            obj325.Type = obj337;
            obj325.Name = "LastItems";
            obj326.MChildren.Add(obj338);
            obj326.IsContainment = true;
            obj326.Type = obj338;
            obj326.Name = "LastSeparators";
            obj327.MChildren.Add(obj339);
            obj327.IsDerived = true;
            obj327.Type = obj339;
            obj327.Name = "GreenType";
            obj328.MChildren.Add(obj340);
            obj328.IsDerived = true;
            obj328.Type = obj340;
            obj328.Name = "GreenSyntaxCondition";
            obj329.MChildren.Add(obj341);
            obj329.IsDerived = true;
            obj329.Type = obj341;
            obj329.Name = "RedType";
            obj330.Type = typeof(bool);
            obj331.Type = typeof(bool);
            obj332.IsArray = true;
            obj332.Type = __MetaType.FromModelObject(obj93);
            obj333.IsArray = true;
            obj333.Type = __MetaType.FromModelObject(obj93);
            obj334.Type = __MetaType.FromModelObject(obj93);
            obj335.Type = __MetaType.FromModelObject(obj93);
            obj336.Type = __MetaType.FromModelObject(obj93);
            obj337.IsArray = true;
            obj337.Type = __MetaType.FromModelObject(obj93);
            obj338.IsArray = true;
            obj338.Type = __MetaType.FromModelObject(obj93);
            obj339.Type = typeof(string);
            obj340.IsNullable = true;
            obj340.Type = typeof(string);
            obj341.Type = typeof(string);
            obj342.MChildren.Add(obj343);
            obj342.MChildren.Add(obj344);
            obj342.MChildren.Add(obj345);
            obj342.BaseTypes.Add(obj228);
            obj342.Properties.Add(obj343);
            obj342.Properties.Add(obj344);
            obj342.Properties.Add(obj345);
            obj342.SymbolType = typeof(global::MetaDslx.Languages.MetaCompiler.Symbols.TokenSymbol);
            obj342.Name = "Token";
            obj343.MChildren.Add(obj346);
            obj343.SymbolProperty = __MetaSymbol.FromValue("ReturnType");
            obj343.Type = obj346;
            obj343.Name = "ReturnType";
            obj344.MChildren.Add(obj347);
            obj344.Type = obj347;
            obj344.Name = "IsTrivia";
            obj345.MChildren.Add(obj348);
            obj345.Type = obj348;
            obj345.Name = "TokenKind";
            obj346.Type = typeof(__MetaType);
            obj347.Type = typeof(bool);
            obj348.IsNullable = true;
            obj348.Type = __MetaType.FromModelObject(obj358);
            obj349.MChildren.Add(obj350);
            obj349.MChildren.Add(obj351);
            obj349.MChildren.Add(obj352);
            obj349.MChildren.Add(obj353);
            obj349.BaseTypes.Add(obj142);
            obj349.Properties.Add(obj350);
            obj349.Properties.Add(obj351);
            obj349.Properties.Add(obj352);
            obj349.Properties.Add(obj353);
            obj349.Name = "TokenAlts";
            obj350.MChildren.Add(obj354);
            obj350.IsContainment = true;
            obj350.Type = obj354;
            obj350.Name = "Tokens";
            obj351.MChildren.Add(obj355);
            obj351.IsDerived = true;
            obj351.Type = obj355;
            obj351.Name = "GreenType";
            obj352.MChildren.Add(obj356);
            obj352.IsDerived = true;
            obj352.Type = obj356;
            obj352.Name = "GreenSyntaxCondition";
            obj353.MChildren.Add(obj357);
            obj353.IsDerived = true;
            obj353.Type = obj357;
            obj353.Name = "RedType";
            obj354.IsArray = true;
            obj354.Type = __MetaType.FromModelObject(obj302);
            obj355.Type = typeof(string);
            obj356.IsNullable = true;
            obj356.Type = typeof(string);
            obj357.Type = typeof(string);
            obj358.MChildren.Add(obj359);
            obj358.MChildren.Add(obj360);
            obj358.Properties.Add(obj359);
            obj358.Properties.Add(obj360);
            obj358.Name = "TokenKind";
            obj359.MChildren.Add(obj361);
            obj359.Type = obj361;
            obj359.Name = "Name";
            obj360.MChildren.Add(obj362);
            obj360.Type = obj362;
            obj360.Name = "TypeName";
            obj361.Type = typeof(string);
            obj362.Type = typeof(string);
            obj363.MChildren.Add(obj364);
            obj363.MChildren.Add(obj365);
            obj363.MChildren.Add(obj366);
            obj363.MChildren.Add(obj367);
            obj363.Literals.Add(obj364);
            obj363.Literals.Add(obj365);
            obj363.Literals.Add(obj366);
            obj363.Literals.Add(obj367);
            obj363.Name = "Assignment";
            obj364.Name = "Assign";
            obj365.Name = "QuestionAssign";
            obj366.Name = "NegatedAssign";
            obj367.Name = "PlusAssign";
            obj368.MChildren.Add(obj369);
            obj368.MChildren.Add(obj370);
            obj368.MChildren.Add(obj371);
            obj368.MChildren.Add(obj372);
            obj368.MChildren.Add(obj373);
            obj368.MChildren.Add(obj374);
            obj368.MChildren.Add(obj375);
            obj368.Literals.Add(obj369);
            obj368.Literals.Add(obj370);
            obj368.Literals.Add(obj371);
            obj368.Literals.Add(obj372);
            obj368.Literals.Add(obj373);
            obj368.Literals.Add(obj374);
            obj368.Literals.Add(obj375);
            obj368.Name = "Multiplicity";
            obj369.Name = "ExactlyOne";
            obj370.Name = "ZeroOrOne";
            obj371.Name = "ZeroOrMore";
            obj372.Name = "OneOrMore";
            obj373.Name = "NonGreedyZeroOrOne";
            obj374.Name = "NonGreedyZeroOrMore";
            obj375.Name = "NonGreedyOneOrMore";
            _model.IsSealed = true;
        }
    
        public override string MName => nameof(Compiler);
        public override string MNamespace => "MetaDslx.Languages.MetaCompiler.Model";
        public override __ModelVersion MVersion => default;
        public override string MUri => "MetaDslx.Languages.MetaCompiler.Model.Compiler";
        public override string MPrefix => "c";
        public override __Model MModel => _model;
    
        public override global::System.Collections.Immutable.ImmutableDictionary<__MetaType, __ModelEnumInfo> MEnumInfosByType => _enumInfosByType;
        public override global::System.Collections.Immutable.ImmutableDictionary<string, __ModelEnumInfo> MEnumInfosByName => _enumInfosByName;
        public override global::System.Collections.Immutable.ImmutableDictionary<__MetaType, __ModelClassInfo> MClassInfosByType => _classInfosByType;
        public override global::System.Collections.Immutable.ImmutableDictionary<string, __ModelClassInfo> MClassInfosByName => _classInfosByName;
    
        public override global::System.Collections.Immutable.ImmutableArray<__MetaType> MEnumTypes => _enumTypes;
        public override global::System.Collections.Immutable.ImmutableArray<__ModelEnumInfo> MEnumInfos => _enumInfos;
        public override global::System.Collections.Immutable.ImmutableArray<__MetaType> MClassTypes => _classTypes;
        public override global::System.Collections.Immutable.ImmutableArray<__ModelClassInfo> MClassInfos => _classInfos;
    
    
    
        public static __ModelEnumInfo AssignmentInfo => __Impl.__Assignment_Info.Instance;
        public static __ModelEnumInfo MultiplicityInfo => __Impl.__Multiplicity_Info.Instance;
        public static __ModelClassInfo AlternativeInfo => __Impl.Alternative_Impl.__Info.Instance;
        public static __ModelProperty Alternative_ReturnType => _Alternative_ReturnType;
        public static __ModelProperty Alternative_ReturnValue => _Alternative_ReturnValue;
        public static __ModelProperty Alternative_Elements => _Alternative_Elements;
        public static __ModelProperty Alternative_GreenName => _Alternative_GreenName;
        public static __ModelProperty Alternative_GreenConstructorParameters => _Alternative_GreenConstructorParameters;
        public static __ModelProperty Alternative_GreenConstructorArguments => _Alternative_GreenConstructorArguments;
        public static __ModelProperty Alternative_GreenUpdateParameters => _Alternative_GreenUpdateParameters;
        public static __ModelProperty Alternative_GreenUpdateArguments => _Alternative_GreenUpdateArguments;
        public static __ModelProperty Alternative_RedName => _Alternative_RedName;
        public static __ModelProperty Alternative_RedUpdateParameters => _Alternative_RedUpdateParameters;
        public static __ModelProperty Alternative_RedUpdateArguments => _Alternative_RedUpdateArguments;
        public static __ModelProperty Alternative_RedOptionalUpdateParameters => _Alternative_RedOptionalUpdateParameters;
        public static __ModelProperty Alternative_RedToGreenArgumentList => _Alternative_RedToGreenArgumentList;
        public static __ModelProperty Alternative_RedToGreenOptionalArgumentList => _Alternative_RedToGreenOptionalArgumentList;
        public static __ModelProperty Alternative_HasRedToGreenOptionalArguments => _Alternative_HasRedToGreenOptionalArguments;
        public static __ModelClassInfo AnnotationInfo => __Impl.Annotation_Impl.__Info.Instance;
        public static __ModelProperty Annotation_AttributeClass => _Annotation_AttributeClass;
        public static __ModelProperty Annotation_Arguments => _Annotation_Arguments;
        public static __ModelClassInfo AnnotationArgumentInfo => __Impl.AnnotationArgument_Impl.__Info.Instance;
        public static __ModelProperty AnnotationArgument_NamedParameter => _AnnotationArgument_NamedParameter;
        public static __ModelProperty AnnotationArgument_Parameter => _AnnotationArgument_Parameter;
        public static __ModelProperty AnnotationArgument_ParameterType => _AnnotationArgument_ParameterType;
        public static __ModelProperty AnnotationArgument_Value => _AnnotationArgument_Value;
        public static __ModelClassInfo ArrayExpressionInfo => __Impl.ArrayExpression_Impl.__Info.Instance;
        public static __ModelProperty ArrayExpression_Items => _ArrayExpression_Items;
        public static __ModelClassInfo BinderInfo => __Impl.Binder_Impl.__Info.Instance;
        public static __ModelProperty Binder_TypeName => _Binder_TypeName;
        public static __ModelProperty Binder_Arguments => _Binder_Arguments;
        public static __ModelProperty Binder_IsNegated => _Binder_IsNegated;
        public static __ModelProperty Binder_ConstructorArguments => _Binder_ConstructorArguments;
        public static __ModelClassInfo BinderArgumentInfo => __Impl.BinderArgument_Impl.__Info.Instance;
        public static __ModelProperty BinderArgument_Name => _BinderArgument_Name;
        public static __ModelProperty BinderArgument_TypeName => _BinderArgument_TypeName;
        public static __ModelProperty BinderArgument_IsArray => _BinderArgument_IsArray;
        public static __ModelProperty BinderArgument_Values => _BinderArgument_Values;
        public static __ModelClassInfo BlockInfo => __Impl.Block_Impl.__Info.Instance;
        public static __ModelProperty Block_GreenType => _Block_GreenType;
        public static __ModelProperty Block_GreenSyntaxCondition => _Block_GreenSyntaxCondition;
        public static __ModelProperty Block_RedType => _Block_RedType;
        public static __ModelClassInfo CSharpElementInfo => __Impl.CSharpElement_Impl.__Info.Instance;
        public static __ModelProperty CSharpElement_Annotations => _CSharpElement_Annotations;
        public static __ModelProperty CSharpElement_CSharpName => _CSharpElement_CSharpName;
        public static __ModelProperty CSharpElement_AntlrName => _CSharpElement_AntlrName;
        public static __ModelProperty CSharpElement_Binders => _CSharpElement_Binders;
        public static __ModelProperty CSharpElement_ContainsBinders => _CSharpElement_ContainsBinders;
        public static __ModelClassInfo DeclarationInfo => __Impl.Declaration_Impl.__Info.Instance;
        public static __ModelProperty Declaration_Name => _Declaration_Name;
        public static __ModelProperty Declaration_Namespace => _Declaration_Namespace;
        public static __ModelProperty Declaration_FullName => _Declaration_FullName;
        public static __ModelClassInfo ElementInfo => __Impl.Element_Impl.__Info.Instance;
        public static __ModelProperty Element_Name => _Element_Name;
        public static __ModelProperty Element_Assignment => _Element_Assignment;
        public static __ModelProperty Element_Value => _Element_Value;
        public static __ModelProperty Element_IsToken => _Element_IsToken;
        public static __ModelProperty Element_IsList => _Element_IsList;
        public static __ModelProperty Element_FieldName => _Element_FieldName;
        public static __ModelProperty Element_ParameterName => _Element_ParameterName;
        public static __ModelProperty Element_PropertyName => _Element_PropertyName;
        public static __ModelProperty Element_GreenFieldType => _Element_GreenFieldType;
        public static __ModelProperty Element_GreenParameterValue => _Element_GreenParameterValue;
        public static __ModelProperty Element_GreenPropertyType => _Element_GreenPropertyType;
        public static __ModelProperty Element_GreenPropertyValue => _Element_GreenPropertyValue;
        public static __ModelProperty Element_GreenSyntaxNullCondition => _Element_GreenSyntaxNullCondition;
        public static __ModelProperty Element_GreenSyntaxCondition => _Element_GreenSyntaxCondition;
        public static __ModelProperty Element_IsOptionalUpdateParameter => _Element_IsOptionalUpdateParameter;
        public static __ModelProperty Element_RedFieldType => _Element_RedFieldType;
        public static __ModelProperty Element_RedParameterValue => _Element_RedParameterValue;
        public static __ModelProperty Element_RedPropertyType => _Element_RedPropertyType;
        public static __ModelProperty Element_RedPropertyValue => _Element_RedPropertyValue;
        public static __ModelProperty Element_RedToGreenArgument => _Element_RedToGreenArgument;
        public static __ModelProperty Element_RedToGreenOptionalArgument => _Element_RedToGreenOptionalArgument;
        public static __ModelProperty Element_RedSyntaxNullCondition => _Element_RedSyntaxNullCondition;
        public static __ModelProperty Element_RedSyntaxCondition => _Element_RedSyntaxCondition;
        public static __ModelProperty Element_VisitCall => _Element_VisitCall;
        public static __ModelClassInfo ElementValueInfo => __Impl.ElementValue_Impl.__Info.Instance;
        public static __ModelProperty ElementValue_Multiplicity => _ElementValue_Multiplicity;
        public static __ModelProperty ElementValue_GreenType => _ElementValue_GreenType;
        public static __ModelProperty ElementValue_GreenSyntaxCondition => _ElementValue_GreenSyntaxCondition;
        public static __ModelProperty ElementValue_RedType => _ElementValue_RedType;
        public static __ModelClassInfo EofInfo => __Impl.Eof_Impl.__Info.Instance;
        public static __ModelProperty Eof_GreenType => _Eof_GreenType;
        public static __ModelProperty Eof_GreenSyntaxCondition => _Eof_GreenSyntaxCondition;
        public static __ModelProperty Eof_RedType => _Eof_RedType;
        public static __ModelClassInfo ExpressionInfo => __Impl.Expression_Impl.__Info.Instance;
        public static __ModelProperty Expression_Value => _Expression_Value;
        public static __ModelClassInfo FixedInfo => __Impl.Fixed_Impl.__Info.Instance;
        public static __ModelProperty Fixed_Text => _Fixed_Text;
        public static __ModelClassInfo FragmentInfo => __Impl.Fragment_Impl.__Info.Instance;
        public static __ModelClassInfo GrammarInfo => __Impl.Grammar_Impl.__Info.Instance;
        public static __ModelProperty Grammar_Language => _Grammar_Language;
        public static __ModelProperty Grammar_GrammarRules => _Grammar_GrammarRules;
        public static __ModelProperty Grammar_TokenKinds => _Grammar_TokenKinds;
        public static __ModelProperty Grammar_Tokens => _Grammar_Tokens;
        public static __ModelProperty Grammar_Rules => _Grammar_Rules;
        public static __ModelProperty Grammar_Blocks => _Grammar_Blocks;
        public static __ModelProperty Grammar_DefaultWhitespace => _Grammar_DefaultWhitespace;
        public static __ModelProperty Grammar_DefaultEndOfLine => _Grammar_DefaultEndOfLine;
        public static __ModelProperty Grammar_DefaultSeparator => _Grammar_DefaultSeparator;
        public static __ModelProperty Grammar_DefaultIdentifier => _Grammar_DefaultIdentifier;
        public static __ModelProperty Grammar_MainRule => _Grammar_MainRule;
        public static __ModelClassInfo GrammarRuleInfo => __Impl.GrammarRule_Impl.__Info.Instance;
        public static __ModelProperty GrammarRule_Language => _GrammarRule_Language;
        public static __ModelProperty GrammarRule_Grammar => _GrammarRule_Grammar;
        public static __ModelClassInfo LAlternativeInfo => __Impl.LAlternative_Impl.__Info.Instance;
        public static __ModelProperty LAlternative_IsFixed => _LAlternative_IsFixed;
        public static __ModelProperty LAlternative_FixedText => _LAlternative_FixedText;
        public static __ModelProperty LAlternative_Elements => _LAlternative_Elements;
        public static __ModelClassInfo LanguageInfo => __Impl.Language_Impl.__Info.Instance;
        public static __ModelProperty Language_BaseLanguages => _Language_BaseLanguages;
        public static __ModelProperty Language_Grammar => _Language_Grammar;
        public static __ModelClassInfo LBlockInfo => __Impl.LBlock_Impl.__Info.Instance;
        public static __ModelProperty LBlock_IsFixed => _LBlock_IsFixed;
        public static __ModelProperty LBlock_FixedText => _LBlock_FixedText;
        public static __ModelProperty LBlock_Alternatives => _LBlock_Alternatives;
        public static __ModelClassInfo LElementInfo => __Impl.LElement_Impl.__Info.Instance;
        public static __ModelProperty LElement_IsFixed => _LElement_IsFixed;
        public static __ModelProperty LElement_FixedText => _LElement_FixedText;
        public static __ModelProperty LElement_IsNegated => _LElement_IsNegated;
        public static __ModelProperty LElement_Value => _LElement_Value;
        public static __ModelProperty LElement_Multiplicity => _LElement_Multiplicity;
        public static __ModelClassInfo LElementValueInfo => __Impl.LElementValue_Impl.__Info.Instance;
        public static __ModelProperty LElementValue_IsFixed => _LElementValue_IsFixed;
        public static __ModelProperty LElementValue_FixedText => _LElementValue_FixedText;
        public static __ModelClassInfo LexerRuleInfo => __Impl.LexerRule_Impl.__Info.Instance;
        public static __ModelProperty LexerRule_Alternatives => _LexerRule_Alternatives;
        public static __ModelProperty LexerRule_IsFixed => _LexerRule_IsFixed;
        public static __ModelProperty LexerRule_FixedText => _LexerRule_FixedText;
        public static __ModelClassInfo LFixedInfo => __Impl.LFixed_Impl.__Info.Instance;
        public static __ModelProperty LFixed_IsFixed => _LFixed_IsFixed;
        public static __ModelProperty LFixed_FixedText => _LFixed_FixedText;
        public static __ModelProperty LFixed_Text => _LFixed_Text;
        public static __ModelClassInfo LRangeInfo => __Impl.LRange_Impl.__Info.Instance;
        public static __ModelProperty LRange_IsFixed => _LRange_IsFixed;
        public static __ModelProperty LRange_FixedText => _LRange_FixedText;
        public static __ModelProperty LRange_StartChar => _LRange_StartChar;
        public static __ModelProperty LRange_EndChar => _LRange_EndChar;
        public static __ModelClassInfo LReferenceInfo => __Impl.LReference_Impl.__Info.Instance;
        public static __ModelProperty LReference_IsFixed => _LReference_IsFixed;
        public static __ModelProperty LReference_FixedText => _LReference_FixedText;
        public static __ModelProperty LReference_Rule => _LReference_Rule;
        public static __ModelClassInfo LSetInfo => __Impl.LSet_Impl.__Info.Instance;
        public static __ModelProperty LSet_IsFixed => _LSet_IsFixed;
        public static __ModelProperty LSet_FixedText => _LSet_FixedText;
        public static __ModelProperty LSet_Items => _LSet_Items;
        public static __ModelClassInfo LSetCharInfo => __Impl.LSetChar_Impl.__Info.Instance;
        public static __ModelProperty LSetChar_IsFixed => _LSetChar_IsFixed;
        public static __ModelProperty LSetChar_FixedText => _LSetChar_FixedText;
        public static __ModelProperty LSetChar_Char => _LSetChar_Char;
        public static __ModelClassInfo LSetItemInfo => __Impl.LSetItem_Impl.__Info.Instance;
        public static __ModelProperty LSetItem_IsFixed => _LSetItem_IsFixed;
        public static __ModelProperty LSetItem_FixedText => _LSetItem_FixedText;
        public static __ModelClassInfo LSetRangeInfo => __Impl.LSetRange_Impl.__Info.Instance;
        public static __ModelProperty LSetRange_IsFixed => _LSetRange_IsFixed;
        public static __ModelProperty LSetRange_FixedText => _LSetRange_FixedText;
        public static __ModelProperty LSetRange_StartChar => _LSetRange_StartChar;
        public static __ModelProperty LSetRange_EndChar => _LSetRange_EndChar;
        public static __ModelClassInfo LWildCardInfo => __Impl.LWildCard_Impl.__Info.Instance;
        public static __ModelProperty LWildCard_IsFixed => _LWildCard_IsFixed;
        public static __ModelProperty LWildCard_FixedText => _LWildCard_FixedText;
        public static __ModelClassInfo RuleInfo => __Impl.Rule_Impl.__Info.Instance;
        public static __ModelProperty Rule_ReturnType => _Rule_ReturnType;
        public static __ModelProperty Rule_Alternatives => _Rule_Alternatives;
        public static __ModelProperty Rule_BaseRule => _Rule_BaseRule;
        public static __ModelProperty Rule_GreenName => _Rule_GreenName;
        public static __ModelProperty Rule_RedName => _Rule_RedName;
        public static __ModelClassInfo RuleRefInfo => __Impl.RuleRef_Impl.__Info.Instance;
        public static __ModelProperty RuleRef_GrammarRule => _RuleRef_GrammarRule;
        public static __ModelProperty RuleRef_ReferencedTypes => _RuleRef_ReferencedTypes;
        public static __ModelProperty RuleRef_Token => _RuleRef_Token;
        public static __ModelProperty RuleRef_Rule => _RuleRef_Rule;
        public static __ModelProperty RuleRef_GreenType => _RuleRef_GreenType;
        public static __ModelProperty RuleRef_GreenSyntaxCondition => _RuleRef_GreenSyntaxCondition;
        public static __ModelProperty RuleRef_RedType => _RuleRef_RedType;
        public static __ModelClassInfo SeparatedListInfo => __Impl.SeparatedList_Impl.__Info.Instance;
        public static __ModelProperty SeparatedList_SeparatorFirst => _SeparatedList_SeparatorFirst;
        public static __ModelProperty SeparatedList_RepeatedSeparatorFirst => _SeparatedList_RepeatedSeparatorFirst;
        public static __ModelProperty SeparatedList_FirstItems => _SeparatedList_FirstItems;
        public static __ModelProperty SeparatedList_FirstSeparators => _SeparatedList_FirstSeparators;
        public static __ModelProperty SeparatedList_RepeatedBlock => _SeparatedList_RepeatedBlock;
        public static __ModelProperty SeparatedList_RepeatedItem => _SeparatedList_RepeatedItem;
        public static __ModelProperty SeparatedList_RepeatedSeparator => _SeparatedList_RepeatedSeparator;
        public static __ModelProperty SeparatedList_LastItems => _SeparatedList_LastItems;
        public static __ModelProperty SeparatedList_LastSeparators => _SeparatedList_LastSeparators;
        public static __ModelProperty SeparatedList_GreenType => _SeparatedList_GreenType;
        public static __ModelProperty SeparatedList_GreenSyntaxCondition => _SeparatedList_GreenSyntaxCondition;
        public static __ModelProperty SeparatedList_RedType => _SeparatedList_RedType;
        public static __ModelClassInfo TokenInfo => __Impl.Token_Impl.__Info.Instance;
        public static __ModelProperty Token_ReturnType => _Token_ReturnType;
        public static __ModelProperty Token_IsTrivia => _Token_IsTrivia;
        public static __ModelProperty Token_TokenKind => _Token_TokenKind;
        public static __ModelClassInfo TokenAltsInfo => __Impl.TokenAlts_Impl.__Info.Instance;
        public static __ModelProperty TokenAlts_Tokens => _TokenAlts_Tokens;
        public static __ModelProperty TokenAlts_GreenType => _TokenAlts_GreenType;
        public static __ModelProperty TokenAlts_GreenSyntaxCondition => _TokenAlts_GreenSyntaxCondition;
        public static __ModelProperty TokenAlts_RedType => _TokenAlts_RedType;
        public static __ModelClassInfo TokenKindInfo => __Impl.TokenKind_Impl.__Info.Instance;
        public static __ModelProperty TokenKind_Name => _TokenKind_Name;
        public static __ModelProperty TokenKind_TypeName => _TokenKind_TypeName;
    }
}
