lexer grammar CompilerLexer;

LR_TComma: ',';
LR_Utf8Bom: '\u00EF' '\u00BB' '\u00BF' -> channel(HIDDEN);
LR_KNamespace: 'namespace';
LR_TSemicolon: ';';
LR_KUsing: 'using';
LR_KLanguage: 'language';
LR_KBlock: 'block';
LR_KReturns: 'returns';
LR_TColon: ':';
LR_TBar: '|';
LR_TExclLBrace: '!{';
LR_TRBrace: '}';
LR_TEqGt: '=>';
LR_THash: '#';
LR_THashLBrace: '#{';
LR_KEof: 'eof';
LR_TLParen: '(';
LR_TRParen: ')';
LR_KToken: 'token';
LR_KHidden: 'hidden';
LR_KFragment: 'fragment';
LR_TTilde: '~';
LR_TDot: '.';
LR_TDotDot: '..';
LR_KNull: 'null';
LR_KTrue: 'true';
LR_KFalse: 'false';
LR_TLBracket: '[';
LR_TRBracket: ']';
LR_TEq: '=';
LR_TQuestionEq: '?=';
LR_TExclEq: '!=';
LR_TPlusEq: '+=';
LR_TQuestion: '?';
LR_TAsterisk: '*';
LR_TPlus: '+';
LR_TQuestionQuestion: '??';
LR_TAsteriskQuestion: '*?';
LR_TPlusQuestion: '+?';
LR_TInteger: '0' | '1'..'9' ('0'..'9')*;
LR_TDecimal: ('0' | '1'..'9' ('0'..'9')*) '.' ('0'..'9')+;
LR_TIdentifier: ('_' | 'a'..'z' | 'A'..'Z')+ ('_' | 'a'..'z' | 'A'..'Z' | '0'..'9')*;
LR_TString: '"' LR_DoubleQuoteTextCharacter* '"' | '\'' LR_SingleQuoteTextCharacter* '\'';
fragment LR_DoubleQuoteTextCharacter: LR_DoubleQuoteTextSimple | LR_CharacterEscapeSimple | LR_CharacterEscapeUnicode;
fragment LR_DoubleQuoteTextSimple: ~('"' | '\\' | '\u000A' | '\u000D' | '\u0085' | '\u2028' | '\u2029');
fragment LR_SingleQuoteTextCharacter: LR_SingleQuoteTextSimple | LR_CharacterEscapeSimple | LR_CharacterEscapeUnicode;
fragment LR_SingleQuoteTextSimple: ~('\'' | '\\' | '\u000A' | '\u000D' | '\u0085' | '\u2028' | '\u2029');
fragment LR_CharacterEscapeSimple: '\\' LR_CharacterEscapeSimpleCharacter;
fragment LR_CharacterEscapeSimpleCharacter: '\'' | '"' | '\\' | '0' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v';
fragment LR_CharacterEscapeUnicode: '\\u' LR_HexDigit LR_HexDigit LR_HexDigit LR_HexDigit | '\\U' LR_HexDigit LR_HexDigit LR_HexDigit LR_HexDigit LR_HexDigit LR_HexDigit LR_HexDigit LR_HexDigit;
fragment LR_HexDigit: ('0'..'9' | 'a'..'f' | 'A'..'F');
LR_TWhitespace: ('\t' | ' ')+ -> channel(HIDDEN);
LR_TLineEnd: ('\r\n' | '\r' | '\n') -> channel(HIDDEN);
LR_TSingleLineComment: '//' ~('\r' | '\n')* -> channel(HIDDEN);
LR_TMultiLineComment: '/*' .*? '*/' -> channel(HIDDEN);
LR_TInvalidToken: .;
