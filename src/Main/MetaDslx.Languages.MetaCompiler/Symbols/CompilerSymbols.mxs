namespace MetaDslx.Languages.MetaCompiler.Symbols

using MetaDslx.CodeAnalysis
using MetaDslx.CodeAnalysis.Symbols

symbol Symbol
{
    weak Attribute[] Attributes
}

symbol Attribute
{
    Type AttributeClass
}

symbol Declaration
{
    weak Accessibility DeclaredAccessibility
    bool IsStatic
    bool IsExtern
    weak Type[] TypeArguments
    weak Import[] Imports
    weak derived string[] MemberNames
    weak derived Declaration[] Members
    weak derived Type[] TypeMembers
    Declaration[] GetMembers(string name)
        cache if "MemberNames.Contains(name)"
    Declaration[] GetMembers(string name, string metadataName)
        cache if "MemberNames.Contains(name)"
    Type[] GetTypeMembers(string name)
        cache if "MemberNames.Contains(name)"
    Type[] GetTypeMembers(string name, string metadataName)
        cache if "MemberNames.Contains(name)"
}

symbol Annotation : Attribute
{
    AnnotationArgument[] Arguments
    derived Declaration[] Constructors
    derived Declaration[][] Parameters
    derived Declaration SelectedConstructor
    derived Declaration[] SelectedParameters phase SelectedConstructor
}

symbol AnnotationArgument
{
    derived Annotation? AnnotationSymbol
    derived bool IsNamedArgument
    MetaSymbol NamedParameter
    derived Declaration Parameter
    derived MetaType ParameterType phase Parameter
    Expression Value
}

symbol Expression
{
    derived PAlternative? ContainingPAlternativeSymbol
    derived AnnotationArgument? ContainingAnnotationArgumentSymbol
    derived MetaType ExpectedType
    derived MetaSymbol Value
    derived MetaSymbol[] Values phase Value
}

symbol PAlternative : Declaration
{
    derived ParserRule? ContainingParserRuleSymbol
    derived PBlock? ContainingPBlockSymbol
    PElement[] Elements
    Expression? ReturnValue
    derived MetaType ReturnType
    derived MetaType ExpectedType
    derived PElement AllSimpleElements
}

symbol ParserRule : Declaration
{
    MetaType ReturnType
    PAlternative[] Alternatives
}

symbol PBlock : Declaration
{
    derived MetaType ExpectedType
    PAlternative[] Alternatives
}

symbol PElement : Declaration
{
    derived bool IsNamedElement
    derived PAlternative? ContainingPAlternativeSymbol
    MetaSymbol Value
    Assignment Assignment
    derived MetaType ExpectedType
    derived ExpectedTypeKind ExpectedKind phase ExpectedType
}

symbol PReference : Declaration
{
    MetaSymbol Rule
    MetaType[] ReferencedTypes
}

symbol Token : Declaration
{
    MetaType ReturnType
    derived MetaType ExpectedType
}
