namespace MetaDslx.CodeAnalysis.Symbols;

using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Symbols;

symbol Symbol
{
    weak AttributeSymbol[] Attributes;
}

symbol AttributeSymbol
{
    TypeSymbol AttributeClass;
}

symbol AssemblySymbol
{
    plain abstract ModuleSymbol? SourceModule;
    plain abstract ModuleSymbol[] Modules;
    plain abstract NamespaceSymbol GlobalNamespace;
    plain abstract bool IsCorLibrary;
}

symbol ModuleSymbol
{
    plain abstract NamespaceSymbol GlobalNamespace;
    NamespaceSymbol? GetRootNamespace(SyntaxTree syntaxTree);
}

symbol DeclarationSymbol
{
    weak Accessibility DeclaredAccessibility;
    bool IsStatic;
    bool IsExtern;
    weak DeclarationSymbol OriginalDefinition;
    weak TypeSymbol[] TypeArguments;
    weak ImportSymbol[] Imports;
    derived weak string[] MemberNames;
    derived weak DeclarationSymbol[] Members;
    derived weak TypeSymbol[] TypeMembers;
    cached DeclarationSymbol[] GetMembers(string name) if "MemberNames.Contains(name)";
    cached DeclarationSymbol[] GetMembers(string name, string metadataName) if "MemberNames.Contains(name)";
    cached TypeSymbol[] GetTypeMembers(string name) if "MemberNames.Contains(name)";
    cached TypeSymbol[] GetTypeMembers(string name, string metadataName) if "MemberNames.Contains(name)";
}

symbol ImportSymbol
{
    string[] Files;
    AliasSymbol[] Aliases;
    NamespaceSymbol[] Namespaces;
    DeclarationSymbol[] Symbols;

    derived DeclarationSymbol[] ImportedSymbols;
}

symbol ImportMetaModelSymbol : ImportSymbol
{
    MetaSymbol[] MetaModelSymbols;
    derived MetaDslx.Modeling.MetaModel[] MetaModels;
}

symbol AliasSymbol : DeclarationSymbol
{
    Symbol Target;
}

symbol NamespaceSymbol : DeclarationSymbol
{
    plain abstract NamespaceExtent Extent;
    plain abstract bool IsGlobalNamespace;
    plain abstract NamespaceKind NamespaceKind;
    plain abstract Compilation? ContainingCompilation;

    derived NamespaceSymbol[] ConstituentNamespaces;
    derived NamespaceSymbol[] NamespaceMembers;
    NamespaceSymbol? LookupNestedNamespace(string[] names);
    NamespaceSymbol? LookupNestedNamespace(string name);
}

symbol TypeSymbol : DeclarationSymbol
{
    bool IsReferenceType;
    bool IsValueType;
    weak TypeParameterSymbol[] TypeParameters;
    weak TypeSymbol[] BaseTypes;
    derived TypeSymbol[] AllBaseTypes;

    bool IsDerivedFrom(TypeSymbol @type, TypeEqualityComparer comparison);
    bool IsEqualToOrDerivedFrom(TypeSymbol @type, TypeEqualityComparer comparison);
}

symbol TypeParameterSymbol : TypeSymbol
{
}

