namespace MetaDslx.CodeAnalysis.Symbols

using MetaDslx.CodeAnalysis
using MetaDslx.CodeAnalysis.Symbols

symbol Symbol
{
    weak Attribute[] Attributes
}

symbol Attribute
{
    Type AttributeClass
}

symbol Assembly
{
    plain ISymbolFactory SymbolFactory
    plain Module? SourceModule
    plain Module[] Modules
    plain Namespace GlobalNamespace
    plain bool IsCorLibrary
}

symbol Module
{
    plain ISymbolFactory SymbolFactory
    plain Namespace GlobalNamespace
    NamespaceSymbol? GetRootNamespace(SyntaxTree syntaxTree)
}

symbol Declaration
{
    weak Accessibility DeclaredAccessibility
    bool IsStatic
    bool IsExtern
    weak Type[] TypeArguments
    weak Import[] Imports
    derived weak string[] MemberNames
    derived weak Declaration[] Members
    derived weak Type[] TypeMembers
    cached Declaration[] GetMembers(string name)
        if "MemberNames.Contains(name)"
    cached Declaration[] GetMembers(string name, string metadataName)
        if "MemberNames.Contains(name)"
    cached Type[] GetTypeMembers(string name)
        if "MemberNames.Contains(name)"
    cached Type[] GetTypeMembers(string name, string metadataName)
        if "MemberNames.Contains(name)"
}

symbol Import
{
    string[] Files
    Alias[] Aliases
    Namespace[] Namespaces
    Declaration[] Symbols

    derived Declaration[] ImportedSymbols
}

symbol ImportMetaModel : Import
{
    MetaSymbol MetaModelSymbols
    derived MetaDslx.Modeling.MetaModel[] MetaModels
}

symbol Alias : Declaration
{
    Symbol Target
}

symbol Namespace : Declaration
{
    plain NamespaceExtent Extent
    plain bool IsGlobalNamespace
    plain NamespaceKind NamespaceKind
    plain Compilation? ContainingCompilation

    derived Namespace[] ConstituentNamespaces
    derived Namespace[] NamespaceMembers
    Namespace? LookupNestedNamespace(string[] names)
    Namespace? LookupNestedNamespace(string name)
}

symbol Type : Declaration
{
    bool IsReferenceType
    bool IsValueType
    weak TypeParameter[] TypeParameters
    weak Type[] BaseTypes
    derived Type[] AllBaseTypes

    bool IsDerivedFrom(Type @type, TypeEqualityComparer comparison)
    bool IsEqualToOrDerivedFrom(Type @type, TypeEqualityComparer comparison)
}

symbol TypeParameter : Type
{
}

