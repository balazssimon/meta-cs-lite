//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SymbolParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaSymbols.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SymbolParser : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_KNull=1, LR_KTrue=2, LR_KFalse=3, LR_TComma=4, LR_TUtf8Bom=5, LR_KNamespace=6, 
		LR_KUsing=7, LR_KAbstract=8, LR_KSymbol=9, LR_KPhase=10, LR_TLParen=11, 
		LR_TRParen=12, LR_KCached=13, LR_KObject=14, LR_KBool=15, LR_KChar=16, 
		LR_KString=17, LR_KByte=18, LR_KSbyte=19, LR_KShort=20, LR_KUshort=21, 
		LR_KInt=22, LR_KUint=23, LR_KLong=24, LR_KUlong=25, LR_KFloat=26, LR_KDouble=27, 
		LR_KDecimal=28, LR_KType=29, LR_KVoid=30, LR_TColon=31, LR_TLBrace=32, 
		LR_TRBrace=33, LR_KPlain=34, LR_KDerived=35, LR_KWeak=36, LR_TEq=37, LR_KIf=38, 
		LR_TQuestion=39, LR_TLBracket=40, LR_TRBracket=41, LR_TDot=42, LR_TInteger=43, 
		LR_TDecimal=44, LR_TIdentifier=45, LR_TVerbatimIdentifier=46, LR_TString=47, 
		LR_TWhitespace=48, LR_TLineEnd=49, LR_TSingleLineComment=50, LR_TMultiLineComment=51, 
		LR_TInvalidToken=52;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Symbol = 2, RULE_pr_Property = 3, 
		RULE_pr_Operation = 4, RULE_pr_Parameter = 5, RULE_pr_TypeReference = 6, 
		RULE_pr_ArrayDimensions = 7, RULE_pr_SimpleTypeReference = 8, RULE_pr_PrimitiveType = 9, 
		RULE_pr_Value = 10, RULE_pr_Name = 11, RULE_pr_Qualifier = 12, RULE_pr_Identifier = 13, 
		RULE_pr_TBoolean = 14, RULE_pr_MainBlock1 = 15, RULE_pr_SymbolBlock1 = 16, 
		RULE_pr_SymbolBlock2 = 17, RULE_pr_SymbolBlock2Block1 = 18, RULE_pr_PropertyBlock1 = 19, 
		RULE_pr_PropertyBlock1Alt1Block1 = 20, RULE_pr_PropertyBlock2 = 21, RULE_pr_PropertyBlock3 = 22, 
		RULE_pr_OperationAlt2Block1 = 23, RULE_pr_OperationAlt2Block1parametersBlock = 24, 
		RULE_pr_OperationAlt2Block2 = 25, RULE_pr_TypeReferenceBlock1 = 26, RULE_pr_ArrayDimensionsBlock1 = 27, 
		RULE_pr_QualifierIdentifierBlock = 28;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Symbol", "pr_Property", "pr_Operation", "pr_Parameter", 
		"pr_TypeReference", "pr_ArrayDimensions", "pr_SimpleTypeReference", "pr_PrimitiveType", 
		"pr_Value", "pr_Name", "pr_Qualifier", "pr_Identifier", "pr_TBoolean", 
		"pr_MainBlock1", "pr_SymbolBlock1", "pr_SymbolBlock2", "pr_SymbolBlock2Block1", 
		"pr_PropertyBlock1", "pr_PropertyBlock1Alt1Block1", "pr_PropertyBlock2", 
		"pr_PropertyBlock3", "pr_OperationAlt2Block1", "pr_OperationAlt2Block1parametersBlock", 
		"pr_OperationAlt2Block2", "pr_TypeReferenceBlock1", "pr_ArrayDimensionsBlock1", 
		"pr_QualifierIdentifierBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'true'", "'false'", "','", null, "'namespace'", "'using'", 
		"'abstract'", "'symbol'", "'phase'", "'('", "')'", "'cached'", "'object'", 
		"'bool'", "'char'", "'string'", "'byte'", "'sbyte'", "'short'", "'ushort'", 
		"'int'", "'uint'", "'long'", "'ulong'", "'float'", "'double'", "'decimal'", 
		"'type'", "'void'", "':'", "'{'", "'}'", "'plain'", "'derived'", "'weak'", 
		"'='", "'if'", "'?'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", 
		"LR_KNamespace", "LR_KUsing", "LR_KAbstract", "LR_KSymbol", "LR_KPhase", 
		"LR_TLParen", "LR_TRParen", "LR_KCached", "LR_KObject", "LR_KBool", "LR_KChar", 
		"LR_KString", "LR_KByte", "LR_KSbyte", "LR_KShort", "LR_KUshort", "LR_KInt", 
		"LR_KUint", "LR_KLong", "LR_KUlong", "LR_KFloat", "LR_KDouble", "LR_KDecimal", 
		"LR_KType", "LR_KVoid", "LR_TColon", "LR_TLBrace", "LR_TRBrace", "LR_KPlain", 
		"LR_KDerived", "LR_KWeak", "LR_TEq", "LR_KIf", "LR_TQuestion", "LR_TLBracket", 
		"LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", 
		"LR_TVerbatimIdentifier", "LR_TString", "LR_TWhitespace", "LR_TLineEnd", 
		"LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SymbolParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SymbolParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SymbolParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SymbolParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken E_KNamespace;
		public Pr_QualifierContext E_Qualifier;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _E_UsingList = new List<Pr_UsingContext>();
		public Pr_MainBlock1Context E_Block;
		public IToken E_EndOfFileToken;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(SymbolParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MainBlock1Context pr_MainBlock1() {
			return GetRuleContext<Pr_MainBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SymbolParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_localctx.E_KNamespace = Match(LR_KNamespace);
			State = 59;
			_localctx.E_Qualifier = pr_Qualifier();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 60;
				_localctx._pr_Using = pr_Using();
				_localctx._E_UsingList.Add(_localctx._pr_Using);
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 66;
			_localctx.E_Block = pr_MainBlock1();
			State = 67;
			_localctx.E_EndOfFileToken = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken E_KUsing;
		public Pr_QualifierContext E_namespaces;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(SymbolParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			_localctx.E_KUsing = Match(LR_KUsing);
			State = 70;
			_localctx.E_namespaces = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SymbolContext : ParserRuleContext {
		public IToken E_isAbstract;
		public IToken E_KSymbol;
		public Pr_NameContext E_Name;
		public Pr_SymbolBlock1Context E_Block;
		public Pr_SymbolBlock2Context E_Block1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSymbol() { return GetToken(SymbolParser.LR_KSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SymbolBlock2Context pr_SymbolBlock2() {
			return GetRuleContext<Pr_SymbolBlock2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAbstract() { return GetToken(SymbolParser.LR_KAbstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SymbolBlock1Context pr_SymbolBlock1() {
			return GetRuleContext<Pr_SymbolBlock1Context>(0);
		}
		public Pr_SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Symbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SymbolContext pr_Symbol() {
		Pr_SymbolContext _localctx = new Pr_SymbolContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KAbstract) {
				{
				State = 72;
				_localctx.E_isAbstract = Match(LR_KAbstract);
				}
			}

			State = 75;
			_localctx.E_KSymbol = Match(LR_KSymbol);
			State = 76;
			_localctx.E_Name = pr_Name();
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TColon) {
				{
				State = 77;
				_localctx.E_Block = pr_SymbolBlock1();
				}
			}

			State = 80;
			_localctx.E_Block1 = pr_SymbolBlock2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyContext : ParserRuleContext {
		public Pr_PropertyBlock1Context E_Block;
		public Pr_TypeReferenceContext E_type;
		public Pr_NameContext E_Name;
		public Pr_PropertyBlock2Context E_Block1;
		public Pr_PropertyBlock3Context E_Block2;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyBlock1Context pr_PropertyBlock1() {
			return GetRuleContext<Pr_PropertyBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyBlock2Context pr_PropertyBlock2() {
			return GetRuleContext<Pr_PropertyBlock2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyBlock3Context pr_PropertyBlock3() {
			return GetRuleContext<Pr_PropertyBlock3Context>(0);
		}
		public Pr_PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Property; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Property(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyContext pr_Property() {
		Pr_PropertyContext _localctx = new Pr_PropertyContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_Property);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 120259084288L) != 0)) {
				{
				State = 82;
				_localctx.E_Block = pr_PropertyBlock1();
				}
			}

			State = 85;
			_localctx.E_type = pr_TypeReference();
			State = 86;
			_localctx.E_Name = pr_Name();
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TEq) {
				{
				State = 87;
				_localctx.E_Block1 = pr_PropertyBlock2();
				}
			}

			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 90;
				_localctx.E_Block2 = pr_PropertyBlock3();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_OperationContext : ParserRuleContext {
		public Pr_OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Operation; } }
	 
		public Pr_OperationContext() { }
		public virtual void CopyFrom(Pr_OperationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_OperationAlt1Context : Pr_OperationContext {
		public IToken E_isPhase;
		public Pr_NameContext E_Name;
		public IToken E_TLParen;
		public IToken E_TRParen;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KPhase() { return GetToken(SymbolParser.LR_KPhase, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(SymbolParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(SymbolParser.LR_TRParen, 0); }
		public Pr_OperationAlt1Context(Pr_OperationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OperationAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_OperationAlt2Context : Pr_OperationContext {
		public IToken E_isCached;
		public Pr_TypeReferenceContext E_returnType;
		public Pr_NameContext E_Name1;
		public IToken E_TLParen1;
		public Pr_OperationAlt2Block1Context E_Block;
		public IToken E_TRParen1;
		public Pr_OperationAlt2Block2Context E_Block1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(SymbolParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(SymbolParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KCached() { return GetToken(SymbolParser.LR_KCached, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_OperationAlt2Block1Context pr_OperationAlt2Block1() {
			return GetRuleContext<Pr_OperationAlt2Block1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_OperationAlt2Block2Context pr_OperationAlt2Block2() {
			return GetRuleContext<Pr_OperationAlt2Block2Context>(0);
		}
		public Pr_OperationAlt2Context(Pr_OperationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OperationAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_OperationContext pr_Operation() {
		Pr_OperationContext _localctx = new Pr_OperationContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_Operation);
		int _la;
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KPhase:
				_localctx = new Pr_OperationAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 93;
				((Pr_OperationAlt1Context)_localctx).E_isPhase = Match(LR_KPhase);
				State = 94;
				((Pr_OperationAlt1Context)_localctx).E_Name = pr_Name();
				State = 95;
				((Pr_OperationAlt1Context)_localctx).E_TLParen = Match(LR_TLParen);
				State = 96;
				((Pr_OperationAlt1Context)_localctx).E_TRParen = Match(LR_TRParen);
				}
				break;
			case LR_KSymbol:
			case LR_KCached:
			case LR_KObject:
			case LR_KBool:
			case LR_KChar:
			case LR_KString:
			case LR_KByte:
			case LR_KSbyte:
			case LR_KShort:
			case LR_KUshort:
			case LR_KInt:
			case LR_KUint:
			case LR_KLong:
			case LR_KUlong:
			case LR_KFloat:
			case LR_KDouble:
			case LR_KDecimal:
			case LR_KType:
			case LR_KVoid:
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_OperationAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KCached) {
					{
					State = 98;
					((Pr_OperationAlt2Context)_localctx).E_isCached = Match(LR_KCached);
					}
				}

				State = 101;
				((Pr_OperationAlt2Context)_localctx).E_returnType = pr_TypeReference();
				State = 102;
				((Pr_OperationAlt2Context)_localctx).E_Name1 = pr_Name();
				State = 103;
				((Pr_OperationAlt2Context)_localctx).E_TLParen1 = Match(LR_TLParen);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 105555263734272L) != 0)) {
					{
					State = 104;
					((Pr_OperationAlt2Context)_localctx).E_Block = pr_OperationAlt2Block1();
					}
				}

				State = 107;
				((Pr_OperationAlt2Context)_localctx).E_TRParen1 = Match(LR_TRParen);
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KIf) {
					{
					State = 108;
					((Pr_OperationAlt2Context)_localctx).E_Block1 = pr_OperationAlt2Block2();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParameterContext : ParserRuleContext {
		public Pr_TypeReferenceContext E_type;
		public Pr_NameContext E_Name;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParameterContext pr_Parameter() {
		Pr_ParameterContext _localctx = new Pr_ParameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_Parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_localctx.E_type = pr_TypeReference();
			State = 114;
			_localctx.E_Name = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TypeReferenceContext : ParserRuleContext {
		public Pr_SimpleTypeReferenceContext E_type;
		public Pr_TypeReferenceBlock1Context E_Block;
		public Pr_ArrayDimensionsContext E_dimensions;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SimpleTypeReferenceContext pr_SimpleTypeReference() {
			return GetRuleContext<Pr_SimpleTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayDimensionsContext pr_ArrayDimensions() {
			return GetRuleContext<Pr_ArrayDimensionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceBlock1Context pr_TypeReferenceBlock1() {
			return GetRuleContext<Pr_TypeReferenceBlock1Context>(0);
		}
		public Pr_TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TypeReferenceContext pr_TypeReference() {
		Pr_TypeReferenceContext _localctx = new Pr_TypeReferenceContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_TypeReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_localctx.E_type = pr_SimpleTypeReference();
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TQuestion) {
				{
				State = 117;
				_localctx.E_Block = pr_TypeReferenceBlock1();
				}
			}

			State = 120;
			_localctx.E_dimensions = pr_ArrayDimensions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ArrayDimensionsContext : ParserRuleContext {
		public Pr_ArrayDimensionsBlock1Context _pr_ArrayDimensionsBlock1;
		public IList<Pr_ArrayDimensionsBlock1Context> _E_Block = new List<Pr_ArrayDimensionsBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayDimensionsBlock1Context[] pr_ArrayDimensionsBlock1() {
			return GetRuleContexts<Pr_ArrayDimensionsBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ArrayDimensionsBlock1Context pr_ArrayDimensionsBlock1(int i) {
			return GetRuleContext<Pr_ArrayDimensionsBlock1Context>(i);
		}
		public Pr_ArrayDimensionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ArrayDimensions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayDimensions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ArrayDimensionsContext pr_ArrayDimensions() {
		Pr_ArrayDimensionsContext _localctx = new Pr_ArrayDimensionsContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_ArrayDimensions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TLBracket) {
				{
				{
				State = 122;
				_localctx._pr_ArrayDimensionsBlock1 = pr_ArrayDimensionsBlock1();
				_localctx._E_Block.Add(_localctx._pr_ArrayDimensionsBlock1);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SimpleTypeReferenceContext : ParserRuleContext {
		public Pr_SimpleTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SimpleTypeReference; } }
	 
		public Pr_SimpleTypeReferenceContext() { }
		public virtual void CopyFrom(Pr_SimpleTypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_SimpleTypeReferenceAlt2Context : Pr_SimpleTypeReferenceContext {
		public Pr_QualifierContext E_Qualifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_SimpleTypeReferenceAlt2Context(Pr_SimpleTypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeReferenceAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeReferenceAlt1Context : Pr_SimpleTypeReferenceContext {
		public Pr_PrimitiveTypeContext E_PrimitiveType;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PrimitiveTypeContext pr_PrimitiveType() {
			return GetRuleContext<Pr_PrimitiveTypeContext>(0);
		}
		public Pr_SimpleTypeReferenceAlt1Context(Pr_SimpleTypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeReferenceAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SimpleTypeReferenceContext pr_SimpleTypeReference() {
		Pr_SimpleTypeReferenceContext _localctx = new Pr_SimpleTypeReferenceContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_SimpleTypeReference);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KSymbol:
			case LR_KObject:
			case LR_KBool:
			case LR_KChar:
			case LR_KString:
			case LR_KByte:
			case LR_KSbyte:
			case LR_KShort:
			case LR_KUshort:
			case LR_KInt:
			case LR_KUint:
			case LR_KLong:
			case LR_KUlong:
			case LR_KFloat:
			case LR_KDouble:
			case LR_KDecimal:
			case LR_KType:
			case LR_KVoid:
				_localctx = new Pr_SimpleTypeReferenceAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				((Pr_SimpleTypeReferenceAlt1Context)_localctx).E_PrimitiveType = pr_PrimitiveType();
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_SimpleTypeReferenceAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				((Pr_SimpleTypeReferenceAlt2Context)_localctx).E_Qualifier = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PrimitiveTypeContext : ParserRuleContext {
		public IToken E_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KObject() { return GetToken(SymbolParser.LR_KObject, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBool() { return GetToken(SymbolParser.LR_KBool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KChar() { return GetToken(SymbolParser.LR_KChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KString() { return GetToken(SymbolParser.LR_KString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KByte() { return GetToken(SymbolParser.LR_KByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSbyte() { return GetToken(SymbolParser.LR_KSbyte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KShort() { return GetToken(SymbolParser.LR_KShort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUshort() { return GetToken(SymbolParser.LR_KUshort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KInt() { return GetToken(SymbolParser.LR_KInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUint() { return GetToken(SymbolParser.LR_KUint, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KLong() { return GetToken(SymbolParser.LR_KLong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUlong() { return GetToken(SymbolParser.LR_KUlong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFloat() { return GetToken(SymbolParser.LR_KFloat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDouble() { return GetToken(SymbolParser.LR_KDouble, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDecimal() { return GetToken(SymbolParser.LR_KDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KType() { return GetToken(SymbolParser.LR_KType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSymbol() { return GetToken(SymbolParser.LR_KSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KVoid() { return GetToken(SymbolParser.LR_KVoid, 0); }
		public Pr_PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PrimitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PrimitiveTypeContext pr_PrimitiveType() {
		Pr_PrimitiveTypeContext _localctx = new Pr_PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_PrimitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			_localctx.E_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2147467776L) != 0)) ) {
				_localctx.E_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ValueContext : ParserRuleContext {
		public Pr_ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Value; } }
	 
		public Pr_ValueContext() { }
		public virtual void CopyFrom(Pr_ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ValueAlt5Context : Pr_ValueContext {
		public IToken E_KNull;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNull() { return GetToken(SymbolParser.LR_KNull, 0); }
		public Pr_ValueAlt5Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt6Context : Pr_ValueContext {
		public Pr_QualifierContext E_Qualifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ValueAlt6Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt6(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt3Context : Pr_ValueContext {
		public IToken E_TDecimal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDecimal() { return GetToken(SymbolParser.LR_TDecimal, 0); }
		public Pr_ValueAlt3Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt4Context : Pr_ValueContext {
		public Pr_TBooleanContext E_TBoolean;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TBooleanContext pr_TBoolean() {
			return GetRuleContext<Pr_TBooleanContext>(0);
		}
		public Pr_ValueAlt4Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt1Context : Pr_ValueContext {
		public IToken E_TString;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(SymbolParser.LR_TString, 0); }
		public Pr_ValueAlt1Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt2Context : Pr_ValueContext {
		public IToken E_TInteger;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TInteger() { return GetToken(SymbolParser.LR_TInteger, 0); }
		public Pr_ValueAlt2Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ValueContext pr_Value() {
		Pr_ValueContext _localctx = new Pr_ValueContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_Value);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TString:
				_localctx = new Pr_ValueAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 134;
				((Pr_ValueAlt1Context)_localctx).E_TString = Match(LR_TString);
				}
				break;
			case LR_TInteger:
				_localctx = new Pr_ValueAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 135;
				((Pr_ValueAlt2Context)_localctx).E_TInteger = Match(LR_TInteger);
				}
				break;
			case LR_TDecimal:
				_localctx = new Pr_ValueAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 136;
				((Pr_ValueAlt3Context)_localctx).E_TDecimal = Match(LR_TDecimal);
				}
				break;
			case LR_KTrue:
			case LR_KFalse:
				_localctx = new Pr_ValueAlt4Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 137;
				((Pr_ValueAlt4Context)_localctx).E_TBoolean = pr_TBoolean();
				}
				break;
			case LR_KNull:
				_localctx = new Pr_ValueAlt5Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 138;
				((Pr_ValueAlt5Context)_localctx).E_KNull = Match(LR_KNull);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ValueAlt6Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 139;
				((Pr_ValueAlt6Context)_localctx).E_Qualifier = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext E_Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			_localctx.E_Identifier = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext E_Identifier1;
		public IToken _LR_TDot;
		public IList<IToken> _E_TDot1 = new List<IToken>();
		public Pr_IdentifierContext _pr_Identifier;
		public IList<Pr_IdentifierContext> _E_Identifier2 = new List<Pr_IdentifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext[] pr_Identifier() {
			return GetRuleContexts<Pr_IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier(int i) {
			return GetRuleContext<Pr_IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TDot() { return GetTokens(SymbolParser.LR_TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot(int i) {
			return GetToken(SymbolParser.LR_TDot, i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_Qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			_localctx.E_Identifier1 = pr_Identifier();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TDot) {
				{
				{
				State = 145;
				_localctx._LR_TDot = Match(LR_TDot);
				_localctx._E_TDot1.Add(_localctx._LR_TDot);
				State = 146;
				_localctx._pr_Identifier = pr_Identifier();
				_localctx._E_Identifier2.Add(_localctx._pr_Identifier);
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public IToken E_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(SymbolParser.LR_TIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TVerbatimIdentifier() { return GetToken(SymbolParser.LR_TVerbatimIdentifier, 0); }
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_Identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_localctx.E_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) ) {
				_localctx.E_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TBooleanContext : ParserRuleContext {
		public IToken E_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KTrue() { return GetToken(SymbolParser.LR_KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFalse() { return GetToken(SymbolParser.LR_KFalse, 0); }
		public Pr_TBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TBooleanContext pr_TBoolean() {
		Pr_TBooleanContext _localctx = new Pr_TBooleanContext(Context, State);
		EnterRule(_localctx, 28, RULE_pr_TBoolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_localctx.E_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LR_KTrue || _la==LR_KFalse) ) {
				_localctx.E_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MainBlock1Context : ParserRuleContext {
		public Pr_SymbolContext _pr_Symbol;
		public IList<Pr_SymbolContext> _E_declarations = new List<Pr_SymbolContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SymbolContext[] pr_Symbol() {
			return GetRuleContexts<Pr_SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SymbolContext pr_Symbol(int i) {
			return GetRuleContext<Pr_SymbolContext>(i);
		}
		public Pr_MainBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MainBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MainBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainBlock1Context pr_MainBlock1() {
		Pr_MainBlock1Context _localctx = new Pr_MainBlock1Context(Context, State);
		EnterRule(_localctx, 30, RULE_pr_MainBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KAbstract || _la==LR_KSymbol) {
				{
				{
				State = 156;
				_localctx._pr_Symbol = pr_Symbol();
				_localctx._E_declarations.Add(_localctx._pr_Symbol);
				}
				}
				State = 161;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SymbolBlock1Context : ParserRuleContext {
		public IToken E_TColon;
		public Pr_QualifierContext E_baseTypes;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(SymbolParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_SymbolBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SymbolBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SymbolBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SymbolBlock1Context pr_SymbolBlock1() {
		Pr_SymbolBlock1Context _localctx = new Pr_SymbolBlock1Context(Context, State);
		EnterRule(_localctx, 32, RULE_pr_SymbolBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			_localctx.E_TColon = Match(LR_TColon);
			State = 163;
			_localctx.E_baseTypes = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SymbolBlock2Context : ParserRuleContext {
		public IToken E_TLBrace;
		public Pr_SymbolBlock2Block1Context _pr_SymbolBlock2Block1;
		public IList<Pr_SymbolBlock2Block1Context> _E_Block = new List<Pr_SymbolBlock2Block1Context>();
		public IToken E_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(SymbolParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(SymbolParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SymbolBlock2Block1Context[] pr_SymbolBlock2Block1() {
			return GetRuleContexts<Pr_SymbolBlock2Block1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_SymbolBlock2Block1Context pr_SymbolBlock2Block1(int i) {
			return GetRuleContext<Pr_SymbolBlock2Block1Context>(i);
		}
		public Pr_SymbolBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SymbolBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SymbolBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SymbolBlock2Context pr_SymbolBlock2() {
		Pr_SymbolBlock2Context _localctx = new Pr_SymbolBlock2Context(Context, State);
		EnterRule(_localctx, 34, RULE_pr_SymbolBlock2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			_localctx.E_TLBrace = Match(LR_TLBrace);
			State = 169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 105675522827776L) != 0)) {
				{
				{
				State = 166;
				_localctx._pr_SymbolBlock2Block1 = pr_SymbolBlock2Block1();
				_localctx._E_Block.Add(_localctx._pr_SymbolBlock2Block1);
				}
				}
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 172;
			_localctx.E_TRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_SymbolBlock2Block1Context : ParserRuleContext {
		public Pr_SymbolBlock2Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_SymbolBlock2Block1; } }
	 
		public Pr_SymbolBlock2Block1Context() { }
		public virtual void CopyFrom(Pr_SymbolBlock2Block1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_SymbolBlock2Block1Alt2Context : Pr_SymbolBlock2Block1Context {
		public Pr_OperationContext E_operations;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_OperationContext pr_Operation() {
			return GetRuleContext<Pr_OperationContext>(0);
		}
		public Pr_SymbolBlock2Block1Alt2Context(Pr_SymbolBlock2Block1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SymbolBlock2Block1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SymbolBlock2Block1Alt1Context : Pr_SymbolBlock2Block1Context {
		public Pr_PropertyContext E_properties;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyContext pr_Property() {
			return GetRuleContext<Pr_PropertyContext>(0);
		}
		public Pr_SymbolBlock2Block1Alt1Context(Pr_SymbolBlock2Block1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SymbolBlock2Block1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_SymbolBlock2Block1Context pr_SymbolBlock2Block1() {
		Pr_SymbolBlock2Block1Context _localctx = new Pr_SymbolBlock2Block1Context(Context, State);
		EnterRule(_localctx, 36, RULE_pr_SymbolBlock2Block1);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new Pr_SymbolBlock2Block1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 174;
				((Pr_SymbolBlock2Block1Alt1Context)_localctx).E_properties = pr_Property();
				}
				break;
			case 2:
				_localctx = new Pr_SymbolBlock2Block1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				((Pr_SymbolBlock2Block1Alt2Context)_localctx).E_operations = pr_Operation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyBlock1Context : ParserRuleContext {
		public Pr_PropertyBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyBlock1; } }
	 
		public Pr_PropertyBlock1Context() { }
		public virtual void CopyFrom(Pr_PropertyBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_PropertyBlock1Alt3Context : Pr_PropertyBlock1Context {
		public IToken E_isWeak1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KWeak() { return GetToken(SymbolParser.LR_KWeak, 0); }
		public Pr_PropertyBlock1Alt3Context(Pr_PropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyBlock1Alt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PropertyBlock1Alt1Context : Pr_PropertyBlock1Context {
		public IToken E_isPlain;
		public Pr_PropertyBlock1Alt1Block1Context E_Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KPlain() { return GetToken(SymbolParser.LR_KPlain, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyBlock1Alt1Block1Context pr_PropertyBlock1Alt1Block1() {
			return GetRuleContext<Pr_PropertyBlock1Alt1Block1Context>(0);
		}
		public Pr_PropertyBlock1Alt1Context(Pr_PropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PropertyBlock1Alt2Context : Pr_PropertyBlock1Context {
		public IToken E_isDerived;
		public IToken E_isCached;
		public IToken E_isWeak;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDerived() { return GetToken(SymbolParser.LR_KDerived, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KCached() { return GetToken(SymbolParser.LR_KCached, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KWeak() { return GetToken(SymbolParser.LR_KWeak, 0); }
		public Pr_PropertyBlock1Alt2Context(Pr_PropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyBlock1Context pr_PropertyBlock1() {
		Pr_PropertyBlock1Context _localctx = new Pr_PropertyBlock1Context(Context, State);
		EnterRule(_localctx, 38, RULE_pr_PropertyBlock1);
		int _la;
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KPlain:
				_localctx = new Pr_PropertyBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 178;
				((Pr_PropertyBlock1Alt1Context)_localctx).E_isPlain = Match(LR_KPlain);
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KAbstract || _la==LR_KWeak) {
					{
					State = 179;
					((Pr_PropertyBlock1Alt1Context)_localctx).E_Block = pr_PropertyBlock1Alt1Block1();
					}
				}

				}
				break;
			case LR_KDerived:
				_localctx = new Pr_PropertyBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 182;
				((Pr_PropertyBlock1Alt2Context)_localctx).E_isDerived = Match(LR_KDerived);
				State = 184;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KCached) {
					{
					State = 183;
					((Pr_PropertyBlock1Alt2Context)_localctx).E_isCached = Match(LR_KCached);
					}
				}

				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KWeak) {
					{
					State = 186;
					((Pr_PropertyBlock1Alt2Context)_localctx).E_isWeak = Match(LR_KWeak);
					}
				}

				}
				break;
			case LR_KWeak:
				_localctx = new Pr_PropertyBlock1Alt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 189;
				((Pr_PropertyBlock1Alt3Context)_localctx).E_isWeak1 = Match(LR_KWeak);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyBlock1Alt1Block1Context : ParserRuleContext {
		public Pr_PropertyBlock1Alt1Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyBlock1Alt1Block1; } }
	 
		public Pr_PropertyBlock1Alt1Block1Context() { }
		public virtual void CopyFrom(Pr_PropertyBlock1Alt1Block1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_PropertyBlock1Alt1Block1Alt2Context : Pr_PropertyBlock1Alt1Block1Context {
		public IToken E_isWeak;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KWeak() { return GetToken(SymbolParser.LR_KWeak, 0); }
		public Pr_PropertyBlock1Alt1Block1Alt2Context(Pr_PropertyBlock1Alt1Block1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyBlock1Alt1Block1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PropertyBlock1Alt1Block1Alt1Context : Pr_PropertyBlock1Alt1Block1Context {
		public IToken E_isAbstract;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAbstract() { return GetToken(SymbolParser.LR_KAbstract, 0); }
		public Pr_PropertyBlock1Alt1Block1Alt1Context(Pr_PropertyBlock1Alt1Block1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyBlock1Alt1Block1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyBlock1Alt1Block1Context pr_PropertyBlock1Alt1Block1() {
		Pr_PropertyBlock1Alt1Block1Context _localctx = new Pr_PropertyBlock1Alt1Block1Context(Context, State);
		EnterRule(_localctx, 40, RULE_pr_PropertyBlock1Alt1Block1);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KAbstract:
				_localctx = new Pr_PropertyBlock1Alt1Block1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				((Pr_PropertyBlock1Alt1Block1Alt1Context)_localctx).E_isAbstract = Match(LR_KAbstract);
				}
				break;
			case LR_KWeak:
				_localctx = new Pr_PropertyBlock1Alt1Block1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				((Pr_PropertyBlock1Alt1Block1Alt2Context)_localctx).E_isWeak = Match(LR_KWeak);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyBlock2Context : ParserRuleContext {
		public IToken E_TEq;
		public Pr_ValueContext E_defaultValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEq() { return GetToken(SymbolParser.LR_TEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ValueContext pr_Value() {
			return GetRuleContext<Pr_ValueContext>(0);
		}
		public Pr_PropertyBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyBlock2Context pr_PropertyBlock2() {
		Pr_PropertyBlock2Context _localctx = new Pr_PropertyBlock2Context(Context, State);
		EnterRule(_localctx, 42, RULE_pr_PropertyBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			_localctx.E_TEq = Match(LR_TEq);
			State = 197;
			_localctx.E_defaultValue = pr_Value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyBlock3Context : ParserRuleContext {
		public IToken E_KPhase;
		public Pr_IdentifierContext E_phase;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KPhase() { return GetToken(SymbolParser.LR_KPhase, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_PropertyBlock3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyBlock3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyBlock3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyBlock3Context pr_PropertyBlock3() {
		Pr_PropertyBlock3Context _localctx = new Pr_PropertyBlock3Context(Context, State);
		EnterRule(_localctx, 44, RULE_pr_PropertyBlock3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_localctx.E_KPhase = Match(LR_KPhase);
			State = 200;
			_localctx.E_phase = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_OperationAlt2Block1Context : ParserRuleContext {
		public Pr_ParameterContext E_parameters1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_ParameterContext _pr_Parameter;
		public IList<Pr_ParameterContext> _E_parameters2 = new List<Pr_ParameterContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterContext[] pr_Parameter() {
			return GetRuleContexts<Pr_ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterContext pr_Parameter(int i) {
			return GetRuleContext<Pr_ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(SymbolParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(SymbolParser.LR_TComma, i);
		}
		public Pr_OperationAlt2Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_OperationAlt2Block1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OperationAlt2Block1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_OperationAlt2Block1Context pr_OperationAlt2Block1() {
		Pr_OperationAlt2Block1Context _localctx = new Pr_OperationAlt2Block1Context(Context, State);
		EnterRule(_localctx, 46, RULE_pr_OperationAlt2Block1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_localctx.E_parameters1 = pr_Parameter();
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 203;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._E_TComma1.Add(_localctx._LR_TComma);
				State = 204;
				_localctx._pr_Parameter = pr_Parameter();
				_localctx._E_parameters2.Add(_localctx._pr_Parameter);
				}
				}
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_OperationAlt2Block1parametersBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_ParameterContext E_parameters2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(SymbolParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterContext pr_Parameter() {
			return GetRuleContext<Pr_ParameterContext>(0);
		}
		public Pr_OperationAlt2Block1parametersBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_OperationAlt2Block1parametersBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OperationAlt2Block1parametersBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_OperationAlt2Block1parametersBlockContext pr_OperationAlt2Block1parametersBlock() {
		Pr_OperationAlt2Block1parametersBlockContext _localctx = new Pr_OperationAlt2Block1parametersBlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_pr_OperationAlt2Block1parametersBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 211;
			_localctx.E_parameters2 = pr_Parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_OperationAlt2Block2Context : ParserRuleContext {
		public IToken E_KIf;
		public IToken E_cacheCondition;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KIf() { return GetToken(SymbolParser.LR_KIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(SymbolParser.LR_TString, 0); }
		public Pr_OperationAlt2Block2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_OperationAlt2Block2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_OperationAlt2Block2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_OperationAlt2Block2Context pr_OperationAlt2Block2() {
		Pr_OperationAlt2Block2Context _localctx = new Pr_OperationAlt2Block2Context(Context, State);
		EnterRule(_localctx, 50, RULE_pr_OperationAlt2Block2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_localctx.E_KIf = Match(LR_KIf);
			State = 214;
			_localctx.E_cacheCondition = Match(LR_TString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TypeReferenceBlock1Context : ParserRuleContext {
		public IToken E_isNullable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(SymbolParser.LR_TQuestion, 0); }
		public Pr_TypeReferenceBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TypeReferenceBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReferenceBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TypeReferenceBlock1Context pr_TypeReferenceBlock1() {
		Pr_TypeReferenceBlock1Context _localctx = new Pr_TypeReferenceBlock1Context(Context, State);
		EnterRule(_localctx, 52, RULE_pr_TypeReferenceBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_localctx.E_isNullable = Match(LR_TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ArrayDimensionsBlock1Context : ParserRuleContext {
		public IToken E_TLBracket;
		public IToken E_TRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(SymbolParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(SymbolParser.LR_TRBracket, 0); }
		public Pr_ArrayDimensionsBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ArrayDimensionsBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ArrayDimensionsBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ArrayDimensionsBlock1Context pr_ArrayDimensionsBlock1() {
		Pr_ArrayDimensionsBlock1Context _localctx = new Pr_ArrayDimensionsBlock1Context(Context, State);
		EnterRule(_localctx, 54, RULE_pr_ArrayDimensionsBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_localctx.E_TLBracket = Match(LR_TLBracket);
			State = 219;
			_localctx.E_TRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierIdentifierBlockContext : ParserRuleContext {
		public IToken E_TDot1;
		public Pr_IdentifierContext E_Identifier2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(SymbolParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierIdentifierBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierIdentifierBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISymbolParserVisitor<TResult> typedVisitor = visitor as ISymbolParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierIdentifierBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierIdentifierBlockContext pr_QualifierIdentifierBlock() {
		Pr_QualifierIdentifierBlockContext _localctx = new Pr_QualifierIdentifierBlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_pr_QualifierIdentifierBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			_localctx.E_TDot1 = Match(LR_TDot);
			State = 222;
			_localctx.E_Identifier2 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,52,225,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		1,0,1,0,1,0,5,0,62,8,0,10,0,12,0,65,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,3,
		2,74,8,2,1,2,1,2,1,2,3,2,79,8,2,1,2,1,2,1,3,3,3,84,8,3,1,3,1,3,1,3,3,3,
		89,8,3,1,3,3,3,92,8,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,100,8,4,1,4,1,4,1,4,
		1,4,3,4,106,8,4,1,4,1,4,3,4,110,8,4,3,4,112,8,4,1,5,1,5,1,5,1,6,1,6,3,
		6,119,8,6,1,6,1,6,1,7,5,7,124,8,7,10,7,12,7,127,9,7,1,8,1,8,3,8,131,8,
		8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,3,10,141,8,10,1,11,1,11,1,12,1,
		12,1,12,5,12,148,8,12,10,12,12,12,151,9,12,1,13,1,13,1,14,1,14,1,15,5,
		15,158,8,15,10,15,12,15,161,9,15,1,16,1,16,1,16,1,17,1,17,5,17,168,8,17,
		10,17,12,17,171,9,17,1,17,1,17,1,18,1,18,3,18,177,8,18,1,19,1,19,3,19,
		181,8,19,1,19,1,19,3,19,185,8,19,1,19,3,19,188,8,19,1,19,3,19,191,8,19,
		1,20,1,20,3,20,195,8,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,5,
		23,206,8,23,10,23,12,23,209,9,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,
		26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,0,0,29,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,0,3,2,0,9,9,14,
		30,1,0,45,46,1,0,2,3,224,0,58,1,0,0,0,2,69,1,0,0,0,4,73,1,0,0,0,6,83,1,
		0,0,0,8,111,1,0,0,0,10,113,1,0,0,0,12,116,1,0,0,0,14,125,1,0,0,0,16,130,
		1,0,0,0,18,132,1,0,0,0,20,140,1,0,0,0,22,142,1,0,0,0,24,144,1,0,0,0,26,
		152,1,0,0,0,28,154,1,0,0,0,30,159,1,0,0,0,32,162,1,0,0,0,34,165,1,0,0,
		0,36,176,1,0,0,0,38,190,1,0,0,0,40,194,1,0,0,0,42,196,1,0,0,0,44,199,1,
		0,0,0,46,202,1,0,0,0,48,210,1,0,0,0,50,213,1,0,0,0,52,216,1,0,0,0,54,218,
		1,0,0,0,56,221,1,0,0,0,58,59,5,6,0,0,59,63,3,24,12,0,60,62,3,2,1,0,61,
		60,1,0,0,0,62,65,1,0,0,0,63,61,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,
		63,1,0,0,0,66,67,3,30,15,0,67,68,5,0,0,1,68,1,1,0,0,0,69,70,5,7,0,0,70,
		71,3,24,12,0,71,3,1,0,0,0,72,74,5,8,0,0,73,72,1,0,0,0,73,74,1,0,0,0,74,
		75,1,0,0,0,75,76,5,9,0,0,76,78,3,22,11,0,77,79,3,32,16,0,78,77,1,0,0,0,
		78,79,1,0,0,0,79,80,1,0,0,0,80,81,3,34,17,0,81,5,1,0,0,0,82,84,3,38,19,
		0,83,82,1,0,0,0,83,84,1,0,0,0,84,85,1,0,0,0,85,86,3,12,6,0,86,88,3,22,
		11,0,87,89,3,42,21,0,88,87,1,0,0,0,88,89,1,0,0,0,89,91,1,0,0,0,90,92,3,
		44,22,0,91,90,1,0,0,0,91,92,1,0,0,0,92,7,1,0,0,0,93,94,5,10,0,0,94,95,
		3,22,11,0,95,96,5,11,0,0,96,97,5,12,0,0,97,112,1,0,0,0,98,100,5,13,0,0,
		99,98,1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,3,12,6,0,102,103,
		3,22,11,0,103,105,5,11,0,0,104,106,3,46,23,0,105,104,1,0,0,0,105,106,1,
		0,0,0,106,107,1,0,0,0,107,109,5,12,0,0,108,110,3,50,25,0,109,108,1,0,0,
		0,109,110,1,0,0,0,110,112,1,0,0,0,111,93,1,0,0,0,111,99,1,0,0,0,112,9,
		1,0,0,0,113,114,3,12,6,0,114,115,3,22,11,0,115,11,1,0,0,0,116,118,3,16,
		8,0,117,119,3,52,26,0,118,117,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,
		120,121,3,14,7,0,121,13,1,0,0,0,122,124,3,54,27,0,123,122,1,0,0,0,124,
		127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,15,1,0,0,0,127,125,1,0,
		0,0,128,131,3,18,9,0,129,131,3,24,12,0,130,128,1,0,0,0,130,129,1,0,0,0,
		131,17,1,0,0,0,132,133,7,0,0,0,133,19,1,0,0,0,134,141,5,47,0,0,135,141,
		5,43,0,0,136,141,5,44,0,0,137,141,3,28,14,0,138,141,5,1,0,0,139,141,3,
		24,12,0,140,134,1,0,0,0,140,135,1,0,0,0,140,136,1,0,0,0,140,137,1,0,0,
		0,140,138,1,0,0,0,140,139,1,0,0,0,141,21,1,0,0,0,142,143,3,26,13,0,143,
		23,1,0,0,0,144,149,3,26,13,0,145,146,5,42,0,0,146,148,3,26,13,0,147,145,
		1,0,0,0,148,151,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,25,1,0,0,0,
		151,149,1,0,0,0,152,153,7,1,0,0,153,27,1,0,0,0,154,155,7,2,0,0,155,29,
		1,0,0,0,156,158,3,4,2,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,
		0,159,160,1,0,0,0,160,31,1,0,0,0,161,159,1,0,0,0,162,163,5,31,0,0,163,
		164,3,24,12,0,164,33,1,0,0,0,165,169,5,32,0,0,166,168,3,36,18,0,167,166,
		1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,
		0,171,169,1,0,0,0,172,173,5,33,0,0,173,35,1,0,0,0,174,177,3,6,3,0,175,
		177,3,8,4,0,176,174,1,0,0,0,176,175,1,0,0,0,177,37,1,0,0,0,178,180,5,34,
		0,0,179,181,3,40,20,0,180,179,1,0,0,0,180,181,1,0,0,0,181,191,1,0,0,0,
		182,184,5,35,0,0,183,185,5,13,0,0,184,183,1,0,0,0,184,185,1,0,0,0,185,
		187,1,0,0,0,186,188,5,36,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,191,1,
		0,0,0,189,191,5,36,0,0,190,178,1,0,0,0,190,182,1,0,0,0,190,189,1,0,0,0,
		191,39,1,0,0,0,192,195,5,8,0,0,193,195,5,36,0,0,194,192,1,0,0,0,194,193,
		1,0,0,0,195,41,1,0,0,0,196,197,5,37,0,0,197,198,3,20,10,0,198,43,1,0,0,
		0,199,200,5,10,0,0,200,201,3,26,13,0,201,45,1,0,0,0,202,207,3,10,5,0,203,
		204,5,4,0,0,204,206,3,10,5,0,205,203,1,0,0,0,206,209,1,0,0,0,207,205,1,
		0,0,0,207,208,1,0,0,0,208,47,1,0,0,0,209,207,1,0,0,0,210,211,5,4,0,0,211,
		212,3,10,5,0,212,49,1,0,0,0,213,214,5,38,0,0,214,215,5,47,0,0,215,51,1,
		0,0,0,216,217,5,39,0,0,217,53,1,0,0,0,218,219,5,40,0,0,219,220,5,41,0,
		0,220,55,1,0,0,0,221,222,5,42,0,0,222,223,3,26,13,0,223,57,1,0,0,0,24,
		63,73,78,83,88,91,99,105,109,111,118,125,130,140,149,159,169,176,180,184,
		187,190,194,207
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaSymbols.Compiler
