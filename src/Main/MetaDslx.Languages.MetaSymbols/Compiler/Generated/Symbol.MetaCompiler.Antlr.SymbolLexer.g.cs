//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SymbolLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaSymbols.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SymbolLexer : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_KNull=1, LR_KTrue=2, LR_KFalse=3, LR_TComma=4, LR_TUtf8Bom=5, LR_KNamespace=6, 
		LR_KUsing=7, LR_KAbstract=8, LR_KSymbol=9, LR_TLParen=10, LR_TRParen=11, 
		LR_KObject=12, LR_KBool=13, LR_KChar=14, LR_KString=15, LR_KByte=16, LR_KSbyte=17, 
		LR_KShort=18, LR_KUshort=19, LR_KInt=20, LR_KUint=21, LR_KLong=22, LR_KUlong=23, 
		LR_KFloat=24, LR_KDouble=25, LR_KDecimal=26, LR_KType=27, LR_KVoid=28, 
		LR_TColon=29, LR_TLBrace=30, LR_TRBrace=31, LR_KWeak=32, LR_KDerived=33, 
		LR_TEq=34, LR_KPhase=35, LR_TQuestion=36, LR_TLBracket=37, LR_TRBracket=38, 
		LR_TDot=39, LR_TInteger=40, LR_TDecimal=41, LR_TIdentifier=42, LR_TVerbatimIdentifier=43, 
		LR_TString=44, LR_TWhitespace=45, LR_TLineEnd=46, LR_TSingleLineComment=47, 
		LR_TMultiLineComment=48, LR_TInvalidToken=49;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", "LR_KNamespace", 
		"LR_KUsing", "LR_KAbstract", "LR_KSymbol", "LR_TLParen", "LR_TRParen", 
		"LR_KObject", "LR_KBool", "LR_KChar", "LR_KString", "LR_KByte", "LR_KSbyte", 
		"LR_KShort", "LR_KUshort", "LR_KInt", "LR_KUint", "LR_KLong", "LR_KUlong", 
		"LR_KFloat", "LR_KDouble", "LR_KDecimal", "LR_KType", "LR_KVoid", "LR_TColon", 
		"LR_TLBrace", "LR_TRBrace", "LR_KWeak", "LR_KDerived", "LR_TEq", "LR_KPhase", 
		"LR_TQuestion", "LR_TLBracket", "LR_TRBracket", "LR_TDot", "LR_TInteger", 
		"LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", "LR_TString", 
		"LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", 
		"LR_TInvalidToken", "FR_DoubleQuoteTextCharacter", "FR_DoubleQuoteTextSimple", 
		"FR_SingleQuoteTextCharacter", "FR_SingleQuoteTextSimple", "FR_CharacterEscapeSimple", 
		"FR_CharacterEscapeSimpleCharacter", "FR_CharacterEscapeUnicode", "FR_HexDigit"
	};


	public SymbolLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SymbolLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'true'", "'false'", "','", null, "'namespace'", "'using'", 
		"'abstract'", "'symbol'", "'('", "')'", "'object'", "'bool'", "'char'", 
		"'string'", "'byte'", "'sbyte'", "'short'", "'ushort'", "'int'", "'uint'", 
		"'long'", "'ulong'", "'float'", "'double'", "'decimal'", "'type'", "'void'", 
		"':'", "'{'", "'}'", "'weak'", "'derived'", "'='", "'phase'", "'?'", "'['", 
		"']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", 
		"LR_KNamespace", "LR_KUsing", "LR_KAbstract", "LR_KSymbol", "LR_TLParen", 
		"LR_TRParen", "LR_KObject", "LR_KBool", "LR_KChar", "LR_KString", "LR_KByte", 
		"LR_KSbyte", "LR_KShort", "LR_KUshort", "LR_KInt", "LR_KUint", "LR_KLong", 
		"LR_KUlong", "LR_KFloat", "LR_KDouble", "LR_KDecimal", "LR_KType", "LR_KVoid", 
		"LR_TColon", "LR_TLBrace", "LR_TRBrace", "LR_KWeak", "LR_KDerived", "LR_TEq", 
		"LR_KPhase", "LR_TQuestion", "LR_TLBracket", "LR_TRBracket", "LR_TDot", 
		"LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SymbolLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SymbolLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,49,462,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
		3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
		8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
		1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,
		1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,
		1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
		1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,
		1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
		1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
		1,38,1,39,1,39,1,39,5,39,313,8,39,10,39,12,39,316,9,39,3,39,318,8,39,1,
		40,1,40,1,40,5,40,323,8,40,10,40,12,40,326,9,40,3,40,328,8,40,1,40,1,40,
		4,40,332,8,40,11,40,12,40,333,1,41,4,41,337,8,41,11,41,12,41,338,1,41,
		5,41,342,8,41,10,41,12,41,345,9,41,1,42,1,42,4,42,349,8,42,11,42,12,42,
		350,1,42,5,42,354,8,42,10,42,12,42,357,9,42,1,43,1,43,5,43,361,8,43,10,
		43,12,43,364,9,43,1,43,1,43,1,43,5,43,369,8,43,10,43,12,43,372,9,43,1,
		43,3,43,375,8,43,1,44,4,44,378,8,44,11,44,12,44,379,1,44,1,44,1,45,1,45,
		1,45,3,45,387,8,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,395,8,46,10,46,12,
		46,398,9,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,406,8,47,10,47,12,47,409,
		9,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,3,49,
		423,8,49,1,50,1,50,1,51,1,51,1,51,3,51,430,8,51,1,52,1,52,1,53,1,53,1,
		53,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
		55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,459,8,55,1,56,1,56,1,407,
		0,57,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
		38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
		0,101,0,103,0,105,0,107,0,109,0,111,0,113,0,1,0,8,3,0,65,90,95,95,97,122,
		4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,6,0,10,10,13,
		13,34,34,92,92,133,133,8232,8233,6,0,10,10,13,13,39,39,92,92,133,133,8232,
		8233,10,0,34,34,39,39,48,48,92,92,97,98,102,102,110,110,114,114,116,116,
		118,118,3,0,48,57,65,70,97,102,474,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
		0,0,95,1,0,0,0,0,97,1,0,0,0,1,115,1,0,0,0,3,120,1,0,0,0,5,125,1,0,0,0,
		7,131,1,0,0,0,9,133,1,0,0,0,11,139,1,0,0,0,13,149,1,0,0,0,15,155,1,0,0,
		0,17,164,1,0,0,0,19,171,1,0,0,0,21,173,1,0,0,0,23,175,1,0,0,0,25,182,1,
		0,0,0,27,187,1,0,0,0,29,192,1,0,0,0,31,199,1,0,0,0,33,204,1,0,0,0,35,210,
		1,0,0,0,37,216,1,0,0,0,39,223,1,0,0,0,41,227,1,0,0,0,43,232,1,0,0,0,45,
		237,1,0,0,0,47,243,1,0,0,0,49,249,1,0,0,0,51,256,1,0,0,0,53,264,1,0,0,
		0,55,269,1,0,0,0,57,274,1,0,0,0,59,276,1,0,0,0,61,278,1,0,0,0,63,280,1,
		0,0,0,65,285,1,0,0,0,67,293,1,0,0,0,69,295,1,0,0,0,71,301,1,0,0,0,73,303,
		1,0,0,0,75,305,1,0,0,0,77,307,1,0,0,0,79,317,1,0,0,0,81,327,1,0,0,0,83,
		336,1,0,0,0,85,346,1,0,0,0,87,374,1,0,0,0,89,377,1,0,0,0,91,386,1,0,0,
		0,93,390,1,0,0,0,95,401,1,0,0,0,97,415,1,0,0,0,99,422,1,0,0,0,101,424,
		1,0,0,0,103,429,1,0,0,0,105,431,1,0,0,0,107,433,1,0,0,0,109,436,1,0,0,
		0,111,458,1,0,0,0,113,460,1,0,0,0,115,116,5,110,0,0,116,117,5,117,0,0,
		117,118,5,108,0,0,118,119,5,108,0,0,119,2,1,0,0,0,120,121,5,116,0,0,121,
		122,5,114,0,0,122,123,5,117,0,0,123,124,5,101,0,0,124,4,1,0,0,0,125,126,
		5,102,0,0,126,127,5,97,0,0,127,128,5,108,0,0,128,129,5,115,0,0,129,130,
		5,101,0,0,130,6,1,0,0,0,131,132,5,44,0,0,132,8,1,0,0,0,133,134,5,239,0,
		0,134,135,5,187,0,0,135,136,5,191,0,0,136,137,1,0,0,0,137,138,6,4,0,0,
		138,10,1,0,0,0,139,140,5,110,0,0,140,141,5,97,0,0,141,142,5,109,0,0,142,
		143,5,101,0,0,143,144,5,115,0,0,144,145,5,112,0,0,145,146,5,97,0,0,146,
		147,5,99,0,0,147,148,5,101,0,0,148,12,1,0,0,0,149,150,5,117,0,0,150,151,
		5,115,0,0,151,152,5,105,0,0,152,153,5,110,0,0,153,154,5,103,0,0,154,14,
		1,0,0,0,155,156,5,97,0,0,156,157,5,98,0,0,157,158,5,115,0,0,158,159,5,
		116,0,0,159,160,5,114,0,0,160,161,5,97,0,0,161,162,5,99,0,0,162,163,5,
		116,0,0,163,16,1,0,0,0,164,165,5,115,0,0,165,166,5,121,0,0,166,167,5,109,
		0,0,167,168,5,98,0,0,168,169,5,111,0,0,169,170,5,108,0,0,170,18,1,0,0,
		0,171,172,5,40,0,0,172,20,1,0,0,0,173,174,5,41,0,0,174,22,1,0,0,0,175,
		176,5,111,0,0,176,177,5,98,0,0,177,178,5,106,0,0,178,179,5,101,0,0,179,
		180,5,99,0,0,180,181,5,116,0,0,181,24,1,0,0,0,182,183,5,98,0,0,183,184,
		5,111,0,0,184,185,5,111,0,0,185,186,5,108,0,0,186,26,1,0,0,0,187,188,5,
		99,0,0,188,189,5,104,0,0,189,190,5,97,0,0,190,191,5,114,0,0,191,28,1,0,
		0,0,192,193,5,115,0,0,193,194,5,116,0,0,194,195,5,114,0,0,195,196,5,105,
		0,0,196,197,5,110,0,0,197,198,5,103,0,0,198,30,1,0,0,0,199,200,5,98,0,
		0,200,201,5,121,0,0,201,202,5,116,0,0,202,203,5,101,0,0,203,32,1,0,0,0,
		204,205,5,115,0,0,205,206,5,98,0,0,206,207,5,121,0,0,207,208,5,116,0,0,
		208,209,5,101,0,0,209,34,1,0,0,0,210,211,5,115,0,0,211,212,5,104,0,0,212,
		213,5,111,0,0,213,214,5,114,0,0,214,215,5,116,0,0,215,36,1,0,0,0,216,217,
		5,117,0,0,217,218,5,115,0,0,218,219,5,104,0,0,219,220,5,111,0,0,220,221,
		5,114,0,0,221,222,5,116,0,0,222,38,1,0,0,0,223,224,5,105,0,0,224,225,5,
		110,0,0,225,226,5,116,0,0,226,40,1,0,0,0,227,228,5,117,0,0,228,229,5,105,
		0,0,229,230,5,110,0,0,230,231,5,116,0,0,231,42,1,0,0,0,232,233,5,108,0,
		0,233,234,5,111,0,0,234,235,5,110,0,0,235,236,5,103,0,0,236,44,1,0,0,0,
		237,238,5,117,0,0,238,239,5,108,0,0,239,240,5,111,0,0,240,241,5,110,0,
		0,241,242,5,103,0,0,242,46,1,0,0,0,243,244,5,102,0,0,244,245,5,108,0,0,
		245,246,5,111,0,0,246,247,5,97,0,0,247,248,5,116,0,0,248,48,1,0,0,0,249,
		250,5,100,0,0,250,251,5,111,0,0,251,252,5,117,0,0,252,253,5,98,0,0,253,
		254,5,108,0,0,254,255,5,101,0,0,255,50,1,0,0,0,256,257,5,100,0,0,257,258,
		5,101,0,0,258,259,5,99,0,0,259,260,5,105,0,0,260,261,5,109,0,0,261,262,
		5,97,0,0,262,263,5,108,0,0,263,52,1,0,0,0,264,265,5,116,0,0,265,266,5,
		121,0,0,266,267,5,112,0,0,267,268,5,101,0,0,268,54,1,0,0,0,269,270,5,118,
		0,0,270,271,5,111,0,0,271,272,5,105,0,0,272,273,5,100,0,0,273,56,1,0,0,
		0,274,275,5,58,0,0,275,58,1,0,0,0,276,277,5,123,0,0,277,60,1,0,0,0,278,
		279,5,125,0,0,279,62,1,0,0,0,280,281,5,119,0,0,281,282,5,101,0,0,282,283,
		5,97,0,0,283,284,5,107,0,0,284,64,1,0,0,0,285,286,5,100,0,0,286,287,5,
		101,0,0,287,288,5,114,0,0,288,289,5,105,0,0,289,290,5,118,0,0,290,291,
		5,101,0,0,291,292,5,100,0,0,292,66,1,0,0,0,293,294,5,61,0,0,294,68,1,0,
		0,0,295,296,5,112,0,0,296,297,5,104,0,0,297,298,5,97,0,0,298,299,5,115,
		0,0,299,300,5,101,0,0,300,70,1,0,0,0,301,302,5,63,0,0,302,72,1,0,0,0,303,
		304,5,91,0,0,304,74,1,0,0,0,305,306,5,93,0,0,306,76,1,0,0,0,307,308,5,
		46,0,0,308,78,1,0,0,0,309,318,5,48,0,0,310,314,2,49,57,0,311,313,2,48,
		57,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,
		318,1,0,0,0,316,314,1,0,0,0,317,309,1,0,0,0,317,310,1,0,0,0,318,80,1,0,
		0,0,319,328,5,48,0,0,320,324,2,49,57,0,321,323,2,48,57,0,322,321,1,0,0,
		0,323,326,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,328,1,0,0,0,326,
		324,1,0,0,0,327,319,1,0,0,0,327,320,1,0,0,0,328,329,1,0,0,0,329,331,5,
		46,0,0,330,332,2,48,57,0,331,330,1,0,0,0,332,333,1,0,0,0,333,331,1,0,0,
		0,333,334,1,0,0,0,334,82,1,0,0,0,335,337,7,0,0,0,336,335,1,0,0,0,337,338,
		1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,343,1,0,0,0,340,342,7,1,0,
		0,341,340,1,0,0,0,342,345,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,
		84,1,0,0,0,345,343,1,0,0,0,346,348,5,64,0,0,347,349,7,0,0,0,348,347,1,
		0,0,0,349,350,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,0,351,355,1,0,0,0,
		352,354,7,1,0,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,
		1,0,0,0,356,86,1,0,0,0,357,355,1,0,0,0,358,362,5,34,0,0,359,361,3,99,49,
		0,360,359,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,
		365,1,0,0,0,364,362,1,0,0,0,365,375,5,34,0,0,366,370,5,39,0,0,367,369,
		3,103,51,0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,
		0,0,371,373,1,0,0,0,372,370,1,0,0,0,373,375,5,39,0,0,374,358,1,0,0,0,374,
		366,1,0,0,0,375,88,1,0,0,0,376,378,7,2,0,0,377,376,1,0,0,0,378,379,1,0,
		0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,381,1,0,0,0,381,382,6,44,0,0,382,
		90,1,0,0,0,383,384,5,13,0,0,384,387,5,10,0,0,385,387,7,3,0,0,386,383,1,
		0,0,0,386,385,1,0,0,0,387,388,1,0,0,0,388,389,6,45,0,0,389,92,1,0,0,0,
		390,391,5,47,0,0,391,392,5,47,0,0,392,396,1,0,0,0,393,395,8,3,0,0,394,
		393,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,399,1,
		0,0,0,398,396,1,0,0,0,399,400,6,46,0,0,400,94,1,0,0,0,401,402,5,47,0,0,
		402,403,5,42,0,0,403,407,1,0,0,0,404,406,9,0,0,0,405,404,1,0,0,0,406,409,
		1,0,0,0,407,408,1,0,0,0,407,405,1,0,0,0,408,410,1,0,0,0,409,407,1,0,0,
		0,410,411,5,42,0,0,411,412,5,47,0,0,412,413,1,0,0,0,413,414,6,47,0,0,414,
		96,1,0,0,0,415,416,9,0,0,0,416,417,1,0,0,0,417,418,6,48,0,0,418,98,1,0,
		0,0,419,423,3,101,50,0,420,423,3,107,53,0,421,423,3,111,55,0,422,419,1,
		0,0,0,422,420,1,0,0,0,422,421,1,0,0,0,423,100,1,0,0,0,424,425,8,4,0,0,
		425,102,1,0,0,0,426,430,3,105,52,0,427,430,3,107,53,0,428,430,3,111,55,
		0,429,426,1,0,0,0,429,427,1,0,0,0,429,428,1,0,0,0,430,104,1,0,0,0,431,
		432,8,5,0,0,432,106,1,0,0,0,433,434,5,92,0,0,434,435,3,109,54,0,435,108,
		1,0,0,0,436,437,7,6,0,0,437,110,1,0,0,0,438,439,5,92,0,0,439,440,5,117,
		0,0,440,441,1,0,0,0,441,442,3,113,56,0,442,443,3,113,56,0,443,444,3,113,
		56,0,444,445,3,113,56,0,445,459,1,0,0,0,446,447,5,92,0,0,447,448,5,85,
		0,0,448,449,1,0,0,0,449,450,3,113,56,0,450,451,3,113,56,0,451,452,3,113,
		56,0,452,453,3,113,56,0,453,454,3,113,56,0,454,455,3,113,56,0,455,456,
		3,113,56,0,456,457,3,113,56,0,457,459,1,0,0,0,458,438,1,0,0,0,458,446,
		1,0,0,0,459,112,1,0,0,0,460,461,7,7,0,0,461,114,1,0,0,0,20,0,314,317,324,
		327,333,338,343,350,355,362,370,374,379,386,396,407,422,429,458,1,0,1,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaSymbols.Compiler
