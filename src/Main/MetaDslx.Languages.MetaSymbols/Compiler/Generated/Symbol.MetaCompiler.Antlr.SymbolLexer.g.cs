//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SymbolLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaSymbols.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class SymbolLexer : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_KNull=1, LR_KTrue=2, LR_KFalse=3, LR_TComma=4, LR_TUtf8Bom=5, LR_KNamespace=6, 
		LR_KUsing=7, LR_KAbstract=8, LR_KSymbol=9, LR_TLParen=10, LR_TRParen=11, 
		LR_KObject=12, LR_KBool=13, LR_KChar=14, LR_KString=15, LR_KByte=16, LR_KSbyte=17, 
		LR_KShort=18, LR_KUshort=19, LR_KInt=20, LR_KUint=21, LR_KLong=22, LR_KUlong=23, 
		LR_KFloat=24, LR_KDouble=25, LR_KDecimal=26, LR_KType=27, LR_KVoid=28, 
		LR_TColon=29, LR_TLBrace=30, LR_TRBrace=31, LR_KWeak=32, LR_KDerived=33, 
		LR_TEq=34, LR_TQuestion=35, LR_TLBracket=36, LR_TRBracket=37, LR_TDot=38, 
		LR_TInteger=39, LR_TDecimal=40, LR_TIdentifier=41, LR_TVerbatimIdentifier=42, 
		LR_TString=43, LR_TWhitespace=44, LR_TLineEnd=45, LR_TSingleLineComment=46, 
		LR_TMultiLineComment=47, LR_TInvalidToken=48;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", "LR_KNamespace", 
		"LR_KUsing", "LR_KAbstract", "LR_KSymbol", "LR_TLParen", "LR_TRParen", 
		"LR_KObject", "LR_KBool", "LR_KChar", "LR_KString", "LR_KByte", "LR_KSbyte", 
		"LR_KShort", "LR_KUshort", "LR_KInt", "LR_KUint", "LR_KLong", "LR_KUlong", 
		"LR_KFloat", "LR_KDouble", "LR_KDecimal", "LR_KType", "LR_KVoid", "LR_TColon", 
		"LR_TLBrace", "LR_TRBrace", "LR_KWeak", "LR_KDerived", "LR_TEq", "LR_TQuestion", 
		"LR_TLBracket", "LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", 
		"LR_TIdentifier", "LR_TVerbatimIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken", 
		"FR_DoubleQuoteTextCharacter", "FR_DoubleQuoteTextSimple", "FR_SingleQuoteTextCharacter", 
		"FR_SingleQuoteTextSimple", "FR_CharacterEscapeSimple", "FR_CharacterEscapeSimpleCharacter", 
		"FR_CharacterEscapeUnicode", "FR_HexDigit"
	};


	public SymbolLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SymbolLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'true'", "'false'", "','", null, "'namespace'", "'using'", 
		"'abstract'", "'symbol'", "'('", "')'", "'object'", "'bool'", "'char'", 
		"'string'", "'byte'", "'sbyte'", "'short'", "'ushort'", "'int'", "'uint'", 
		"'long'", "'ulong'", "'float'", "'double'", "'decimal'", "'type'", "'void'", 
		"':'", "'{'", "'}'", "'weak'", "'derived'", "'='", "'?'", "'['", "']'", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", 
		"LR_KNamespace", "LR_KUsing", "LR_KAbstract", "LR_KSymbol", "LR_TLParen", 
		"LR_TRParen", "LR_KObject", "LR_KBool", "LR_KChar", "LR_KString", "LR_KByte", 
		"LR_KSbyte", "LR_KShort", "LR_KUshort", "LR_KInt", "LR_KUint", "LR_KLong", 
		"LR_KUlong", "LR_KFloat", "LR_KDouble", "LR_KDecimal", "LR_KType", "LR_KVoid", 
		"LR_TColon", "LR_TLBrace", "LR_TRBrace", "LR_KWeak", "LR_KDerived", "LR_TEq", 
		"LR_TQuestion", "LR_TLBracket", "LR_TRBracket", "LR_TDot", "LR_TInteger", 
		"LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", "LR_TString", 
		"LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", 
		"LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SymbolLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SymbolLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,48,454,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,
		0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,
		1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
		6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
		1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
		1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
		1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
		1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
		1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
		1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,34,
		1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,5,38,305,8,38,10,38,
		12,38,308,9,38,3,38,310,8,38,1,39,1,39,1,39,5,39,315,8,39,10,39,12,39,
		318,9,39,3,39,320,8,39,1,39,1,39,4,39,324,8,39,11,39,12,39,325,1,40,4,
		40,329,8,40,11,40,12,40,330,1,40,5,40,334,8,40,10,40,12,40,337,9,40,1,
		41,1,41,4,41,341,8,41,11,41,12,41,342,1,41,5,41,346,8,41,10,41,12,41,349,
		9,41,1,42,1,42,5,42,353,8,42,10,42,12,42,356,9,42,1,42,1,42,1,42,5,42,
		361,8,42,10,42,12,42,364,9,42,1,42,3,42,367,8,42,1,43,4,43,370,8,43,11,
		43,12,43,371,1,43,1,43,1,44,1,44,1,44,3,44,379,8,44,1,44,1,44,1,45,1,45,
		1,45,1,45,5,45,387,8,45,10,45,12,45,390,9,45,1,45,1,45,1,46,1,46,1,46,
		1,46,5,46,398,8,46,10,46,12,46,401,9,46,1,46,1,46,1,46,1,46,1,46,1,47,
		1,47,1,47,1,47,1,48,1,48,1,48,3,48,415,8,48,1,49,1,49,1,50,1,50,1,50,3,
		50,422,8,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,
		1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
		1,54,3,54,451,8,54,1,55,1,55,1,399,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
		15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
		39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
		63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
		87,44,89,45,91,46,93,47,95,48,97,0,99,0,101,0,103,0,105,0,107,0,109,0,
		111,0,1,0,8,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,
		9,32,32,2,0,10,10,13,13,6,0,10,10,13,13,34,34,92,92,133,133,8232,8233,
		6,0,10,10,13,13,39,39,92,92,133,133,8232,8233,10,0,34,34,39,39,48,48,92,
		92,97,98,102,102,110,110,114,114,116,116,118,118,3,0,48,57,65,70,97,102,
		466,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
		0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,1,113,1,0,0,0,3,
		118,1,0,0,0,5,123,1,0,0,0,7,129,1,0,0,0,9,131,1,0,0,0,11,137,1,0,0,0,13,
		147,1,0,0,0,15,153,1,0,0,0,17,162,1,0,0,0,19,169,1,0,0,0,21,171,1,0,0,
		0,23,173,1,0,0,0,25,180,1,0,0,0,27,185,1,0,0,0,29,190,1,0,0,0,31,197,1,
		0,0,0,33,202,1,0,0,0,35,208,1,0,0,0,37,214,1,0,0,0,39,221,1,0,0,0,41,225,
		1,0,0,0,43,230,1,0,0,0,45,235,1,0,0,0,47,241,1,0,0,0,49,247,1,0,0,0,51,
		254,1,0,0,0,53,262,1,0,0,0,55,267,1,0,0,0,57,272,1,0,0,0,59,274,1,0,0,
		0,61,276,1,0,0,0,63,278,1,0,0,0,65,283,1,0,0,0,67,291,1,0,0,0,69,293,1,
		0,0,0,71,295,1,0,0,0,73,297,1,0,0,0,75,299,1,0,0,0,77,309,1,0,0,0,79,319,
		1,0,0,0,81,328,1,0,0,0,83,338,1,0,0,0,85,366,1,0,0,0,87,369,1,0,0,0,89,
		378,1,0,0,0,91,382,1,0,0,0,93,393,1,0,0,0,95,407,1,0,0,0,97,414,1,0,0,
		0,99,416,1,0,0,0,101,421,1,0,0,0,103,423,1,0,0,0,105,425,1,0,0,0,107,428,
		1,0,0,0,109,450,1,0,0,0,111,452,1,0,0,0,113,114,5,110,0,0,114,115,5,117,
		0,0,115,116,5,108,0,0,116,117,5,108,0,0,117,2,1,0,0,0,118,119,5,116,0,
		0,119,120,5,114,0,0,120,121,5,117,0,0,121,122,5,101,0,0,122,4,1,0,0,0,
		123,124,5,102,0,0,124,125,5,97,0,0,125,126,5,108,0,0,126,127,5,115,0,0,
		127,128,5,101,0,0,128,6,1,0,0,0,129,130,5,44,0,0,130,8,1,0,0,0,131,132,
		5,239,0,0,132,133,5,187,0,0,133,134,5,191,0,0,134,135,1,0,0,0,135,136,
		6,4,0,0,136,10,1,0,0,0,137,138,5,110,0,0,138,139,5,97,0,0,139,140,5,109,
		0,0,140,141,5,101,0,0,141,142,5,115,0,0,142,143,5,112,0,0,143,144,5,97,
		0,0,144,145,5,99,0,0,145,146,5,101,0,0,146,12,1,0,0,0,147,148,5,117,0,
		0,148,149,5,115,0,0,149,150,5,105,0,0,150,151,5,110,0,0,151,152,5,103,
		0,0,152,14,1,0,0,0,153,154,5,97,0,0,154,155,5,98,0,0,155,156,5,115,0,0,
		156,157,5,116,0,0,157,158,5,114,0,0,158,159,5,97,0,0,159,160,5,99,0,0,
		160,161,5,116,0,0,161,16,1,0,0,0,162,163,5,115,0,0,163,164,5,121,0,0,164,
		165,5,109,0,0,165,166,5,98,0,0,166,167,5,111,0,0,167,168,5,108,0,0,168,
		18,1,0,0,0,169,170,5,40,0,0,170,20,1,0,0,0,171,172,5,41,0,0,172,22,1,0,
		0,0,173,174,5,111,0,0,174,175,5,98,0,0,175,176,5,106,0,0,176,177,5,101,
		0,0,177,178,5,99,0,0,178,179,5,116,0,0,179,24,1,0,0,0,180,181,5,98,0,0,
		181,182,5,111,0,0,182,183,5,111,0,0,183,184,5,108,0,0,184,26,1,0,0,0,185,
		186,5,99,0,0,186,187,5,104,0,0,187,188,5,97,0,0,188,189,5,114,0,0,189,
		28,1,0,0,0,190,191,5,115,0,0,191,192,5,116,0,0,192,193,5,114,0,0,193,194,
		5,105,0,0,194,195,5,110,0,0,195,196,5,103,0,0,196,30,1,0,0,0,197,198,5,
		98,0,0,198,199,5,121,0,0,199,200,5,116,0,0,200,201,5,101,0,0,201,32,1,
		0,0,0,202,203,5,115,0,0,203,204,5,98,0,0,204,205,5,121,0,0,205,206,5,116,
		0,0,206,207,5,101,0,0,207,34,1,0,0,0,208,209,5,115,0,0,209,210,5,104,0,
		0,210,211,5,111,0,0,211,212,5,114,0,0,212,213,5,116,0,0,213,36,1,0,0,0,
		214,215,5,117,0,0,215,216,5,115,0,0,216,217,5,104,0,0,217,218,5,111,0,
		0,218,219,5,114,0,0,219,220,5,116,0,0,220,38,1,0,0,0,221,222,5,105,0,0,
		222,223,5,110,0,0,223,224,5,116,0,0,224,40,1,0,0,0,225,226,5,117,0,0,226,
		227,5,105,0,0,227,228,5,110,0,0,228,229,5,116,0,0,229,42,1,0,0,0,230,231,
		5,108,0,0,231,232,5,111,0,0,232,233,5,110,0,0,233,234,5,103,0,0,234,44,
		1,0,0,0,235,236,5,117,0,0,236,237,5,108,0,0,237,238,5,111,0,0,238,239,
		5,110,0,0,239,240,5,103,0,0,240,46,1,0,0,0,241,242,5,102,0,0,242,243,5,
		108,0,0,243,244,5,111,0,0,244,245,5,97,0,0,245,246,5,116,0,0,246,48,1,
		0,0,0,247,248,5,100,0,0,248,249,5,111,0,0,249,250,5,117,0,0,250,251,5,
		98,0,0,251,252,5,108,0,0,252,253,5,101,0,0,253,50,1,0,0,0,254,255,5,100,
		0,0,255,256,5,101,0,0,256,257,5,99,0,0,257,258,5,105,0,0,258,259,5,109,
		0,0,259,260,5,97,0,0,260,261,5,108,0,0,261,52,1,0,0,0,262,263,5,116,0,
		0,263,264,5,121,0,0,264,265,5,112,0,0,265,266,5,101,0,0,266,54,1,0,0,0,
		267,268,5,118,0,0,268,269,5,111,0,0,269,270,5,105,0,0,270,271,5,100,0,
		0,271,56,1,0,0,0,272,273,5,58,0,0,273,58,1,0,0,0,274,275,5,123,0,0,275,
		60,1,0,0,0,276,277,5,125,0,0,277,62,1,0,0,0,278,279,5,119,0,0,279,280,
		5,101,0,0,280,281,5,97,0,0,281,282,5,107,0,0,282,64,1,0,0,0,283,284,5,
		100,0,0,284,285,5,101,0,0,285,286,5,114,0,0,286,287,5,105,0,0,287,288,
		5,118,0,0,288,289,5,101,0,0,289,290,5,100,0,0,290,66,1,0,0,0,291,292,5,
		61,0,0,292,68,1,0,0,0,293,294,5,63,0,0,294,70,1,0,0,0,295,296,5,91,0,0,
		296,72,1,0,0,0,297,298,5,93,0,0,298,74,1,0,0,0,299,300,5,46,0,0,300,76,
		1,0,0,0,301,310,5,48,0,0,302,306,2,49,57,0,303,305,2,48,57,0,304,303,1,
		0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,310,1,0,0,0,
		308,306,1,0,0,0,309,301,1,0,0,0,309,302,1,0,0,0,310,78,1,0,0,0,311,320,
		5,48,0,0,312,316,2,49,57,0,313,315,2,48,57,0,314,313,1,0,0,0,315,318,1,
		0,0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,
		319,311,1,0,0,0,319,312,1,0,0,0,320,321,1,0,0,0,321,323,5,46,0,0,322,324,
		2,48,57,0,323,322,1,0,0,0,324,325,1,0,0,0,325,323,1,0,0,0,325,326,1,0,
		0,0,326,80,1,0,0,0,327,329,7,0,0,0,328,327,1,0,0,0,329,330,1,0,0,0,330,
		328,1,0,0,0,330,331,1,0,0,0,331,335,1,0,0,0,332,334,7,1,0,0,333,332,1,
		0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,0,0,336,82,1,0,0,0,337,
		335,1,0,0,0,338,340,5,64,0,0,339,341,7,0,0,0,340,339,1,0,0,0,341,342,1,
		0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,347,1,0,0,0,344,346,7,1,0,0,
		345,344,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,84,
		1,0,0,0,349,347,1,0,0,0,350,354,5,34,0,0,351,353,3,97,48,0,352,351,1,0,
		0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,0,356,
		354,1,0,0,0,357,367,5,34,0,0,358,362,5,39,0,0,359,361,3,101,50,0,360,359,
		1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,365,1,0,0,
		0,364,362,1,0,0,0,365,367,5,39,0,0,366,350,1,0,0,0,366,358,1,0,0,0,367,
		86,1,0,0,0,368,370,7,2,0,0,369,368,1,0,0,0,370,371,1,0,0,0,371,369,1,0,
		0,0,371,372,1,0,0,0,372,373,1,0,0,0,373,374,6,43,0,0,374,88,1,0,0,0,375,
		376,5,13,0,0,376,379,5,10,0,0,377,379,7,3,0,0,378,375,1,0,0,0,378,377,
		1,0,0,0,379,380,1,0,0,0,380,381,6,44,0,0,381,90,1,0,0,0,382,383,5,47,0,
		0,383,384,5,47,0,0,384,388,1,0,0,0,385,387,8,3,0,0,386,385,1,0,0,0,387,
		390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,388,1,
		0,0,0,391,392,6,45,0,0,392,92,1,0,0,0,393,394,5,47,0,0,394,395,5,42,0,
		0,395,399,1,0,0,0,396,398,9,0,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,
		400,1,0,0,0,399,397,1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,403,5,
		42,0,0,403,404,5,47,0,0,404,405,1,0,0,0,405,406,6,46,0,0,406,94,1,0,0,
		0,407,408,9,0,0,0,408,409,1,0,0,0,409,410,6,47,0,0,410,96,1,0,0,0,411,
		415,3,99,49,0,412,415,3,105,52,0,413,415,3,109,54,0,414,411,1,0,0,0,414,
		412,1,0,0,0,414,413,1,0,0,0,415,98,1,0,0,0,416,417,8,4,0,0,417,100,1,0,
		0,0,418,422,3,103,51,0,419,422,3,105,52,0,420,422,3,109,54,0,421,418,1,
		0,0,0,421,419,1,0,0,0,421,420,1,0,0,0,422,102,1,0,0,0,423,424,8,5,0,0,
		424,104,1,0,0,0,425,426,5,92,0,0,426,427,3,107,53,0,427,106,1,0,0,0,428,
		429,7,6,0,0,429,108,1,0,0,0,430,431,5,92,0,0,431,432,5,117,0,0,432,433,
		1,0,0,0,433,434,3,111,55,0,434,435,3,111,55,0,435,436,3,111,55,0,436,437,
		3,111,55,0,437,451,1,0,0,0,438,439,5,92,0,0,439,440,5,85,0,0,440,441,1,
		0,0,0,441,442,3,111,55,0,442,443,3,111,55,0,443,444,3,111,55,0,444,445,
		3,111,55,0,445,446,3,111,55,0,446,447,3,111,55,0,447,448,3,111,55,0,448,
		449,3,111,55,0,449,451,1,0,0,0,450,430,1,0,0,0,450,438,1,0,0,0,451,110,
		1,0,0,0,452,453,7,7,0,0,453,112,1,0,0,0,20,0,306,309,316,319,325,330,335,
		342,347,354,362,366,371,378,388,399,414,421,450,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaSymbols.Compiler
