namespace MetaDslx.Languages.MetaSymbols.Compiler;

using System;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Annotations;
using MetaDslx.CodeAnalysis.Binding;
using MetaDslx.CodeAnalysis.Syntax;
using MetaDslx.Languages.MetaSymbols.Model;

language Symbol : Common;

Main returns MetaDslx.CodeAnalysis.Symbols.NamespaceSymbol:
	'namespace' [Name]Qualifier ';'
	Using*
	[Scope](Symbol*)
	eof;

Using returns MetaDslx.CodeAnalysis.Symbols.ImportSymbol: 'using' namespaces+=#MetaDslx.CodeAnalysis.Symbols.NamespaceSymbol ';';

Symbol: 
	isAbstract?='abstract'? 'symbol' Name
	(':' baseTypes+=#MetaDslx.Languages.MetaSymbols.Model.Symbol)?
	[Scope]('{' (properties+=Property | operations+=Operation)* '}');

Property: (isPlain?='plain' (isAbstract?='abstract' | isWeak?='weak')? | isDerived?='derived' isCached='cached'? isWeak?='weak'? | isWeak?='weak')? @type=TypeReference Name ('=' defaultValue=Value)? ('phase' phase=#{Property|Identifier})? ';';

Operation
	: isPhase?='phase' Name '(' ')' ';'
	| isCached?='cached'? returnType=TypeReference Name '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')' ('if' cacheCondition=TString)? ';'
	;
Parameter: @type=TypeReference Name;

TypeReference: @type=SimpleTypeReference (isNullable?='?')? dimensions=ArrayDimensions;
ArrayDimensions returns int: ('[' ']')*;

SimpleTypeReference returns type: PrimitiveType | #type;

PrimitiveType returns type
	: 'object'
	| 'bool'
	| 'char'
	| 'string'
	| 'byte'
	| 'sbyte'
	| 'short'
	| 'ushort'
	| 'int'
	| 'uint'
	| 'long'
	| 'ulong'
	| 'float'
	| 'double'
	| 'decimal'
	| 'type'
	| 'symbol'
	| 'void'
	;

Value returns symbol: TString | TInteger | TDecimal | TBoolean | KNull | #MetaDslx.CodeAnalysis.Symbols.DeclarationSymbol; 
