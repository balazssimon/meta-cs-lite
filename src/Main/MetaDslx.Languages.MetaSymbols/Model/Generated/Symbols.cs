#pragma warning disable CS8669

namespace MetaDslx.Languages.MetaSymbols.Model
{
    using __MetaMetaModel = global::MetaDslx.Languages.MetaModel.Model.Meta;
    using __MetaModelFactory = global::MetaDslx.Languages.MetaModel.Model.MetaModelFactory;
    using __Model = global::MetaDslx.Modeling.Model;
    using __MetaModel = global::MetaDslx.Modeling.MetaModel;
    using __IModelObject = global::MetaDslx.Modeling.IModelObject;
    using __ModelFactory = global::MetaDslx.Modeling.ModelFactory;
    using __MultiModelFactory = global::MetaDslx.Modeling.MultiModelFactory;
    using __ModelVersion = global::MetaDslx.Modeling.ModelVersion;
    using __ModelEnumInfo = global::MetaDslx.Modeling.ModelEnumInfo;
    using __ModelClassInfo = global::MetaDslx.Modeling.ModelClassInfo;
    using __ModelProperty = global::MetaDslx.Modeling.ModelProperty;
    using __ModelPropertyFlags = global::MetaDslx.Modeling.ModelPropertyFlags;
    using __ModelOperation = global::MetaDslx.Modeling.ModelOperation;
    using __ModelOperationInfo = global::MetaDslx.Modeling.ModelOperationInfo;
    using __ImmutableArray = global::System.Collections.Immutable.ImmutableArray;
    using __ImmutableDictionary = global::System.Collections.Immutable.ImmutableDictionary;
    using __MetaType = global::MetaDslx.CodeAnalysis.MetaType;
    using __MetaSymbol = global::MetaDslx.CodeAnalysis.MetaSymbol;
    using __Type = global::System.Type;
    using __Enum = global::System.Enum;

    internal interface ISymbols
    {
    }
    
    public sealed class Symbols : __MetaModel, ISymbols
    {
        // If there is an error at the following line, create a new class called 'CustomSymbolsImplementation'
        // inheriting from the class 'CustomSymbolsImplementationBase' and provide the custom implementation
        // for the derived properties and operations defined in the metamodel
        internal static readonly CustomSymbolsImplementationBase __CustomImpl = new CustomSymbolsImplementation();
    
        private static readonly Symbols _instance;
        public static Symbols MInstance => _instance;
    
        private static readonly __ModelProperty _Declaration_Name;
        private static readonly __ModelProperty _Declaration_Namespace;
        private static readonly __ModelProperty _Declaration_FullName;
        private static readonly __ModelProperty _Operation_IsAbstract;
        private static readonly __ModelProperty _Operation_IsPhase;
        private static readonly __ModelProperty _Operation_IsCached;
        private static readonly __ModelProperty _Operation_CacheCondition;
        private static readonly __ModelProperty _Operation_ReturnType;
        private static readonly __ModelProperty _Operation_Parameters;
        private static readonly __ModelProperty _Parameter_Type;
        private static readonly __ModelProperty _Property_Type;
        private static readonly __ModelProperty _Property_IsPlain;
        private static readonly __ModelProperty _Property_IsAbstract;
        private static readonly __ModelProperty _Property_IsDerived;
        private static readonly __ModelProperty _Property_IsCached;
        private static readonly __ModelProperty _Property_IsWeak;
        private static readonly __ModelProperty _Property_DefaultValue;
        private static readonly __ModelProperty _Property_Phase;
        private static readonly __ModelProperty _Symbol_IsAbstract;
        private static readonly __ModelProperty _Symbol_BaseTypes;
        private static readonly __ModelProperty _Symbol_Properties;
        private static readonly __ModelProperty _Symbol_Operations;
        private static readonly __ModelProperty _TypeReference_Type;
        private static readonly __ModelProperty _TypeReference_IsNullable;
        private static readonly __ModelProperty _TypeReference_Dimensions;
    
        static Symbols()
        {
            _Declaration_FullName = new __ModelProperty(typeof(Declaration), "FullName", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Declaration_Name = new __ModelProperty(typeof(Declaration), "Name", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.Name, "Name");
            _Declaration_Namespace = new __ModelProperty(typeof(Declaration), "Namespace", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single | __ModelPropertyFlags.ReadOnly | __ModelPropertyFlags.Derived, null);
            _Operation_CacheCondition = new __ModelProperty(typeof(Operation), "CacheCondition", typeof(string), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Operation_IsAbstract = new __ModelProperty(typeof(Operation), "IsAbstract", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Operation_IsCached = new __ModelProperty(typeof(Operation), "IsCached", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Operation_IsPhase = new __ModelProperty(typeof(Operation), "IsPhase", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Operation_Parameters = new __ModelProperty(typeof(Operation), "Parameters", typeof(Parameter), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _Operation_ReturnType = new __ModelProperty(typeof(Operation), "ReturnType", typeof(MetaDslx.Languages.MetaSymbols.Model.TypeReference), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Parameter_Type = new __ModelProperty(typeof(Parameter), "Type", typeof(MetaDslx.Languages.MetaSymbols.Model.TypeReference), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Property_DefaultValue = new __ModelProperty(typeof(Property), "DefaultValue", typeof(object), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Property_IsAbstract = new __ModelProperty(typeof(Property), "IsAbstract", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Property_IsCached = new __ModelProperty(typeof(Property), "IsCached", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Property_IsDerived = new __ModelProperty(typeof(Property), "IsDerived", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Property_IsPlain = new __ModelProperty(typeof(Property), "IsPlain", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Property_IsWeak = new __ModelProperty(typeof(Property), "IsWeak", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Property_Phase = new __ModelProperty(typeof(Property), "Phase", typeof(Property), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Property_Type = new __ModelProperty(typeof(Property), "Type", typeof(MetaDslx.Languages.MetaSymbols.Model.TypeReference), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Single, null);
            _Symbol_BaseTypes = new __ModelProperty(typeof(Symbol), "BaseTypes", typeof(Symbol), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Collection, "BaseTypes");
            _Symbol_IsAbstract = new __ModelProperty(typeof(Symbol), "IsAbstract", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _Symbol_Operations = new __ModelProperty(typeof(Symbol), "Operations", typeof(Operation), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _Symbol_Properties = new __ModelProperty(typeof(Symbol), "Properties", typeof(Property), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ReferenceType | __ModelPropertyFlags.NullableType | __ModelPropertyFlags.ModelObjectType | __ModelPropertyFlags.Containment | __ModelPropertyFlags.Collection, null);
            _TypeReference_Dimensions = new __ModelProperty(typeof(TypeReference), "Dimensions", typeof(int), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _TypeReference_IsNullable = new __ModelProperty(typeof(TypeReference), "IsNullable", typeof(bool), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _TypeReference_Type = new __ModelProperty(typeof(TypeReference), "Type", typeof(MetaDslx.CodeAnalysis.MetaType), default, __ModelPropertyFlags.None | __ModelPropertyFlags.ValueType | __ModelPropertyFlags.BuiltInType | __ModelPropertyFlags.Single, null);
            _instance = new Symbols();
        }
    
        private readonly __Model _model;
    
        private readonly global::System.Collections.Immutable.ImmutableArray<__MetaType> _enumTypes;
        private readonly global::System.Collections.Immutable.ImmutableArray<__ModelEnumInfo> _enumInfos;
        private readonly global::System.Collections.Immutable.ImmutableDictionary<__MetaType, __ModelEnumInfo> _enumInfosByType;
        private readonly global::System.Collections.Immutable.ImmutableDictionary<string, __ModelEnumInfo> _enumInfosByName;
    
        private readonly global::System.Collections.Immutable.ImmutableArray<__MetaType> _classTypes;
        private readonly global::System.Collections.Immutable.ImmutableArray<__ModelClassInfo> _classInfos;
        private readonly global::System.Collections.Immutable.ImmutableDictionary<__MetaType, __ModelClassInfo> _classInfosByType;
        private readonly global::System.Collections.Immutable.ImmutableDictionary<string, __ModelClassInfo> _classInfosByName;
    
    
        private Symbols()
        {
            _enumTypes = __ImmutableArray.Create<__MetaType>();
            _enumInfos = __ImmutableArray.Create<__ModelEnumInfo>();
            var enumInfosByType = __ImmutableDictionary.CreateBuilder<__MetaType, __ModelEnumInfo>();
            _enumInfosByType = enumInfosByType.ToImmutable();
            var enumInfosByName = __ImmutableDictionary.CreateBuilder<string, __ModelEnumInfo>();
            _enumInfosByName = enumInfosByName.ToImmutable();
    
            _classTypes = __ImmutableArray.Create<__MetaType>(typeof(Declaration), typeof(Operation), typeof(Parameter), typeof(Property), typeof(Symbol), typeof(TypeReference));
            _classInfos = __ImmutableArray.Create<__ModelClassInfo>(DeclarationInfo, OperationInfo, ParameterInfo, PropertyInfo, SymbolInfo, TypeReferenceInfo);
            var classInfosByType = __ImmutableDictionary.CreateBuilder<__MetaType, __ModelClassInfo>();
            classInfosByType.Add(typeof(Declaration), DeclarationInfo);
            classInfosByType.Add(typeof(Operation), OperationInfo);
            classInfosByType.Add(typeof(Parameter), ParameterInfo);
            classInfosByType.Add(typeof(Property), PropertyInfo);
            classInfosByType.Add(typeof(Symbol), SymbolInfo);
            classInfosByType.Add(typeof(TypeReference), TypeReferenceInfo);
            _classInfosByType = classInfosByType.ToImmutable();
            var classInfosByName = __ImmutableDictionary.CreateBuilder<string, __ModelClassInfo>();
            classInfosByName.Add("Declaration", DeclarationInfo);
            classInfosByName.Add("Operation", OperationInfo);
            classInfosByName.Add("Parameter", ParameterInfo);
            classInfosByName.Add("Property", PropertyInfo);
            classInfosByName.Add("Symbol", SymbolInfo);
            classInfosByName.Add("TypeReference", TypeReferenceInfo);
            _classInfosByName = classInfosByName.ToImmutable();
            _model = new __Model();
            var cf = new SymbolsModelFactory(_model, this);
            var f = new __MetaModelFactory(_model);
            var obj1 = f.MetaModel();
            var obj2 = f.MetaClass();
            var obj3 = f.MetaProperty();
            var obj4 = f.MetaProperty();
            var obj5 = f.MetaProperty();
            var obj6 = f.MetaTypeReference();
            var obj7 = f.MetaTypeReference();
            var obj8 = f.MetaTypeReference();
            var obj9 = f.MetaClass();
            var obj10 = f.MetaProperty();
            var obj11 = f.MetaProperty();
            var obj12 = f.MetaProperty();
            var obj13 = f.MetaProperty();
            var obj14 = f.MetaProperty();
            var obj15 = f.MetaProperty();
            var obj16 = f.MetaTypeReference();
            var obj17 = f.MetaTypeReference();
            var obj18 = f.MetaTypeReference();
            var obj19 = f.MetaTypeReference();
            var obj20 = f.MetaTypeReference();
            var obj21 = f.MetaTypeReference();
            var obj22 = f.MetaClass();
            var obj23 = f.MetaProperty();
            var obj24 = f.MetaTypeReference();
            var obj25 = f.MetaClass();
            var obj26 = f.MetaProperty();
            var obj27 = f.MetaProperty();
            var obj28 = f.MetaProperty();
            var obj29 = f.MetaProperty();
            var obj30 = f.MetaProperty();
            var obj31 = f.MetaProperty();
            var obj32 = f.MetaProperty();
            var obj33 = f.MetaProperty();
            var obj34 = f.MetaTypeReference();
            var obj35 = f.MetaTypeReference();
            var obj36 = f.MetaTypeReference();
            var obj37 = f.MetaTypeReference();
            var obj38 = f.MetaTypeReference();
            var obj39 = f.MetaTypeReference();
            var obj40 = f.MetaTypeReference();
            var obj41 = f.MetaTypeReference();
            var obj42 = f.MetaClass();
            var obj43 = f.MetaProperty();
            var obj44 = f.MetaProperty();
            var obj45 = f.MetaProperty();
            var obj46 = f.MetaProperty();
            var obj47 = f.MetaTypeReference();
            var obj48 = f.MetaTypeReference();
            var obj49 = f.MetaTypeReference();
            var obj50 = f.MetaTypeReference();
            var obj51 = f.MetaClass();
            var obj52 = f.MetaProperty();
            var obj53 = f.MetaProperty();
            var obj54 = f.MetaProperty();
            var obj55 = f.MetaTypeReference();
            var obj56 = f.MetaTypeReference();
            var obj57 = f.MetaTypeReference();
            __CustomImpl.Symbols(this);
            obj1.Name = "Symbols";
            obj2.MChildren.Add(obj3);
            obj2.MChildren.Add(obj4);
            obj2.MChildren.Add(obj5);
            obj2.Properties.Add(obj3);
            obj2.Properties.Add(obj4);
            obj2.Properties.Add(obj5);
            obj2.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.DeclarationSymbol);
            obj2.Name = "Declaration";
            obj3.MChildren.Add(obj6);
            obj3.SymbolProperty = __MetaSymbol.FromValue("Name");
            obj3.Type = obj6;
            obj3.Name = "Name";
            obj4.MChildren.Add(obj7);
            obj4.IsDerived = true;
            obj4.Type = obj7;
            obj4.Name = "Namespace";
            obj5.MChildren.Add(obj8);
            obj5.IsDerived = true;
            obj5.Type = obj8;
            obj5.Name = "FullName";
            obj6.IsNullable = true;
            obj6.Type = typeof(string);
            obj7.Type = typeof(string);
            obj8.IsNullable = true;
            obj8.Type = typeof(string);
            obj9.MChildren.Add(obj10);
            obj9.MChildren.Add(obj11);
            obj9.MChildren.Add(obj12);
            obj9.MChildren.Add(obj13);
            obj9.MChildren.Add(obj14);
            obj9.MChildren.Add(obj15);
            obj9.BaseTypes.Add(obj2);
            obj9.Properties.Add(obj10);
            obj9.Properties.Add(obj11);
            obj9.Properties.Add(obj12);
            obj9.Properties.Add(obj13);
            obj9.Properties.Add(obj14);
            obj9.Properties.Add(obj15);
            obj9.Name = "Operation";
            obj10.MChildren.Add(obj16);
            obj10.Type = obj16;
            obj10.Name = "IsAbstract";
            obj11.MChildren.Add(obj17);
            obj11.Type = obj17;
            obj11.Name = "IsPhase";
            obj12.MChildren.Add(obj18);
            obj12.Type = obj18;
            obj12.Name = "IsCached";
            obj13.MChildren.Add(obj19);
            obj13.Type = obj19;
            obj13.Name = "CacheCondition";
            obj14.MChildren.Add(obj20);
            obj14.Type = obj20;
            obj14.Name = "ReturnType";
            obj15.MChildren.Add(obj21);
            obj15.IsContainment = true;
            obj15.Type = obj21;
            obj15.Name = "Parameters";
            obj16.Type = typeof(bool);
            obj17.Type = typeof(bool);
            obj18.Type = typeof(bool);
            obj19.Type = typeof(string);
            obj20.Type = __MetaType.FromModelObject(obj51);
            obj21.IsArray = true;
            obj21.Type = __MetaType.FromModelObject(obj22);
            obj22.MChildren.Add(obj23);
            obj22.BaseTypes.Add(obj2);
            obj22.Properties.Add(obj23);
            obj22.Name = "Parameter";
            obj23.MChildren.Add(obj24);
            obj23.Type = obj24;
            obj23.Name = "Type";
            obj24.Type = __MetaType.FromModelObject(obj51);
            obj25.MChildren.Add(obj26);
            obj25.MChildren.Add(obj27);
            obj25.MChildren.Add(obj28);
            obj25.MChildren.Add(obj29);
            obj25.MChildren.Add(obj30);
            obj25.MChildren.Add(obj31);
            obj25.MChildren.Add(obj32);
            obj25.MChildren.Add(obj33);
            obj25.BaseTypes.Add(obj2);
            obj25.Properties.Add(obj26);
            obj25.Properties.Add(obj27);
            obj25.Properties.Add(obj28);
            obj25.Properties.Add(obj29);
            obj25.Properties.Add(obj30);
            obj25.Properties.Add(obj31);
            obj25.Properties.Add(obj32);
            obj25.Properties.Add(obj33);
            obj25.Name = "Property";
            obj26.MChildren.Add(obj34);
            obj26.Type = obj34;
            obj26.Name = "Type";
            obj27.MChildren.Add(obj35);
            obj27.Type = obj35;
            obj27.Name = "IsPlain";
            obj28.MChildren.Add(obj36);
            obj28.Type = obj36;
            obj28.Name = "IsAbstract";
            obj29.MChildren.Add(obj37);
            obj29.Type = obj37;
            obj29.Name = "IsDerived";
            obj30.MChildren.Add(obj38);
            obj30.Type = obj38;
            obj30.Name = "IsCached";
            obj31.MChildren.Add(obj39);
            obj31.Type = obj39;
            obj31.Name = "IsWeak";
            obj32.MChildren.Add(obj40);
            obj32.Type = obj40;
            obj32.Name = "DefaultValue";
            obj33.MChildren.Add(obj41);
            obj33.Type = obj41;
            obj33.Name = "Phase";
            obj34.Type = __MetaType.FromModelObject(obj51);
            obj35.Type = typeof(bool);
            obj36.Type = typeof(bool);
            obj37.Type = typeof(bool);
            obj38.Type = typeof(bool);
            obj39.Type = typeof(bool);
            obj40.IsNullable = true;
            obj40.Type = typeof(object);
            obj41.IsNullable = true;
            obj41.Type = __MetaType.FromModelObject(obj25);
            obj42.MChildren.Add(obj43);
            obj42.MChildren.Add(obj44);
            obj42.MChildren.Add(obj45);
            obj42.MChildren.Add(obj46);
            obj42.BaseTypes.Add(obj2);
            obj42.Properties.Add(obj43);
            obj42.Properties.Add(obj44);
            obj42.Properties.Add(obj45);
            obj42.Properties.Add(obj46);
            obj42.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.TypeSymbol);
            obj42.Name = "Symbol";
            obj43.MChildren.Add(obj47);
            obj43.Type = obj47;
            obj43.Name = "IsAbstract";
            obj44.MChildren.Add(obj48);
            obj44.SymbolProperty = __MetaSymbol.FromValue("BaseTypes");
            obj44.Type = obj48;
            obj44.Name = "BaseTypes";
            obj45.MChildren.Add(obj49);
            obj45.IsContainment = true;
            obj45.Type = obj49;
            obj45.Name = "Properties";
            obj46.MChildren.Add(obj50);
            obj46.IsContainment = true;
            obj46.Type = obj50;
            obj46.Name = "Operations";
            obj47.Type = typeof(bool);
            obj48.IsArray = true;
            obj48.Type = __MetaType.FromModelObject(obj42);
            obj49.IsArray = true;
            obj49.Type = __MetaType.FromModelObject(obj25);
            obj50.IsArray = true;
            obj50.Type = __MetaType.FromModelObject(obj9);
            obj51.MChildren.Add(obj52);
            obj51.MChildren.Add(obj53);
            obj51.MChildren.Add(obj54);
            obj51.Properties.Add(obj52);
            obj51.Properties.Add(obj53);
            obj51.Properties.Add(obj54);
            obj51.SymbolType = typeof(MetaDslx.CodeAnalysis.Symbols.TypeSymbol);
            obj51.Name = "TypeReference";
            obj52.MChildren.Add(obj55);
            obj52.Type = obj55;
            obj52.Name = "Type";
            obj53.MChildren.Add(obj56);
            obj53.Type = obj56;
            obj53.Name = "IsNullable";
            obj54.MChildren.Add(obj57);
            obj54.Type = obj57;
            obj54.Name = "Dimensions";
            obj55.Type = typeof(__MetaType);
            obj56.Type = typeof(bool);
            obj57.Type = typeof(int);
            _model.IsSealed = true;
        }
    
        public override string MName => nameof(Symbols);
        public override string MNamespace => "MetaDslx.Languages.MetaSymbols.Model";
        public override __ModelVersion MVersion => default;
        public override string MUri => "MetaDslx.Languages.MetaSymbols.Model.Symbols";
        public override string MPrefix => "s";
        public override __Model MModel => _model;
    
        public override global::System.Collections.Immutable.ImmutableDictionary<__MetaType, __ModelEnumInfo> MEnumInfosByType => _enumInfosByType;
        public override global::System.Collections.Immutable.ImmutableDictionary<string, __ModelEnumInfo> MEnumInfosByName => _enumInfosByName;
        public override global::System.Collections.Immutable.ImmutableDictionary<__MetaType, __ModelClassInfo> MClassInfosByType => _classInfosByType;
        public override global::System.Collections.Immutable.ImmutableDictionary<string, __ModelClassInfo> MClassInfosByName => _classInfosByName;
    
        public override global::System.Collections.Immutable.ImmutableArray<__MetaType> MEnumTypes => _enumTypes;
        public override global::System.Collections.Immutable.ImmutableArray<__ModelEnumInfo> MEnumInfos => _enumInfos;
        public override global::System.Collections.Immutable.ImmutableArray<__MetaType> MClassTypes => _classTypes;
        public override global::System.Collections.Immutable.ImmutableArray<__ModelClassInfo> MClassInfos => _classInfos;
    
    
    
        public static __ModelClassInfo DeclarationInfo => __Impl.Declaration_Impl.__Info.Instance;
        public static __ModelProperty Declaration_Name => _Declaration_Name;
        public static __ModelProperty Declaration_Namespace => _Declaration_Namespace;
        public static __ModelProperty Declaration_FullName => _Declaration_FullName;
        public static __ModelClassInfo OperationInfo => __Impl.Operation_Impl.__Info.Instance;
        public static __ModelProperty Operation_IsAbstract => _Operation_IsAbstract;
        public static __ModelProperty Operation_IsPhase => _Operation_IsPhase;
        public static __ModelProperty Operation_IsCached => _Operation_IsCached;
        public static __ModelProperty Operation_CacheCondition => _Operation_CacheCondition;
        public static __ModelProperty Operation_ReturnType => _Operation_ReturnType;
        public static __ModelProperty Operation_Parameters => _Operation_Parameters;
        public static __ModelClassInfo ParameterInfo => __Impl.Parameter_Impl.__Info.Instance;
        public static __ModelProperty Parameter_Type => _Parameter_Type;
        public static __ModelClassInfo PropertyInfo => __Impl.Property_Impl.__Info.Instance;
        public static __ModelProperty Property_Type => _Property_Type;
        public static __ModelProperty Property_IsPlain => _Property_IsPlain;
        public static __ModelProperty Property_IsAbstract => _Property_IsAbstract;
        public static __ModelProperty Property_IsDerived => _Property_IsDerived;
        public static __ModelProperty Property_IsCached => _Property_IsCached;
        public static __ModelProperty Property_IsWeak => _Property_IsWeak;
        public static __ModelProperty Property_DefaultValue => _Property_DefaultValue;
        public static __ModelProperty Property_Phase => _Property_Phase;
        public static __ModelClassInfo SymbolInfo => __Impl.Symbol_Impl.__Info.Instance;
        public static __ModelProperty Symbol_IsAbstract => _Symbol_IsAbstract;
        public static __ModelProperty Symbol_BaseTypes => _Symbol_BaseTypes;
        public static __ModelProperty Symbol_Properties => _Symbol_Properties;
        public static __ModelProperty Symbol_Operations => _Symbol_Operations;
        public static __ModelClassInfo TypeReferenceInfo => __Impl.TypeReference_Impl.__Info.Instance;
        public static __ModelProperty TypeReference_Type => _TypeReference_Type;
        public static __ModelProperty TypeReference_IsNullable => _TypeReference_IsNullable;
        public static __ModelProperty TypeReference_Dimensions => _TypeReference_Dimensions;
    }
}
