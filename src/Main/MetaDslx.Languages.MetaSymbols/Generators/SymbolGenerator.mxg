namespace MetaDslx.Languages.MetaSymbols.Generators

using System.Linq
using Roslyn.Utilities
using MetaDslx.CodeAnalysis
using MetaDslx.Languages.MetaSymbols.Model

generator SymbolGenerator

template GenerateSymbol(Symbol symbol)
namespace [symbol.NamespaceName]
{
    using __Type = global::System.Type;
    using __ISymbol = global::Microsoft.CodeAnalysis.ISymbol;
    using __Phase = global::MetaDslx.CodeAnalysis.Symbols.PhaseAttribute;
    using __Derived = global::MetaDslx.CodeAnalysis.Symbols.DerivedAttribute;
    using __Weak = global::MetaDslx.CodeAnalysis.Symbols.WeakAttribute;
    using __Symbol = global::MetaDslx.CodeAnalysis.Symbols.Symbol;
    using __AttributeSymbol = global::MetaDslx.CodeAnalysis.Symbols.AttributeSymbol;
    using __AssemblySymbol = global::MetaDslx.CodeAnalysis.Symbols.AssemblySymbol;
    using __ModuleSymbol = global::MetaDslx.CodeAnalysis.Symbols.ModuleSymbol;
    using __DeclarationSymbol = global::MetaDslx.CodeAnalysis.Symbols.DeclarationSymbol;
    using __NamespaceSymbol = global::MetaDslx.CodeAnalysis.Symbols.NamespaceSymbol;
    using __TypeSymbol = global::MetaDslx.CodeAnalysis.Symbols.TypeSymbol;
    using __ISymbolFactory = global::MetaDslx.CodeAnalysis.Symbols.ISymbolFactory;
    using __LexicalSortKey = global::MetaDslx.CodeAnalysis.Symbols.LexicalSortKey;
    using __IModelObject = global::MetaDslx.Modeling.IModelObject;
    using __Model = global::MetaDslx.Modeling.Model;
    using __ErrorSymbolInfo = global::MetaDslx.CodeAnalysis.Symbols.ErrorSymbolInfo;
    using __ModelProperty = global::MetaDslx.CodeAnalysis.Symbols.ModelPropertyAttribute;
    using __CompletionGraph = global::MetaDslx.CodeAnalysis.Symbols.CompletionGraph;
    using __CompletionPart = global::MetaDslx.CodeAnalysis.Symbols.CompletionPart;
    using __MergedDeclaration = global::MetaDslx.CodeAnalysis.Declarations.MergedDeclaration;
    using __DiagnosticBag = global::MetaDslx.CodeAnalysis.DiagnosticBag;
    using __Compilation = global::MetaDslx.CodeAnalysis.Compilation;
    using __SourceLocation = global::MetaDslx.CodeAnalysis.SourceLocation;
    using __CancellationToken = global::System.Threading.CancellationToken;
    using __NotImplementedException = global::System.NotImplementedException;
    using __CultureInfo = global::System.Globalization.CultureInfo;
    using __ImmutableAttributeSymbols = global::System.Collections.Immutable.ImmutableArray<global::MetaDslx.CodeAnalysis.Symbols.AttributeSymbol>;

    [var baseTypes = symbol.BaseTypes]
    [var baseSymbol = baseTypes.Count == 1 ? baseTypes[0] : null]
    [var baseName = baseSymbol is null ? "global::MetaDslx.CodeAnalysis.Symbols.Symbol" : GetBaseName(symbol, baseSymbol)]
    public abstract partial class [GetIntfName(symbol, symbol)]: [baseName]
    {
        public new class CompletionParts : [baseName].CompletionParts
        {
            [foreach (var phase in GetPhases(symbol))]
                public static readonly __CompletionPart Start_[phase] = new __CompletionPart(nameof(Start_[phase]));
                public static readonly __CompletionPart Finish_[phase] = new __CompletionPart(nameof(Finish_[phase]));
            [end foreach]

            public static readonly __CompletionGraph CompletionGraph = 
                __CompletionGraph.CreateFromParts(
                    [baseName].CompletionParts.CompletionGraph
                    [foreach (var phase in GetPhases(symbol))]
                        , Start_[phase], Finish_[phase]
                    [end foreach]
                );
        }

        [foreach (var prop in symbol.Properties.Where(p => !p.IsAbstract))]
            [if (prop.IsWeak)]
                private static [GetFieldType(symbol, prop)] [GetFieldName(prop)] = new [GetFieldType(symbol, prop)]();
            [else]
                private [GetFieldType(symbol, prop)] [GetFieldName(prop)];
            [end if]
        [end foreach]
        [foreach (var op in symbol.Operations.Where(o => o.IsCached))]
            private static [GetFieldType(symbol, op)] [GetFieldName(op)] = new [GetFieldType(symbol, op)]();
        [end foreach]

        public [GetIntfName(symbol, symbol)](__Symbol? container, __Compilation? compilation = null, __MergedDeclaration? declaration = null, __Model? model = null, __IModelObject? modelObject = null, __ISymbol csharpSymbol = null, __ErrorSymbolInfo? errorInfo = null, bool fixedSymbol = false, string? name = default, string? metadataName = default, global::System.Collections.Immutable.ImmutableArray<AttributeSymbol> attributes = default[foreach (var prop in GetProperties(symbol).Where(p => !p.IsAbstract && !p.IsDerived))], [GetTypeName(symbol, prop.Type)] [GetParamName(prop)] = [GetConstDefaultValue(symbol, prop)][end foreach]) 
            : base(container, compilation, declaration, model, modelObject, csharpSymbol, errorInfo, fixedSymbol, name, metadataName, attributes[foreach (var prop in GetProperties(baseSymbol).Where(p => !p.IsAbstract && !p.IsDerived))], [GetParamName(prop)]: [GetParamName(prop)][end foreach])
        {
            if (fixedSymbol)
            {
                [foreach (var prop in symbol.Properties.Where(p => !p.IsAbstract && !p.IsDerived))]
                    [AssignProperty(symbol, prop, GetParamName(prop))]
                [end foreach]
            }
        }

        public override __Type SymbolType => typeof([GetIntfName(symbol, symbol)]);
        protected override CompletionGraph CompletionGraph => CompletionParts.CompletionGraph;

        [foreach (var prop in symbol.Properties)]
            [if (!prop.IsDerived && !prop.IsPlain)]
                ["["]__ModelProperty["]"]
            [end if]
            [if (!prop.IsPlain)]
                ["["]__Phase[if (prop.Phase is not null)](nameof([prop.Phase.Name]))[end if]["]"]
            [end if]
            [if (prop.IsDerived)]
                ["["]__Derived[if (prop.IsCached)](Cached=true)[end if]["]"]
            [end if]
            [if (prop.IsWeak)]
                ["["]__Weak["]"]
            [end if]
            public [if (prop.IsAbstract)]abstract [end if][GetTypeName(symbol, prop.Type)] [prop.Name]
            {
                [if (prop.IsPlain)]
                    [if (prop.IsAbstract)]
                        get;
                    [else]
                        [if (prop.IsWeak)]
                            get
                            {
                                if ([GetFieldName(prop)].TryGetValue(this, out var result)) return ([GetTypeName(symbol, prop.Type)])result;
                                else return [GetDefaultValue(symbol, prop)];
                            }
                            protected set
                            {
                                [AssignProperty(symbol, prop, "value")]
                            }
                        [else]
                            get => [GetFieldName(prop)];
                            protected set => [GetFieldName(prop)] = value;
                        [end if]
                    [end if]
                [else]
                    get
                    {
                        this.ForceComplete(CompletionParts.Finish_[prop.Phase?.Name ?? prop.Name], null, default);
                        [if (prop.IsWeak)]
                            if ([GetFieldName(prop)].TryGetValue(this, out var result)) return ([GetTypeName(symbol, prop.Type)])result;
                            else return [GetDefaultValue(symbol, prop)];
                        [else]
                            return [GetFieldName(prop)];
                        [end if]
                    }
                [end if]
            }
        [end foreach]

        [foreach (var op in symbol.Operations)]
            [var arguments = "("+string.Join(", ", op.Parameters.Select(p => p.Name))+")"]
            [var call = op.Name+arguments]
            [var returnType = GetTypeName(symbol, op.ReturnType)]

            [if (op.IsPhase)]
                ["["]__Phase["]"]
                protected abstract void [op.Name](__DiagnosticBag diagnostics, __CancellationToken cancellationToken);
            [else if (op.IsCached)]
                ["["]__Derived[if (op.IsCached)](Cached=true[if (!string.IsNullOrEmpty(op.CacheCondition))], Condition=[op.CacheCondition.EncodeString()][end if])[end if]["]"]
                public [returnType] [op.Name]([from p in op.Parameters select GetTypeName(symbol, p.Type)+" "+p.Name separator ", "])
                {
                    [if (!string.IsNullOrEmpty(op.CacheCondition))]
                        if (!([op.CacheCondition])) return [GetDefaultValue(symbol, op.ReturnType)];
                    [end if]
                    [var fieldName = GetFieldName(op)]
                    [if (op.Parameters.Count == 0)]
                        return ([returnType])[fieldName].GetValue(this, __this => Compute_[op.Name][arguments]);
                    [else]
                        var __cachedDictionary = [fieldName].GetValue(this, __this => new global::System.Collections.Concurrent.ConcurrentDictionary<[GetCacheKeyType(symbol, op)], [returnType]>());
                        return __cachedDictionary.GetOrAdd([arguments], __args => Compute_[op.Name][arguments]);
                    [end if]
                }

                protected abstract [returnType] Compute_[op.Name]([from p in op.Parameters select GetTypeName(symbol, p.Type)+" "+p.Name separator ", "]);
            [else]
                public abstract [returnType] [op.Name]([from p in op.Parameters select GetTypeName(symbol, p.Type)+" "+p.Name separator ", "]);
            [end if]
        [end foreach]

        [var phases = GetPhases(symbol)]
        protected override bool ForceCompletePart(ref __CompletionPart incompletePart, __SourceLocation? locationOpt, __CancellationToken cancellationToken)
        {
            [var hasNewPhase = false]
            [foreach (var phase in phases)]
                [hasNewPhase = true]
                [var props = GetPhaseProperties(symbol, phase)]
                if (incompletePart == CompletionParts.Start_[phase] || incompletePart == CompletionParts.Finish_[phase])
                {
                    if (NotePartComplete(CompletionParts.Start_[phase]))
                    {
                        var diagnostics = __DiagnosticBag.GetInstance();
                        [if (props.Length >= 2)]
                            var result = Compute_[phase](diagnostics, cancellationToken);
                            [foreach (var prop in props)]
                                [AssignProperty(symbol, prop, "result."+prop.Name)]
                            [end foreach]
                        [else if (props.Length == 1)]
                            var result = Compute_[phase](diagnostics, cancellationToken);
                            [AssignProperty(symbol, props[0], "result")]
                        [else]
                            [phase](diagnostics, cancellationToken);
                        [end if]
                        AddSymbolDiagnostics(diagnostics);
                        diagnostics.Free();
                        NotePartComplete(CompletionParts.Finish_[phase]);
                    }
                    return true;
                }
                else [\]
            [end foreach]
            [if (hasNewPhase)]
                {
                    return base.ForceCompletePart(ref incompletePart, locationOpt, cancellationToken);
                }
            [else]
                return base.ForceCompletePart(ref incompletePart, locationOpt, cancellationToken);
            [end if]
        }

        [foreach (var phase in phases)]

            [var props = GetPhaseProperties(symbol, phase)]
            [if (props.Length >= 2)]
                [var returnType = "("+string.Join(", ", props.Select(p => GetTypeName(symbol, p.Type)+" "+p.Name))+")"]
                [if (props.Where(p => p.IsDerived).Any())]
                    protected abstract [returnType] Compute_[phase](__DiagnosticBag diagnostics, __CancellationToken cancellationToken);
                [else]
                    protected virtual [returnType] Compute_[phase](__DiagnosticBag diagnostics, __CancellationToken cancellationToken)
                    {
                        [-]
                        return (
                            [foreach (var prop in props) separator ", "]
                                SymbolFactory.GetSymbolPropertyValue[if (prop.Type.Dimensions > 0)]s[end if]<[GetTypeName(symbol, prop.Type.Type)]>(this, nameof([prop.Name]), diagnostics, cancellationToken);
                            [end foreach]
                        );
                        [=]
                    }
                [end if]
            [else if (props.Length == 1)]
                [var prop = props[0]]
                [var returnType = GetTypeName(symbol, prop.Type)]
                [if (prop.IsDerived)]
                    protected abstract [returnType] Compute_[phase](__DiagnosticBag diagnostics, __CancellationToken cancellationToken);
                [else]
                    protected virtual [returnType] Compute_[phase](__DiagnosticBag diagnostics, __CancellationToken cancellationToken)
                    {
                        return SymbolFactory.GetSymbolPropertyValue[if (prop.Type.Dimensions > 0)]s[end if]<[GetTypeName(symbol, prop.Type.Type)]>(this, nameof([prop.Name]), diagnostics, cancellationToken);
                    }
                [end if]
            [end if]
        [end foreach]
    }
}
end template

template GenerateImplementation(Symbol symbol)
[var baseTypes = symbol.BaseTypes]
[var baseSymbol = baseTypes.Count == 1 ? baseTypes[0] : null]
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;
using MetaDslx.CodeAnalysis;
using MetaDslx.CodeAnalysis.Declarations;
using MetaDslx.CodeAnalysis.Symbols;

namespace [symbol.NamespaceName].Impl
{
    using __Model = MetaDslx.Modeling.Model;
    using __IModelObject = MetaDslx.Modeling.IModelObject;
    using __ISymbol = Microsoft.CodeAnalysis.ISymbol;

    public class [GetImplName(symbol, symbol)] : [GetIntfName(symbol, symbol)]
    {
        public [GetImplName(symbol, symbol)](Symbol? container, Compilation? compilation = null, MergedDeclaration? declaration = null, __Model? model = null, __IModelObject? modelObject = null, __ISymbol csharpSymbol = null, ErrorSymbolInfo? errorInfo = null, bool fixedSymbol = false, string? name = default, string? metadataName = default, global::System.Collections.Immutable.ImmutableArray<AttributeSymbol> attributes = default[foreach (var prop in GetProperties(symbol).Where(p => !p.IsDerived))], [GetTypeName(symbol, prop.Type)] [GetParamName(prop)] = [GetConstDefaultValue(symbol, prop)][end foreach]) 
            : base(container, compilation, declaration, model, modelObject, csharpSymbol, errorInfo, fixedSymbol, name, metadataName, attributes[foreach (var prop in GetProperties(baseSymbol).Where(p => !p.IsDerived))], [GetParamName(prop)]: [GetParamName(prop)][end foreach])
        {
        }

    }
}
end template

template AssignProperty(Symbol symbol, Property prop, string variable)
    [if (prop.IsWeak)]
        [if (prop.Type.Dimensions > 0)]
            if (![variable].IsDefaultOrEmpty)
            {
                [GetFieldName(prop)].Add(this, [variable]);
            }
        [else]
            if ([variable] != [GetDefaultValue(symbol, prop)])
            {
                [GetFieldName(prop)].Add(this, [variable]);
            }
        [end if]
    [else]
        [GetFieldName(prop)] = [variable];
    [end if]
end template
