namespace MetaDslx.Languages.MetaModel.Compiler;

using System;
using MetaDslx.CodeAnalysis.Annotations;
using MetaDslx.CodeAnalysis.Binding;
using MetaDslx.CodeAnalysis.Syntax;
using MetaDslx.CodeAnalysis.Symbols;
using MetaDslx.Languages.MetaModel.Model;

language Meta;

Main returns MetaNamespace:
	'namespace' name=[Name(qualifierProperty:Declarations)]Qualifier ';'
	Using*
	Declarations
	eof;

Using returns ImportSymbol: 'using' namespaces+=#NamespaceSymbol ';';

[Scope]
block Declarations: declarations+=MetaDeclaration*;

MetaModel: 'metamodel' name=Name ';';

MetaDeclaration: MetaModel | MetaConstant | MetaEnum | MetaClass;

MetaConstant: 'const' @type=TypeReference name=Name ';';

MetaEnum: 'enum' name=Name EnumBody;
[Scope]
block EnumBody: '{' EnumLiterals? '}';
block EnumLiterals : literals+=MetaEnumLiteral (',' literals+=MetaEnumLiteral)* ;
MetaEnumLiteral: name=Name;

MetaClass: isAbstract?='abstract'? 'class' [Name]ClassName BaseClasses? ClassBody;
[Name]
[Identifier]
block ClassName: Identifier? '$' symbolType=[Use(types: Symbol, suffixes: Symbol)]Identifier | Identifier;
block BaseClasses: ':' baseTypes+=#{MetaClass} (',' baseTypes+=#{MetaClass})*;
[Scope]
block ClassBody: '{' ClassMember* '}';

block ClassMember: properties+=MetaProperty | operations+=MetaOperation;

MetaProperty: (isContainment?='contains' | isDerived?='derived')? @type=TypeReference [Name]PropertyName (PropertyOpposite | PropertySubsets | PropertyRedefines)* ';';
[Name]
[Identifier]
block PropertyName: Identifier? '$' symbolProperty=[Value(string)]Identifier | Identifier;
block PropertyOpposite: 'opposite' oppositeProperties+=#MetaProperty (',' oppositeProperties+=#MetaProperty)*;
block PropertySubsets: 'subsets' subsettedProperties+=#MetaProperty (',' subsettedProperties+=#MetaProperty)*;
block PropertyRedefines: 'redefines' redefinedProperties+=#MetaProperty (',' redefinedProperties+=#MetaProperty)*;

MetaOperation: returnType=TypeReference name=Name '(' ParameterList? ')' ';';
block ParameterList: parameters+=MetaParameter (',' parameters+=MetaParameter)*;
MetaParameter: @type=TypeReference name=Name;

TypeReference returns MetaDslx.CodeAnalysis.MetaType: SimpleTypeReference | MetaArrayType | MetaNullableType;
MetaArrayType: itemType=TypeReference '[' ']';
MetaNullableType: innerType=TypeReference '?';

block SimpleTypeReference: [Value(MetaDslx.CodeAnalysis.MetaType)] PrimitiveType | [Use(MetaDslx.CodeAnalysis.MetaType)] Qualifier;

block PrimitiveType
	: 'bool'
	| 'int'
	| 'string'
	| 'type'
	| 'symbol'
	| 'object'
	| 'void'
	;

[Name]
block Name: Identifier;

[DefaultReference]
[Qualifier]
block Qualifier: Identifier ('.' Identifier)*;

block QualifierList: Qualifier (',' Qualifier)*;

[Identifier]
block Identifier: TIdentifier | TVerbatimIdentifier;

block SimpleQualifier: SimpleIdentifier ('.' SimpleIdentifier)*;
block SimpleIdentifier: TIdentifier | TVerbatimIdentifier;

[Number]
token TInteger returns int32: '0'| '1'..'9' ('0'..'9')* ;

[Number]
token TDecimal returns double: ('0'|'1'..'9' ('0'..'9')*) '.' ('0'..'9')+ ;

[DefaultIdentifier]
token TIdentifier: ('_'|'a'..'z'|'A'..'Z')+('_'|'a'..'z'|'A'..'Z'|'0'..'9')*;
[Identifier]
token TVerbatimIdentifier: '@'('_'|'a'..'z'|'A'..'Z')+('_'|'a'..'z'|'A'..'Z'|'0'..'9')*;

[DefaultSeparator]
token TComma: ',' ;

[String]
token TString returns string
    : '"' DoubleQuoteTextCharacter* '"'
    | '\'' SingleQuoteTextCharacter* '\'';

fragment DoubleQuoteTextCharacter : DoubleQuoteTextSimple | CharacterEscapeSimple | CharacterEscapeUnicode;
fragment DoubleQuoteTextSimple : ~('"' | '\\' | '\u000A' | '\u000D' | '\u0085' | '\u2028' | '\u2029');
fragment SingleQuoteTextCharacter : SingleQuoteTextSimple | CharacterEscapeSimple | CharacterEscapeUnicode;
fragment SingleQuoteTextSimple : ~('\'' | '\\' | '\u000A' | '\u000D' | '\u0085' | '\u2028' | '\u2029');
fragment CharacterEscapeSimple : '\\' CharacterEscapeSimpleCharacter;
fragment CharacterEscapeSimpleCharacter : '\'' | '"' | '\\' | '0' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v'; 
fragment CharacterEscapeUnicode
    : '\\u' HexDigit HexDigit HexDigit HexDigit
    | '\\U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit;
fragment HexDigit : ('0'..'9' | 'a'..'f' | 'A'..'F');

[Whitespace]
hidden TUtf8Bom: '\u00EF' '\u00BB' '\u00BF';

[DefaultWhitespace]
hidden TWhitespace: ('\t'|' ') +;

[DefaultEndOfLine]
hidden TLineEnd: ('\r\n' | '\r' | '\n');

[SingleLineComment]
hidden TSingleLineComment: '//' ~('\r' | '\n')*;

[MultiLineComment]
hidden TMultiLineComment: '/*' .*? '*/';

hidden TInvalidToken: .;
