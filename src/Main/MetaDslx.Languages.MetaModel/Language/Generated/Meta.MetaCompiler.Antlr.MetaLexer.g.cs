//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaLexer : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_KNull=1, LR_KTrue=2, LR_KFalse=3, LR_TComma=4, LR_TUtf8Bom=5, LR_KNamespace=6, 
		LR_KUsing=7, LR_KMetamodel=8, LR_KConst=9, LR_KEnum=10, LR_KAbstract=11, 
		LR_KClass=12, LR_TLParen=13, LR_TRParen=14, LR_TLBracket=15, LR_TRBracket=16, 
		LR_TQuestion=17, LR_KObject=18, LR_KBool=19, LR_KChar=20, LR_KString=21, 
		LR_KByte=22, LR_KSbyte=23, LR_KShort=24, LR_KUshort=25, LR_KInt=26, LR_KUint=27, 
		LR_KLong=28, LR_KUlong=29, LR_KFloat=30, LR_KDouble=31, LR_KDecimal=32, 
		LR_KType=33, LR_KSymbol=34, LR_KVoid=35, LR_TEq=36, LR_TLBrace=37, LR_TRBrace=38, 
		LR_TDollar=39, LR_TColon=40, LR_KContains=41, LR_KDerived=42, LR_KUnion=43, 
		LR_KReadonly=44, LR_KOpposite=45, LR_KSubsets=46, LR_KRedefines=47, LR_TDot=48, 
		LR_TInteger=49, LR_TDecimal=50, LR_TIdentifier=51, LR_TVerbatimIdentifier=52, 
		LR_TString=53, LR_TWhitespace=54, LR_TLineEnd=55, LR_TSingleLineComment=56, 
		LR_TMultiLineComment=57, LR_TInvalidToken=58;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", "LR_KNamespace", 
		"LR_KUsing", "LR_KMetamodel", "LR_KConst", "LR_KEnum", "LR_KAbstract", 
		"LR_KClass", "LR_TLParen", "LR_TRParen", "LR_TLBracket", "LR_TRBracket", 
		"LR_TQuestion", "LR_KObject", "LR_KBool", "LR_KChar", "LR_KString", "LR_KByte", 
		"LR_KSbyte", "LR_KShort", "LR_KUshort", "LR_KInt", "LR_KUint", "LR_KLong", 
		"LR_KUlong", "LR_KFloat", "LR_KDouble", "LR_KDecimal", "LR_KType", "LR_KSymbol", 
		"LR_KVoid", "LR_TEq", "LR_TLBrace", "LR_TRBrace", "LR_TDollar", "LR_TColon", 
		"LR_KContains", "LR_KDerived", "LR_KUnion", "LR_KReadonly", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TDot", "LR_TInteger", "LR_TDecimal", 
		"LR_TIdentifier", "LR_TVerbatimIdentifier", "LR_TString", "LR_TWhitespace", 
		"LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment", "LR_TInvalidToken", 
		"FR_DoubleQuoteTextCharacter", "FR_DoubleQuoteTextSimple", "FR_SingleQuoteTextCharacter", 
		"FR_SingleQuoteTextSimple", "FR_CharacterEscapeSimple", "FR_CharacterEscapeSimpleCharacter", 
		"FR_CharacterEscapeUnicode", "FR_HexDigit"
	};


	public MetaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MetaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'true'", "'false'", "','", null, "'namespace'", "'using'", 
		"'metamodel'", "'const'", "'enum'", "'abstract'", "'class'", "'('", "')'", 
		"'['", "']'", "'?'", "'object'", "'bool'", "'char'", "'string'", "'byte'", 
		"'sbyte'", "'short'", "'ushort'", "'int'", "'uint'", "'long'", "'ulong'", 
		"'float'", "'double'", "'decimal'", "'type'", "'symbol'", "'void'", "'='", 
		"'{'", "'}'", "'$'", "':'", "'contains'", "'derived'", "'union'", "'readonly'", 
		"'opposite'", "'subsets'", "'redefines'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", 
		"LR_KNamespace", "LR_KUsing", "LR_KMetamodel", "LR_KConst", "LR_KEnum", 
		"LR_KAbstract", "LR_KClass", "LR_TLParen", "LR_TRParen", "LR_TLBracket", 
		"LR_TRBracket", "LR_TQuestion", "LR_KObject", "LR_KBool", "LR_KChar", 
		"LR_KString", "LR_KByte", "LR_KSbyte", "LR_KShort", "LR_KUshort", "LR_KInt", 
		"LR_KUint", "LR_KLong", "LR_KUlong", "LR_KFloat", "LR_KDouble", "LR_KDecimal", 
		"LR_KType", "LR_KSymbol", "LR_KVoid", "LR_TEq", "LR_TLBrace", "LR_TRBrace", 
		"LR_TDollar", "LR_TColon", "LR_KContains", "LR_KDerived", "LR_KUnion", 
		"LR_KReadonly", "LR_KOpposite", "LR_KSubsets", "LR_KRedefines", "LR_TDot", 
		"LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,58,549,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
		2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
		12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
		22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,
		24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,
		27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,
		30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
		32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,
		34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,
		40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
		46,1,46,1,47,1,47,1,48,1,48,1,48,5,48,400,8,48,10,48,12,48,403,9,48,3,
		48,405,8,48,1,49,1,49,1,49,5,49,410,8,49,10,49,12,49,413,9,49,3,49,415,
		8,49,1,49,1,49,4,49,419,8,49,11,49,12,49,420,1,50,4,50,424,8,50,11,50,
		12,50,425,1,50,5,50,429,8,50,10,50,12,50,432,9,50,1,51,1,51,4,51,436,8,
		51,11,51,12,51,437,1,51,5,51,441,8,51,10,51,12,51,444,9,51,1,52,1,52,5,
		52,448,8,52,10,52,12,52,451,9,52,1,52,1,52,1,52,5,52,456,8,52,10,52,12,
		52,459,9,52,1,52,3,52,462,8,52,1,53,4,53,465,8,53,11,53,12,53,466,1,53,
		1,53,1,54,1,54,1,54,3,54,474,8,54,1,54,1,54,1,55,1,55,1,55,1,55,5,55,482,
		8,55,10,55,12,55,485,9,55,1,55,1,55,1,56,1,56,1,56,1,56,5,56,493,8,56,
		10,56,12,56,496,9,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,
		1,58,1,58,3,58,510,8,58,1,59,1,59,1,60,1,60,1,60,3,60,517,8,60,1,61,1,
		61,1,62,1,62,1,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,
		64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,546,8,64,
		1,65,1,65,1,494,0,66,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
		23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
		35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
		47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,
		115,58,117,0,119,0,121,0,123,0,125,0,127,0,129,0,131,0,1,0,8,3,0,65,90,
		95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,
		6,0,10,10,13,13,34,34,92,92,133,133,8232,8233,6,0,10,10,13,13,39,39,92,
		92,133,133,8232,8233,10,0,34,34,39,39,48,48,92,92,97,98,102,102,110,110,
		114,114,116,116,118,118,3,0,48,57,65,70,97,102,561,0,1,1,0,0,0,0,3,1,0,
		0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
		1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
		0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
		1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
		0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
		103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
		113,1,0,0,0,0,115,1,0,0,0,1,133,1,0,0,0,3,138,1,0,0,0,5,143,1,0,0,0,7,
		149,1,0,0,0,9,151,1,0,0,0,11,157,1,0,0,0,13,167,1,0,0,0,15,173,1,0,0,0,
		17,183,1,0,0,0,19,189,1,0,0,0,21,194,1,0,0,0,23,203,1,0,0,0,25,209,1,0,
		0,0,27,211,1,0,0,0,29,213,1,0,0,0,31,215,1,0,0,0,33,217,1,0,0,0,35,219,
		1,0,0,0,37,226,1,0,0,0,39,231,1,0,0,0,41,236,1,0,0,0,43,243,1,0,0,0,45,
		248,1,0,0,0,47,254,1,0,0,0,49,260,1,0,0,0,51,267,1,0,0,0,53,271,1,0,0,
		0,55,276,1,0,0,0,57,281,1,0,0,0,59,287,1,0,0,0,61,293,1,0,0,0,63,300,1,
		0,0,0,65,308,1,0,0,0,67,313,1,0,0,0,69,320,1,0,0,0,71,325,1,0,0,0,73,327,
		1,0,0,0,75,329,1,0,0,0,77,331,1,0,0,0,79,333,1,0,0,0,81,335,1,0,0,0,83,
		344,1,0,0,0,85,352,1,0,0,0,87,358,1,0,0,0,89,367,1,0,0,0,91,376,1,0,0,
		0,93,384,1,0,0,0,95,394,1,0,0,0,97,404,1,0,0,0,99,414,1,0,0,0,101,423,
		1,0,0,0,103,433,1,0,0,0,105,461,1,0,0,0,107,464,1,0,0,0,109,473,1,0,0,
		0,111,477,1,0,0,0,113,488,1,0,0,0,115,502,1,0,0,0,117,509,1,0,0,0,119,
		511,1,0,0,0,121,516,1,0,0,0,123,518,1,0,0,0,125,520,1,0,0,0,127,523,1,
		0,0,0,129,545,1,0,0,0,131,547,1,0,0,0,133,134,5,110,0,0,134,135,5,117,
		0,0,135,136,5,108,0,0,136,137,5,108,0,0,137,2,1,0,0,0,138,139,5,116,0,
		0,139,140,5,114,0,0,140,141,5,117,0,0,141,142,5,101,0,0,142,4,1,0,0,0,
		143,144,5,102,0,0,144,145,5,97,0,0,145,146,5,108,0,0,146,147,5,115,0,0,
		147,148,5,101,0,0,148,6,1,0,0,0,149,150,5,44,0,0,150,8,1,0,0,0,151,152,
		5,239,0,0,152,153,5,187,0,0,153,154,5,191,0,0,154,155,1,0,0,0,155,156,
		6,4,0,0,156,10,1,0,0,0,157,158,5,110,0,0,158,159,5,97,0,0,159,160,5,109,
		0,0,160,161,5,101,0,0,161,162,5,115,0,0,162,163,5,112,0,0,163,164,5,97,
		0,0,164,165,5,99,0,0,165,166,5,101,0,0,166,12,1,0,0,0,167,168,5,117,0,
		0,168,169,5,115,0,0,169,170,5,105,0,0,170,171,5,110,0,0,171,172,5,103,
		0,0,172,14,1,0,0,0,173,174,5,109,0,0,174,175,5,101,0,0,175,176,5,116,0,
		0,176,177,5,97,0,0,177,178,5,109,0,0,178,179,5,111,0,0,179,180,5,100,0,
		0,180,181,5,101,0,0,181,182,5,108,0,0,182,16,1,0,0,0,183,184,5,99,0,0,
		184,185,5,111,0,0,185,186,5,110,0,0,186,187,5,115,0,0,187,188,5,116,0,
		0,188,18,1,0,0,0,189,190,5,101,0,0,190,191,5,110,0,0,191,192,5,117,0,0,
		192,193,5,109,0,0,193,20,1,0,0,0,194,195,5,97,0,0,195,196,5,98,0,0,196,
		197,5,115,0,0,197,198,5,116,0,0,198,199,5,114,0,0,199,200,5,97,0,0,200,
		201,5,99,0,0,201,202,5,116,0,0,202,22,1,0,0,0,203,204,5,99,0,0,204,205,
		5,108,0,0,205,206,5,97,0,0,206,207,5,115,0,0,207,208,5,115,0,0,208,24,
		1,0,0,0,209,210,5,40,0,0,210,26,1,0,0,0,211,212,5,41,0,0,212,28,1,0,0,
		0,213,214,5,91,0,0,214,30,1,0,0,0,215,216,5,93,0,0,216,32,1,0,0,0,217,
		218,5,63,0,0,218,34,1,0,0,0,219,220,5,111,0,0,220,221,5,98,0,0,221,222,
		5,106,0,0,222,223,5,101,0,0,223,224,5,99,0,0,224,225,5,116,0,0,225,36,
		1,0,0,0,226,227,5,98,0,0,227,228,5,111,0,0,228,229,5,111,0,0,229,230,5,
		108,0,0,230,38,1,0,0,0,231,232,5,99,0,0,232,233,5,104,0,0,233,234,5,97,
		0,0,234,235,5,114,0,0,235,40,1,0,0,0,236,237,5,115,0,0,237,238,5,116,0,
		0,238,239,5,114,0,0,239,240,5,105,0,0,240,241,5,110,0,0,241,242,5,103,
		0,0,242,42,1,0,0,0,243,244,5,98,0,0,244,245,5,121,0,0,245,246,5,116,0,
		0,246,247,5,101,0,0,247,44,1,0,0,0,248,249,5,115,0,0,249,250,5,98,0,0,
		250,251,5,121,0,0,251,252,5,116,0,0,252,253,5,101,0,0,253,46,1,0,0,0,254,
		255,5,115,0,0,255,256,5,104,0,0,256,257,5,111,0,0,257,258,5,114,0,0,258,
		259,5,116,0,0,259,48,1,0,0,0,260,261,5,117,0,0,261,262,5,115,0,0,262,263,
		5,104,0,0,263,264,5,111,0,0,264,265,5,114,0,0,265,266,5,116,0,0,266,50,
		1,0,0,0,267,268,5,105,0,0,268,269,5,110,0,0,269,270,5,116,0,0,270,52,1,
		0,0,0,271,272,5,117,0,0,272,273,5,105,0,0,273,274,5,110,0,0,274,275,5,
		116,0,0,275,54,1,0,0,0,276,277,5,108,0,0,277,278,5,111,0,0,278,279,5,110,
		0,0,279,280,5,103,0,0,280,56,1,0,0,0,281,282,5,117,0,0,282,283,5,108,0,
		0,283,284,5,111,0,0,284,285,5,110,0,0,285,286,5,103,0,0,286,58,1,0,0,0,
		287,288,5,102,0,0,288,289,5,108,0,0,289,290,5,111,0,0,290,291,5,97,0,0,
		291,292,5,116,0,0,292,60,1,0,0,0,293,294,5,100,0,0,294,295,5,111,0,0,295,
		296,5,117,0,0,296,297,5,98,0,0,297,298,5,108,0,0,298,299,5,101,0,0,299,
		62,1,0,0,0,300,301,5,100,0,0,301,302,5,101,0,0,302,303,5,99,0,0,303,304,
		5,105,0,0,304,305,5,109,0,0,305,306,5,97,0,0,306,307,5,108,0,0,307,64,
		1,0,0,0,308,309,5,116,0,0,309,310,5,121,0,0,310,311,5,112,0,0,311,312,
		5,101,0,0,312,66,1,0,0,0,313,314,5,115,0,0,314,315,5,121,0,0,315,316,5,
		109,0,0,316,317,5,98,0,0,317,318,5,111,0,0,318,319,5,108,0,0,319,68,1,
		0,0,0,320,321,5,118,0,0,321,322,5,111,0,0,322,323,5,105,0,0,323,324,5,
		100,0,0,324,70,1,0,0,0,325,326,5,61,0,0,326,72,1,0,0,0,327,328,5,123,0,
		0,328,74,1,0,0,0,329,330,5,125,0,0,330,76,1,0,0,0,331,332,5,36,0,0,332,
		78,1,0,0,0,333,334,5,58,0,0,334,80,1,0,0,0,335,336,5,99,0,0,336,337,5,
		111,0,0,337,338,5,110,0,0,338,339,5,116,0,0,339,340,5,97,0,0,340,341,5,
		105,0,0,341,342,5,110,0,0,342,343,5,115,0,0,343,82,1,0,0,0,344,345,5,100,
		0,0,345,346,5,101,0,0,346,347,5,114,0,0,347,348,5,105,0,0,348,349,5,118,
		0,0,349,350,5,101,0,0,350,351,5,100,0,0,351,84,1,0,0,0,352,353,5,117,0,
		0,353,354,5,110,0,0,354,355,5,105,0,0,355,356,5,111,0,0,356,357,5,110,
		0,0,357,86,1,0,0,0,358,359,5,114,0,0,359,360,5,101,0,0,360,361,5,97,0,
		0,361,362,5,100,0,0,362,363,5,111,0,0,363,364,5,110,0,0,364,365,5,108,
		0,0,365,366,5,121,0,0,366,88,1,0,0,0,367,368,5,111,0,0,368,369,5,112,0,
		0,369,370,5,112,0,0,370,371,5,111,0,0,371,372,5,115,0,0,372,373,5,105,
		0,0,373,374,5,116,0,0,374,375,5,101,0,0,375,90,1,0,0,0,376,377,5,115,0,
		0,377,378,5,117,0,0,378,379,5,98,0,0,379,380,5,115,0,0,380,381,5,101,0,
		0,381,382,5,116,0,0,382,383,5,115,0,0,383,92,1,0,0,0,384,385,5,114,0,0,
		385,386,5,101,0,0,386,387,5,100,0,0,387,388,5,101,0,0,388,389,5,102,0,
		0,389,390,5,105,0,0,390,391,5,110,0,0,391,392,5,101,0,0,392,393,5,115,
		0,0,393,94,1,0,0,0,394,395,5,46,0,0,395,96,1,0,0,0,396,405,5,48,0,0,397,
		401,2,49,57,0,398,400,2,48,57,0,399,398,1,0,0,0,400,403,1,0,0,0,401,399,
		1,0,0,0,401,402,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,404,396,1,0,0,
		0,404,397,1,0,0,0,405,98,1,0,0,0,406,415,5,48,0,0,407,411,2,49,57,0,408,
		410,2,48,57,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,
		1,0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,414,406,1,0,0,0,414,407,1,0,0,
		0,415,416,1,0,0,0,416,418,5,46,0,0,417,419,2,48,57,0,418,417,1,0,0,0,419,
		420,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,100,1,0,0,0,422,424,7,
		0,0,0,423,422,1,0,0,0,424,425,1,0,0,0,425,423,1,0,0,0,425,426,1,0,0,0,
		426,430,1,0,0,0,427,429,7,1,0,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,
		1,0,0,0,430,431,1,0,0,0,431,102,1,0,0,0,432,430,1,0,0,0,433,435,5,64,0,
		0,434,436,7,0,0,0,435,434,1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,0,437,
		438,1,0,0,0,438,442,1,0,0,0,439,441,7,1,0,0,440,439,1,0,0,0,441,444,1,
		0,0,0,442,440,1,0,0,0,442,443,1,0,0,0,443,104,1,0,0,0,444,442,1,0,0,0,
		445,449,5,34,0,0,446,448,3,117,58,0,447,446,1,0,0,0,448,451,1,0,0,0,449,
		447,1,0,0,0,449,450,1,0,0,0,450,452,1,0,0,0,451,449,1,0,0,0,452,462,5,
		34,0,0,453,457,5,39,0,0,454,456,3,121,60,0,455,454,1,0,0,0,456,459,1,0,
		0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,1,0,0,0,460,
		462,5,39,0,0,461,445,1,0,0,0,461,453,1,0,0,0,462,106,1,0,0,0,463,465,7,
		2,0,0,464,463,1,0,0,0,465,466,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,
		467,468,1,0,0,0,468,469,6,53,0,0,469,108,1,0,0,0,470,471,5,13,0,0,471,
		474,5,10,0,0,472,474,7,3,0,0,473,470,1,0,0,0,473,472,1,0,0,0,474,475,1,
		0,0,0,475,476,6,54,0,0,476,110,1,0,0,0,477,478,5,47,0,0,478,479,5,47,0,
		0,479,483,1,0,0,0,480,482,8,3,0,0,481,480,1,0,0,0,482,485,1,0,0,0,483,
		481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,0,486,487,6,
		55,0,0,487,112,1,0,0,0,488,489,5,47,0,0,489,490,5,42,0,0,490,494,1,0,0,
		0,491,493,9,0,0,0,492,491,1,0,0,0,493,496,1,0,0,0,494,495,1,0,0,0,494,
		492,1,0,0,0,495,497,1,0,0,0,496,494,1,0,0,0,497,498,5,42,0,0,498,499,5,
		47,0,0,499,500,1,0,0,0,500,501,6,56,0,0,501,114,1,0,0,0,502,503,9,0,0,
		0,503,504,1,0,0,0,504,505,6,57,0,0,505,116,1,0,0,0,506,510,3,119,59,0,
		507,510,3,125,62,0,508,510,3,129,64,0,509,506,1,0,0,0,509,507,1,0,0,0,
		509,508,1,0,0,0,510,118,1,0,0,0,511,512,8,4,0,0,512,120,1,0,0,0,513,517,
		3,123,61,0,514,517,3,125,62,0,515,517,3,129,64,0,516,513,1,0,0,0,516,514,
		1,0,0,0,516,515,1,0,0,0,517,122,1,0,0,0,518,519,8,5,0,0,519,124,1,0,0,
		0,520,521,5,92,0,0,521,522,3,127,63,0,522,126,1,0,0,0,523,524,7,6,0,0,
		524,128,1,0,0,0,525,526,5,92,0,0,526,527,5,117,0,0,527,528,1,0,0,0,528,
		529,3,131,65,0,529,530,3,131,65,0,530,531,3,131,65,0,531,532,3,131,65,
		0,532,546,1,0,0,0,533,534,5,92,0,0,534,535,5,85,0,0,535,536,1,0,0,0,536,
		537,3,131,65,0,537,538,3,131,65,0,538,539,3,131,65,0,539,540,3,131,65,
		0,540,541,3,131,65,0,541,542,3,131,65,0,542,543,3,131,65,0,543,544,3,131,
		65,0,544,546,1,0,0,0,545,525,1,0,0,0,545,533,1,0,0,0,546,130,1,0,0,0,547,
		548,7,7,0,0,548,132,1,0,0,0,20,0,401,404,411,414,420,425,430,437,442,449,
		457,461,466,473,483,494,509,516,545,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaModel.Compiler
