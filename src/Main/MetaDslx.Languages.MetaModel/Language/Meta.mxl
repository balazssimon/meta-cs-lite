namespace MetaDslx.Languages.MetaModel.Compiler;

using System;
using MetaDslx.CodeAnalysis.Annotations;
using MetaDslx.CodeAnalysis.Binding;
using MetaDslx.CodeAnalysis.Syntax;
using MetaDslx.CodeAnalysis.Symbols;
using MetaDslx.Languages.MetaModel.Model;

language Meta;

Main returns MetaNamespace:
	'namespace' [Name(qualifierProperty:Declarations)]Qualifier ';'
	Using*
	[Scope](declarations+=MetaModel declarations+=MetaDeclaration*)
	eof;

Using returns ImportSymbol: 'using' namespaces+=#NamespaceSymbol ';';

MetaModel: 'metamodel' Name ';';

MetaDeclaration: MetaConstant | MetaEnum | MetaClass;

MetaConstant: 'const' @type=MetaTypeReference Name ';';

MetaEnum: 'enum' Name '{' literals+=MetaEnumLiteral (',' literals+=MetaEnumLiteral)* '}';
MetaEnumLiteral: Name;

MetaClass: 
	isAbstract?='abstract'? 'class' [Name](Identifier? '$' symbolType=[Use(types: Symbol, suffixes: "Symbol")]Identifier | Identifier) 
	(':' baseTypes+=#MetaClass (',' baseTypes+=#MetaClass)*)?
	[Scope]('{' (properties+=MetaProperty | operations+=MetaOperation)* '}');

MetaProperty: 
	(isContainment?='contains' | isDerived?='derived')? @type=MetaTypeReference [Name](Identifier? '$' symbolProperty=[Value(string)]Identifier | Identifier) 
	(   'opposite' oppositeProperties+=#MetaProperty (',' oppositeProperties+=#MetaProperty)* 
	|	'subsets' subsettedProperties+=#MetaProperty (',' subsettedProperties+=#MetaProperty)* 
	|	'redefines' redefinedProperties+=#MetaProperty (',' redefinedProperties+=#MetaProperty)*
	)* 
	';';

MetaOperation: returnType=MetaTypeReference Name '(' (parameters+=MetaParameter (',' parameters+=MetaParameter)*)? ')' ';';
MetaParameter: @type=MetaTypeReference Name;

MetaTypeReference returns type
	: alt SimpleTypeReference returns type: TypeReference 
	| alt MetaArrayType: itemType=MetaTypeReference '[' ']'
	| alt MetaNullableType: innerType=MetaTypeReference '?';

TypeReference returns type: PrimitiveType | #type;

PrimitiveType returns type
	: 'object'
	| 'bool'
	| 'char'
	| 'string'
	| 'byte'
	| 'sbyte'
	| 'short'
	| 'ushort'
	| 'int'
	| 'uint'
	| 'long'
	| 'ulong'
	| 'float'
	| 'double'
	| 'decimal'
	| 'type'
	| 'symbol'
	| 'void'
	;

[Name]
Name returns void: Identifier;

[DefaultReference]
[Qualifier]
Qualifier returns void: Identifier ('.' Identifier)*;

[Identifier]
Identifier returns void: TIdentifier | TVerbatimIdentifier;

[Number]
token TInteger returns int: '0'| '1'..'9' ('0'..'9')* ;

[Number]
token TDecimal returns string: ('0'|'1'..'9' ('0'..'9')*) '.' ('0'..'9')+ ;

[DefaultIdentifier]
token TIdentifier: ('_'|'a'..'z'|'A'..'Z')+('_'|'a'..'z'|'A'..'Z'|'0'..'9')*;
[Identifier]
token TVerbatimIdentifier: '@'('_'|'a'..'z'|'A'..'Z')+('_'|'a'..'z'|'A'..'Z'|'0'..'9')*;

[DefaultSeparator]
token TComma: ',' ;

[String]
token TString returns string
    : '"' DoubleQuoteTextCharacter* '"'
    | '\'' SingleQuoteTextCharacter* '\'';

fragment DoubleQuoteTextCharacter : DoubleQuoteTextSimple | CharacterEscapeSimple | CharacterEscapeUnicode;
fragment DoubleQuoteTextSimple : ~('"' | '\\' | '\u000A' | '\u000D' | '\u0085' | '\u2028' | '\u2029');
fragment SingleQuoteTextCharacter : SingleQuoteTextSimple | CharacterEscapeSimple | CharacterEscapeUnicode;
fragment SingleQuoteTextSimple : ~('\'' | '\\' | '\u000A' | '\u000D' | '\u0085' | '\u2028' | '\u2029');
fragment CharacterEscapeSimple : '\\' CharacterEscapeSimpleCharacter;
fragment CharacterEscapeSimpleCharacter : '\'' | '"' | '\\' | '0' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v'; 
fragment CharacterEscapeUnicode
    : '\\u' HexDigit HexDigit HexDigit HexDigit
    | '\\U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit;
fragment HexDigit : ('0'..'9' | 'a'..'f' | 'A'..'F');

[Whitespace]
hidden TUtf8Bom: '\u00EF' '\u00BB' '\u00BF';

[DefaultWhitespace]
hidden TWhitespace: ('\t'|' ') +;

[DefaultEndOfLine]
hidden TLineEnd: ('\r\n' | '\r' | '\n');

[SingleLineComment]
hidden TSingleLineComment: '//' ~('\r' | '\n')*;

[MultiLineComment]
hidden TMultiLineComment: '/*' .*? '*/';

hidden TInvalidToken: .;
