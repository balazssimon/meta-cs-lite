lexer grammar MetaLexer;

LR_TComma: ',';
LR_TUtf8Bom: '\u00ef' '\u00bb' '\u00bf' -> channel(HIDDEN);
LR_KNamespace: 'namespace';
LR_TSemicolon: ';';
LR_KUsing: 'using';
LR_KMetamodel: 'metamodel';
LR_KConst: 'const';
LR_KEnum: 'enum';
LR_TLBrace: '{';
LR_TRBrace: '}';
LR_KAbstract: 'abstract';
LR_KClass: 'class';
LR_TDollar: '$';
LR_TColon: ':';
LR_KOpposite: 'opposite';
LR_KSubsets: 'subsets';
LR_KRedefines: 'redefines';
LR_TLParen: '(';
LR_TRParen: ')';
LR_TLBracket: '[';
LR_TRBracket: ']';
LR_TQuestion: '?';
LR_KBool: 'bool';
LR_KInt: 'int';
LR_KString: 'string';
LR_KType: 'type';
LR_KSymbol: 'symbol';
LR_KObject: 'object';
LR_KVoid: 'void';
LR_KContains: 'contains';
LR_KDerived: 'derived';
LR_TDot: '.';
LR_TInteger: '0' | '1'..'9' ('0'..'9')*;
LR_TDecimal: ('0' | '1'..'9' ('0'..'9')*) '.' ('0'..'9')+;
LR_TIdentifier: ('_' | 'a'..'z' | 'A'..'Z')+ ('_' | 'a'..'z' | 'A'..'Z' | '0'..'9')*;
LR_TVerbatimIdentifier: '@' ('_' | 'a'..'z' | 'A'..'Z')+ ('_' | 'a'..'z' | 'A'..'Z' | '0'..'9')*;
LR_TString: '"' FR_DoubleQuoteTextCharacter* '"' | '\'' FR_SingleQuoteTextCharacter* '\'';
LR_TWhitespace: ('\t' | ' ')+ -> channel(HIDDEN);
LR_TLineEnd: ('\r\n' | '\r' | '\n') -> channel(HIDDEN);
LR_TSingleLineComment: '//' ~('\r' | '\n')* -> channel(HIDDEN);
LR_TMultiLineComment: '/*' .*? '*/' -> channel(HIDDEN);
LR_TInvalidToken: . -> channel(HIDDEN);
fragment FR_DoubleQuoteTextCharacter: FR_DoubleQuoteTextSimple | FR_CharacterEscapeSimple | FR_CharacterEscapeUnicode;
fragment FR_DoubleQuoteTextSimple: ~('"' | '\\' | '\n' | '\r' | '\u0085' | '\u2028' | '\u2029');
fragment FR_SingleQuoteTextCharacter: FR_SingleQuoteTextSimple | FR_CharacterEscapeSimple | FR_CharacterEscapeUnicode;
fragment FR_SingleQuoteTextSimple: ~('\'' | '\\' | '\n' | '\r' | '\u0085' | '\u2028' | '\u2029');
fragment FR_CharacterEscapeSimple: '\\' FR_CharacterEscapeSimpleCharacter;
fragment FR_CharacterEscapeSimpleCharacter: '\'' | '"' | '\\' | '0' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v';
fragment FR_CharacterEscapeUnicode: '\\u' FR_HexDigit FR_HexDigit FR_HexDigit FR_HexDigit | '\\U' FR_HexDigit FR_HexDigit FR_HexDigit FR_HexDigit FR_HexDigit FR_HexDigit FR_HexDigit FR_HexDigit;
fragment FR_HexDigit: ('0'..'9' | 'a'..'f' | 'A'..'F');
