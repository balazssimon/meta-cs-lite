//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaParser : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_TUtf8Bom=2, LR_KNamespace=3, LR_TSemicolon=4, LR_KUsing=5, 
		LR_KMetamodel=6, LR_KConst=7, LR_KEnum=8, LR_TLBrace=9, LR_TRBrace=10, 
		LR_KAbstract=11, LR_KClass=12, LR_TDollar=13, LR_TColon=14, LR_KOpposite=15, 
		LR_KSubsets=16, LR_KRedefines=17, LR_TLParen=18, LR_TRParen=19, LR_TLBracket=20, 
		LR_TRBracket=21, LR_TQuestion=22, LR_KBool=23, LR_KInt=24, LR_KString=25, 
		LR_KType=26, LR_KSymbol=27, LR_KObject=28, LR_KVoid=29, LR_KContains=30, 
		LR_KDerived=31, LR_TDot=32, LR_TInteger=33, LR_TDecimal=34, LR_TIdentifier=35, 
		LR_TVerbatimIdentifier=36, LR_TString=37, LR_TWhitespace=38, LR_TLineEnd=39, 
		LR_TSingleLineComment=40, LR_TMultiLineComment=41, LR_TInvalidToken=42;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Declarations = 2, RULE_pr_MetaDeclaration = 3, 
		RULE_pr_EnumBody = 4, RULE_pr_MetaEnumLiteral = 5, RULE_pr_ClassName = 6, 
		RULE_pr_BaseClasses = 7, RULE_pr_ClassBody = 8, RULE_pr_ClassMember = 9, 
		RULE_pr_MetaProperty = 10, RULE_pr_PropertyName = 11, RULE_pr_MetaOperation = 12, 
		RULE_pr_MetaParameter = 13, RULE_pr_TypeReference = 14, RULE_pr_Name = 15, 
		RULE_pr_Qualifier = 16, RULE_pr_Identifier = 17, RULE_pr_EnumBodyEnumLiteralsBlock = 18, 
		RULE_pr_BaseClassesBaseTypesBlock = 19, RULE_pr_MetaPropertyBlock1 = 20, 
		RULE_pr_PropertyOppositeOppositePropertiesBlock1 = 21, RULE_pr_PropertySubsetsSubsettedPropertiesBlock1 = 22, 
		RULE_pr_PropertyRedefinesRedefinedPropertiesBlock1 = 23, RULE_pr_MetaOperationParameterListBlock = 24, 
		RULE_pr_QualifierQualifierBlock = 25;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Declarations", "pr_MetaDeclaration", "pr_EnumBody", 
		"pr_MetaEnumLiteral", "pr_ClassName", "pr_BaseClasses", "pr_ClassBody", 
		"pr_ClassMember", "pr_MetaProperty", "pr_PropertyName", "pr_MetaOperation", 
		"pr_MetaParameter", "pr_TypeReference", "pr_Name", "pr_Qualifier", "pr_Identifier", 
		"pr_EnumBodyEnumLiteralsBlock", "pr_BaseClassesBaseTypesBlock", "pr_MetaPropertyBlock1", 
		"pr_PropertyOppositeOppositePropertiesBlock1", "pr_PropertySubsetsSubsettedPropertiesBlock1", 
		"pr_PropertyRedefinesRedefinedPropertiesBlock1", "pr_MetaOperationParameterListBlock", 
		"pr_QualifierQualifierBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", null, "'namespace'", "';'", "'using'", "'metamodel'", "'const'", 
		"'enum'", "'{'", "'}'", "'abstract'", "'class'", "'$'", "':'", "'opposite'", 
		"'subsets'", "'redefines'", "'('", "')'", "'['", "']'", "'?'", "'bool'", 
		"'int'", "'string'", "'type'", "'symbol'", "'object'", "'void'", "'contains'", 
		"'derived'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_TUtf8Bom", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", 
		"LR_KMetamodel", "LR_KConst", "LR_KEnum", "LR_TLBrace", "LR_TRBrace", 
		"LR_KAbstract", "LR_KClass", "LR_TDollar", "LR_TColon", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TLParen", "LR_TRParen", "LR_TLBracket", 
		"LR_TRBracket", "LR_TQuestion", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", 
		"LR_KSymbol", "LR_KObject", "LR_KVoid", "LR_KContains", "LR_KDerived", 
		"LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken e_KNamespace;
		public Pr_QualifierContext e_Name;
		public IToken e_TSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _e_UsingList = new List<Pr_UsingContext>();
		public Pr_DeclarationsContext e_Declarations;
		public IToken e_EndOfFileToken;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(MetaParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationsContext pr_Declarations() {
			return GetRuleContext<Pr_DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MetaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_localctx.e_KNamespace = Match(LR_KNamespace);
			State = 53;
			_localctx.e_Name = pr_Qualifier();
			State = 54;
			_localctx.e_TSemicolon = Match(LR_TSemicolon);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 55;
				_localctx._pr_Using = pr_Using();
				_localctx._e_UsingList.Add(_localctx._pr_Using);
				}
				}
				State = 60;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 61;
			_localctx.e_Declarations = pr_Declarations();
			State = 62;
			_localctx.e_EndOfFileToken = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken e_KUsing;
		public Pr_QualifierContext e_Namespaces;
		public IToken e_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(MetaParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_localctx.e_KUsing = Match(LR_KUsing);
			State = 65;
			_localctx.e_Namespaces = pr_Qualifier();
			State = 66;
			_localctx.e_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_DeclarationsContext : ParserRuleContext {
		public Pr_MetaDeclarationContext _pr_MetaDeclaration;
		public IList<Pr_MetaDeclarationContext> _e_Declarations = new List<Pr_MetaDeclarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaDeclarationContext[] pr_MetaDeclaration() {
			return GetRuleContexts<Pr_MetaDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaDeclarationContext pr_MetaDeclaration(int i) {
			return GetRuleContext<Pr_MetaDeclarationContext>(i);
		}
		public Pr_DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_DeclarationsContext pr_Declarations() {
		Pr_DeclarationsContext _localctx = new Pr_DeclarationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 6592L) != 0)) {
				{
				{
				State = 68;
				_localctx._pr_MetaDeclaration = pr_MetaDeclaration();
				_localctx._e_Declarations.Add(_localctx._pr_MetaDeclaration);
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaDeclarationContext : ParserRuleContext {
		public Pr_MetaDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaDeclaration; } }
	 
		public Pr_MetaDeclarationContext() { }
		public virtual void CopyFrom(Pr_MetaDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaModelContext : Pr_MetaDeclarationContext {
		public IToken e_KMetamodel;
		public Pr_NameContext e_Name;
		public IToken e_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KMetamodel() { return GetToken(MetaParser.LR_KMetamodel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		public Pr_MetaModelContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaModel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaEnumContext : Pr_MetaDeclarationContext {
		public IToken e_KEnum;
		public Pr_NameContext e_Name2;
		public Pr_EnumBodyContext e_EnumBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KEnum() { return GetToken(MetaParser.LR_KEnum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumBodyContext pr_EnumBody() {
			return GetRuleContext<Pr_EnumBodyContext>(0);
		}
		public Pr_MetaEnumContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaConstantContext : Pr_MetaDeclarationContext {
		public IToken e_KConst;
		public Pr_TypeReferenceContext e_Type;
		public Pr_NameContext e_Name1;
		public IToken e_TSemicolon1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KConst() { return GetToken(MetaParser.LR_KConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		public Pr_MetaConstantContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaClassContext : Pr_MetaDeclarationContext {
		public IToken e_IsAbstract;
		public IToken e_KClass;
		public Pr_ClassNameContext e_ClassName;
		public Pr_BaseClassesContext e_BaseClasses;
		public Pr_ClassBodyContext e_ClassBody;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KClass() { return GetToken(MetaParser.LR_KClass, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ClassNameContext pr_ClassName() {
			return GetRuleContext<Pr_ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ClassBodyContext pr_ClassBody() {
			return GetRuleContext<Pr_ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAbstract() { return GetToken(MetaParser.LR_KAbstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BaseClassesContext pr_BaseClasses() {
			return GetRuleContext<Pr_BaseClassesContext>(0);
		}
		public Pr_MetaClassContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaDeclarationContext pr_MetaDeclaration() {
		Pr_MetaDeclarationContext _localctx = new Pr_MetaDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_MetaDeclaration);
		int _la;
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KMetamodel:
				_localctx = new Pr_MetaModelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				((Pr_MetaModelContext)_localctx).e_KMetamodel = Match(LR_KMetamodel);
				State = 75;
				((Pr_MetaModelContext)_localctx).e_Name = pr_Name();
				State = 76;
				((Pr_MetaModelContext)_localctx).e_TSemicolon = Match(LR_TSemicolon);
				}
				break;
			case LR_KConst:
				_localctx = new Pr_MetaConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				((Pr_MetaConstantContext)_localctx).e_KConst = Match(LR_KConst);
				State = 79;
				((Pr_MetaConstantContext)_localctx).e_Type = pr_TypeReference(0);
				State = 80;
				((Pr_MetaConstantContext)_localctx).e_Name1 = pr_Name();
				State = 81;
				((Pr_MetaConstantContext)_localctx).e_TSemicolon1 = Match(LR_TSemicolon);
				}
				break;
			case LR_KEnum:
				_localctx = new Pr_MetaEnumContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 83;
				((Pr_MetaEnumContext)_localctx).e_KEnum = Match(LR_KEnum);
				State = 84;
				((Pr_MetaEnumContext)_localctx).e_Name2 = pr_Name();
				State = 85;
				((Pr_MetaEnumContext)_localctx).e_EnumBody = pr_EnumBody();
				}
				break;
			case LR_KAbstract:
			case LR_KClass:
				_localctx = new Pr_MetaClassContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KAbstract) {
					{
					State = 87;
					((Pr_MetaClassContext)_localctx).e_IsAbstract = Match(LR_KAbstract);
					}
				}

				State = 90;
				((Pr_MetaClassContext)_localctx).e_KClass = Match(LR_KClass);
				State = 91;
				((Pr_MetaClassContext)_localctx).e_ClassName = pr_ClassName();
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_TColon) {
					{
					State = 92;
					((Pr_MetaClassContext)_localctx).e_BaseClasses = pr_BaseClasses();
					}
				}

				State = 95;
				((Pr_MetaClassContext)_localctx).e_ClassBody = pr_ClassBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumBodyContext : ParserRuleContext {
		public IToken e_TLBrace;
		public Pr_MetaEnumLiteralContext e_Literals1;
		public IToken _LR_TComma;
		public IList<IToken> _e_TComma1 = new List<IToken>();
		public Pr_MetaEnumLiteralContext _pr_MetaEnumLiteral;
		public IList<Pr_MetaEnumLiteralContext> _e_Literals2 = new List<Pr_MetaEnumLiteralContext>();
		public IToken e_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(MetaParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext[] pr_MetaEnumLiteral() {
			return GetRuleContexts<Pr_MetaEnumLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral(int i) {
			return GetRuleContext<Pr_MetaEnumLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(MetaParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumBodyContext pr_EnumBody() {
		Pr_EnumBodyContext _localctx = new Pr_EnumBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_EnumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_localctx.e_TLBrace = Match(LR_TLBrace);
			State = 100;
			_localctx.e_Literals1 = pr_MetaEnumLiteral();
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 101;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._e_TComma1.Add(_localctx._LR_TComma);
				State = 102;
				_localctx._pr_MetaEnumLiteral = pr_MetaEnumLiteral();
				_localctx._e_Literals2.Add(_localctx._pr_MetaEnumLiteral);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108;
			_localctx.e_TRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaEnumLiteralContext : ParserRuleContext {
		public Pr_NameContext e_Name;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_MetaEnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaEnumLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
		Pr_MetaEnumLiteralContext _localctx = new Pr_MetaEnumLiteralContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_MetaEnumLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			_localctx.e_Name = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ClassNameContext : ParserRuleContext {
		public Pr_ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ClassName; } }
	 
		public Pr_ClassNameContext() { }
		public virtual void CopyFrom(Pr_ClassNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ClassNameAlt1Context : Pr_ClassNameContext {
		public Pr_IdentifierContext e_Identifier;
		public IToken e_TDollar;
		public Pr_IdentifierContext e_SymbolType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDollar() { return GetToken(MetaParser.LR_TDollar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext[] pr_Identifier() {
			return GetRuleContexts<Pr_IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier(int i) {
			return GetRuleContext<Pr_IdentifierContext>(i);
		}
		public Pr_ClassNameAlt1Context(Pr_ClassNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassNameAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ClassNameAlt2Context : Pr_ClassNameContext {
		public Pr_IdentifierContext e_Identifier1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_ClassNameAlt2Context(Pr_ClassNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassNameAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ClassNameContext pr_ClassName() {
		Pr_ClassNameContext _localctx = new Pr_ClassNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_ClassName);
		int _la;
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new Pr_ClassNameAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) {
					{
					State = 112;
					((Pr_ClassNameAlt1Context)_localctx).e_Identifier = pr_Identifier();
					}
				}

				State = 115;
				((Pr_ClassNameAlt1Context)_localctx).e_TDollar = Match(LR_TDollar);
				State = 116;
				((Pr_ClassNameAlt1Context)_localctx).e_SymbolType = pr_Identifier();
				}
				break;
			case 2:
				_localctx = new Pr_ClassNameAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 117;
				((Pr_ClassNameAlt2Context)_localctx).e_Identifier1 = pr_Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BaseClassesContext : ParserRuleContext {
		public IToken e_TColon;
		public Pr_QualifierContext e_BaseTypes1;
		public IToken _LR_TComma;
		public IList<IToken> _e_TComma1 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _e_BaseTypes2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(MetaParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_BaseClassesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BaseClasses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BaseClasses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BaseClassesContext pr_BaseClasses() {
		Pr_BaseClassesContext _localctx = new Pr_BaseClassesContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_BaseClasses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			_localctx.e_TColon = Match(LR_TColon);
			State = 121;
			_localctx.e_BaseTypes1 = pr_Qualifier();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 122;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._e_TComma1.Add(_localctx._LR_TComma);
				State = 123;
				_localctx._pr_Qualifier = pr_Qualifier();
				_localctx._e_BaseTypes2.Add(_localctx._pr_Qualifier);
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ClassBodyContext : ParserRuleContext {
		public IToken e_TLBrace;
		public Pr_ClassMemberContext _pr_ClassMember;
		public IList<Pr_ClassMemberContext> _e_ClassMemberList = new List<Pr_ClassMemberContext>();
		public IToken e_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(MetaParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(MetaParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ClassMemberContext[] pr_ClassMember() {
			return GetRuleContexts<Pr_ClassMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ClassMemberContext pr_ClassMember(int i) {
			return GetRuleContext<Pr_ClassMemberContext>(i);
		}
		public Pr_ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ClassBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ClassBodyContext pr_ClassBody() {
		Pr_ClassBodyContext _localctx = new Pr_ClassBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_ClassBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			_localctx.e_TLBrace = Match(LR_TLBrace);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 107365793792L) != 0)) {
				{
				{
				State = 130;
				_localctx._pr_ClassMember = pr_ClassMember();
				_localctx._e_ClassMemberList.Add(_localctx._pr_ClassMember);
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 136;
			_localctx.e_TRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ClassMemberContext : ParserRuleContext {
		public Pr_ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ClassMember; } }
	 
		public Pr_ClassMemberContext() { }
		public virtual void CopyFrom(Pr_ClassMemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ClassMemberAlt2Context : Pr_ClassMemberContext {
		public Pr_MetaOperationContext e_Operations;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaOperationContext pr_MetaOperation() {
			return GetRuleContext<Pr_MetaOperationContext>(0);
		}
		public Pr_ClassMemberAlt2Context(Pr_ClassMemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassMemberAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ClassMemberAlt1Context : Pr_ClassMemberContext {
		public Pr_MetaPropertyContext e_Properties;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyContext pr_MetaProperty() {
			return GetRuleContext<Pr_MetaPropertyContext>(0);
		}
		public Pr_ClassMemberAlt1Context(Pr_ClassMemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassMemberAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ClassMemberContext pr_ClassMember() {
		Pr_ClassMemberContext _localctx = new Pr_ClassMemberContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_ClassMember);
		try {
			State = 140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new Pr_ClassMemberAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 138;
				((Pr_ClassMemberAlt1Context)_localctx).e_Properties = pr_MetaProperty();
				}
				break;
			case 2:
				_localctx = new Pr_ClassMemberAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139;
				((Pr_ClassMemberAlt2Context)_localctx).e_Operations = pr_MetaOperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyContext : ParserRuleContext {
		public IToken e_Tokens;
		public Pr_TypeReferenceContext e_Type;
		public Pr_PropertyNameContext e_PropertyName;
		public Pr_MetaPropertyBlock1Context _pr_MetaPropertyBlock1;
		public IList<Pr_MetaPropertyBlock1Context> _e_Block = new List<Pr_MetaPropertyBlock1Context>();
		public IToken e_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyNameContext pr_PropertyName() {
			return GetRuleContext<Pr_PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyBlock1Context[] pr_MetaPropertyBlock1() {
			return GetRuleContexts<Pr_MetaPropertyBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyBlock1Context pr_MetaPropertyBlock1(int i) {
			return GetRuleContext<Pr_MetaPropertyBlock1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KContains() { return GetToken(MetaParser.LR_KContains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDerived() { return GetToken(MetaParser.LR_KDerived, 0); }
		public Pr_MetaPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyContext pr_MetaProperty() {
		Pr_MetaPropertyContext _localctx = new Pr_MetaPropertyContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_MetaProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KContains || _la==LR_KDerived) {
				{
				State = 142;
				_localctx.e_Tokens = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LR_KContains || _la==LR_KDerived) ) {
					_localctx.e_Tokens = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 145;
			_localctx.e_Type = pr_TypeReference(0);
			State = 146;
			_localctx.e_PropertyName = pr_PropertyName();
			State = 150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 229376L) != 0)) {
				{
				{
				State = 147;
				_localctx._pr_MetaPropertyBlock1 = pr_MetaPropertyBlock1();
				_localctx._e_Block.Add(_localctx._pr_MetaPropertyBlock1);
				}
				}
				State = 152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 153;
			_localctx.e_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyNameContext : ParserRuleContext {
		public Pr_PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyName; } }
	 
		public Pr_PropertyNameContext() { }
		public virtual void CopyFrom(Pr_PropertyNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_PropertyNameAlt2Context : Pr_PropertyNameContext {
		public Pr_IdentifierContext e_Identifier1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_PropertyNameAlt2Context(Pr_PropertyNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyNameAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PropertyNameAlt1Context : Pr_PropertyNameContext {
		public Pr_IdentifierContext e_Identifier;
		public IToken e_TDollar;
		public Pr_IdentifierContext e_SymbolProperty;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDollar() { return GetToken(MetaParser.LR_TDollar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext[] pr_Identifier() {
			return GetRuleContexts<Pr_IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier(int i) {
			return GetRuleContext<Pr_IdentifierContext>(i);
		}
		public Pr_PropertyNameAlt1Context(Pr_PropertyNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyNameAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyNameContext pr_PropertyName() {
		Pr_PropertyNameContext _localctx = new Pr_PropertyNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_PropertyName);
		int _la;
		try {
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new Pr_PropertyNameAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) {
					{
					State = 155;
					((Pr_PropertyNameAlt1Context)_localctx).e_Identifier = pr_Identifier();
					}
				}

				State = 158;
				((Pr_PropertyNameAlt1Context)_localctx).e_TDollar = Match(LR_TDollar);
				State = 159;
				((Pr_PropertyNameAlt1Context)_localctx).e_SymbolProperty = pr_Identifier();
				}
				break;
			case 2:
				_localctx = new Pr_PropertyNameAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 160;
				((Pr_PropertyNameAlt2Context)_localctx).e_Identifier1 = pr_Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaOperationContext : ParserRuleContext {
		public Pr_TypeReferenceContext e_ReturnType;
		public Pr_NameContext e_Name;
		public IToken e_TLParen;
		public Pr_MetaParameterContext e_Parameters1;
		public IToken _LR_TComma;
		public IList<IToken> _e_TComma1 = new List<IToken>();
		public Pr_MetaParameterContext _pr_MetaParameter;
		public IList<Pr_MetaParameterContext> _e_Parameters2 = new List<Pr_MetaParameterContext>();
		public IToken e_TRParen;
		public IToken e_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(MetaParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaParameterContext[] pr_MetaParameter() {
			return GetRuleContexts<Pr_MetaParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaParameterContext pr_MetaParameter(int i) {
			return GetRuleContext<Pr_MetaParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(MetaParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_MetaOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaOperationContext pr_MetaOperation() {
		Pr_MetaOperationContext _localctx = new Pr_MetaOperationContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_MetaOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			_localctx.e_ReturnType = pr_TypeReference(0);
			State = 164;
			_localctx.e_Name = pr_Name();
			State = 165;
			_localctx.e_TLParen = Match(LR_TLParen);
			State = 166;
			_localctx.e_Parameters1 = pr_MetaParameter();
			State = 171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 167;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._e_TComma1.Add(_localctx._LR_TComma);
				State = 168;
				_localctx._pr_MetaParameter = pr_MetaParameter();
				_localctx._e_Parameters2.Add(_localctx._pr_MetaParameter);
				}
				}
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 174;
			_localctx.e_TRParen = Match(LR_TRParen);
			State = 175;
			_localctx.e_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaParameterContext : ParserRuleContext {
		public Pr_TypeReferenceContext e_Type;
		public Pr_NameContext e_Name;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_MetaParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaParameterContext pr_MetaParameter() {
		Pr_MetaParameterContext _localctx = new Pr_MetaParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_MetaParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			_localctx.e_Type = pr_TypeReference(0);
			State = 178;
			_localctx.e_Name = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TypeReferenceContext : ParserRuleContext {
		public Pr_TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TypeReference; } }
	 
		public Pr_TypeReferenceContext() { }
		public virtual void CopyFrom(Pr_TypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaNullableTypeContext : Pr_TypeReferenceContext {
		public Pr_TypeReferenceContext e_InnerType;
		public IToken e_TQuestion;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(MetaParser.LR_TQuestion, 0); }
		public Pr_MetaNullableTypeContext(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaNullableType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_TypeReferenceTokensContext : Pr_TypeReferenceContext {
		public IToken e_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBool() { return GetToken(MetaParser.LR_KBool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KInt() { return GetToken(MetaParser.LR_KInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KString() { return GetToken(MetaParser.LR_KString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KType() { return GetToken(MetaParser.LR_KType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSymbol() { return GetToken(MetaParser.LR_KSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KObject() { return GetToken(MetaParser.LR_KObject, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KVoid() { return GetToken(MetaParser.LR_KVoid, 0); }
		public Pr_TypeReferenceTokensContext(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReferenceTokens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_SimpleTypeReferenceAlt2Context : Pr_TypeReferenceContext {
		public Pr_QualifierContext e_Qualifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_SimpleTypeReferenceAlt2Context(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_SimpleTypeReferenceAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaArrayTypeContext : Pr_TypeReferenceContext {
		public Pr_TypeReferenceContext e_ItemType;
		public IToken e_TLBracket;
		public IToken e_TRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(MetaParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(MetaParser.LR_TRBracket, 0); }
		public Pr_MetaArrayTypeContext(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TypeReferenceContext pr_TypeReference() {
		return pr_TypeReference(0);
	}

	private Pr_TypeReferenceContext pr_TypeReference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Pr_TypeReferenceContext _localctx = new Pr_TypeReferenceContext(Context, _parentState);
		Pr_TypeReferenceContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_pr_TypeReference, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KBool:
			case LR_KInt:
			case LR_KString:
			case LR_KType:
			case LR_KSymbol:
			case LR_KObject:
			case LR_KVoid:
				{
				_localctx = new Pr_TypeReferenceTokensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 181;
				((Pr_TypeReferenceTokensContext)_localctx).e_Token = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1065353216L) != 0)) ) {
					((Pr_TypeReferenceTokensContext)_localctx).e_Token = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				{
				_localctx = new Pr_SimpleTypeReferenceAlt2Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 182;
				((Pr_SimpleTypeReferenceAlt2Context)_localctx).e_Qualifier = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 192;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 190;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
					case 1:
						{
						_localctx = new Pr_MetaArrayTypeContext(new Pr_TypeReferenceContext(_parentctx, _parentState));
						((Pr_MetaArrayTypeContext)_localctx).e_ItemType = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_pr_TypeReference);
						State = 185;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 186;
						((Pr_MetaArrayTypeContext)_localctx).e_TLBracket = Match(LR_TLBracket);
						State = 187;
						((Pr_MetaArrayTypeContext)_localctx).e_TRBracket = Match(LR_TRBracket);
						}
						break;
					case 2:
						{
						_localctx = new Pr_MetaNullableTypeContext(new Pr_TypeReferenceContext(_parentctx, _parentState));
						((Pr_MetaNullableTypeContext)_localctx).e_InnerType = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_pr_TypeReference);
						State = 188;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 189;
						((Pr_MetaNullableTypeContext)_localctx).e_TQuestion = Match(LR_TQuestion);
						}
						break;
					}
					} 
				}
				State = 194;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext e_Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 30, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_localctx.e_Identifier = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext e_Identifier1;
		public IToken _LR_TDot;
		public IList<IToken> _e_TDot1 = new List<IToken>();
		public Pr_IdentifierContext _pr_Identifier;
		public IList<Pr_IdentifierContext> _e_Identifier2 = new List<Pr_IdentifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext[] pr_Identifier() {
			return GetRuleContexts<Pr_IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier(int i) {
			return GetRuleContext<Pr_IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TDot() { return GetTokens(MetaParser.LR_TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot(int i) {
			return GetToken(MetaParser.LR_TDot, i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_pr_Qualifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_localctx.e_Identifier1 = pr_Identifier();
			State = 202;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 198;
					_localctx._LR_TDot = Match(LR_TDot);
					_localctx._e_TDot1.Add(_localctx._LR_TDot);
					State = 199;
					_localctx._pr_Identifier = pr_Identifier();
					_localctx._e_Identifier2.Add(_localctx._pr_Identifier);
					}
					} 
				}
				State = 204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public IToken e_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(MetaParser.LR_TIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TVerbatimIdentifier() { return GetToken(MetaParser.LR_TVerbatimIdentifier, 0); }
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_pr_Identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205;
			_localctx.e_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) ) {
				_localctx.e_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumBodyEnumLiteralsBlockContext : ParserRuleContext {
		public IToken e_TComma1;
		public Pr_MetaEnumLiteralContext e_Literals2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
			return GetRuleContext<Pr_MetaEnumLiteralContext>(0);
		}
		public Pr_EnumBodyEnumLiteralsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumBodyEnumLiteralsBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumBodyEnumLiteralsBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumBodyEnumLiteralsBlockContext pr_EnumBodyEnumLiteralsBlock() {
		Pr_EnumBodyEnumLiteralsBlockContext _localctx = new Pr_EnumBodyEnumLiteralsBlockContext(Context, State);
		EnterRule(_localctx, 36, RULE_pr_EnumBodyEnumLiteralsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_localctx.e_TComma1 = Match(LR_TComma);
			State = 208;
			_localctx.e_Literals2 = pr_MetaEnumLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BaseClassesBaseTypesBlockContext : ParserRuleContext {
		public IToken e_TComma1;
		public Pr_QualifierContext e_BaseTypes2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_BaseClassesBaseTypesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BaseClassesBaseTypesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BaseClassesBaseTypesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BaseClassesBaseTypesBlockContext pr_BaseClassesBaseTypesBlock() {
		Pr_BaseClassesBaseTypesBlockContext _localctx = new Pr_BaseClassesBaseTypesBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_pr_BaseClassesBaseTypesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_localctx.e_TComma1 = Match(LR_TComma);
			State = 211;
			_localctx.e_BaseTypes2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyBlock1Context : ParserRuleContext {
		public Pr_MetaPropertyBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaPropertyBlock1; } }
	 
		public Pr_MetaPropertyBlock1Context() { }
		public virtual void CopyFrom(Pr_MetaPropertyBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_PropertyRedefinesContext : Pr_MetaPropertyBlock1Context {
		public IToken e_KRedefines;
		public Pr_QualifierContext e_RedefinedProperties1;
		public IToken _LR_TComma;
		public IList<IToken> _e_TComma3 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _e_RedefinedProperties2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KRedefines() { return GetToken(MetaParser.LR_KRedefines, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_PropertyRedefinesContext(Pr_MetaPropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyRedefines(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PropertySubsetsContext : Pr_MetaPropertyBlock1Context {
		public IToken e_KSubsets;
		public Pr_QualifierContext e_SubsettedProperties1;
		public IToken _LR_TComma;
		public IList<IToken> _e_TComma2 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _e_SubsettedProperties2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSubsets() { return GetToken(MetaParser.LR_KSubsets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_PropertySubsetsContext(Pr_MetaPropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertySubsets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PropertyOppositeContext : Pr_MetaPropertyBlock1Context {
		public IToken e_KOpposite;
		public Pr_QualifierContext e_OppositeProperties1;
		public IToken _LR_TComma;
		public IList<IToken> _e_TComma1 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _e_OppositeProperties2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KOpposite() { return GetToken(MetaParser.LR_KOpposite, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_PropertyOppositeContext(Pr_MetaPropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyOpposite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyBlock1Context pr_MetaPropertyBlock1() {
		Pr_MetaPropertyBlock1Context _localctx = new Pr_MetaPropertyBlock1Context(Context, State);
		EnterRule(_localctx, 40, RULE_pr_MetaPropertyBlock1);
		int _la;
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KOpposite:
				_localctx = new Pr_PropertyOppositeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				((Pr_PropertyOppositeContext)_localctx).e_KOpposite = Match(LR_KOpposite);
				State = 214;
				((Pr_PropertyOppositeContext)_localctx).e_OppositeProperties1 = pr_Qualifier();
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 215;
					((Pr_PropertyOppositeContext)_localctx)._LR_TComma = Match(LR_TComma);
					((Pr_PropertyOppositeContext)_localctx)._e_TComma1.Add(((Pr_PropertyOppositeContext)_localctx)._LR_TComma);
					State = 216;
					((Pr_PropertyOppositeContext)_localctx)._pr_Qualifier = pr_Qualifier();
					((Pr_PropertyOppositeContext)_localctx)._e_OppositeProperties2.Add(((Pr_PropertyOppositeContext)_localctx)._pr_Qualifier);
					}
					}
					State = 221;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case LR_KSubsets:
				_localctx = new Pr_PropertySubsetsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				((Pr_PropertySubsetsContext)_localctx).e_KSubsets = Match(LR_KSubsets);
				State = 223;
				((Pr_PropertySubsetsContext)_localctx).e_SubsettedProperties1 = pr_Qualifier();
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 224;
					((Pr_PropertySubsetsContext)_localctx)._LR_TComma = Match(LR_TComma);
					((Pr_PropertySubsetsContext)_localctx)._e_TComma2.Add(((Pr_PropertySubsetsContext)_localctx)._LR_TComma);
					State = 225;
					((Pr_PropertySubsetsContext)_localctx)._pr_Qualifier = pr_Qualifier();
					((Pr_PropertySubsetsContext)_localctx)._e_SubsettedProperties2.Add(((Pr_PropertySubsetsContext)_localctx)._pr_Qualifier);
					}
					}
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case LR_KRedefines:
				_localctx = new Pr_PropertyRedefinesContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 231;
				((Pr_PropertyRedefinesContext)_localctx).e_KRedefines = Match(LR_KRedefines);
				State = 232;
				((Pr_PropertyRedefinesContext)_localctx).e_RedefinedProperties1 = pr_Qualifier();
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 233;
					((Pr_PropertyRedefinesContext)_localctx)._LR_TComma = Match(LR_TComma);
					((Pr_PropertyRedefinesContext)_localctx)._e_TComma3.Add(((Pr_PropertyRedefinesContext)_localctx)._LR_TComma);
					State = 234;
					((Pr_PropertyRedefinesContext)_localctx)._pr_Qualifier = pr_Qualifier();
					((Pr_PropertyRedefinesContext)_localctx)._e_RedefinedProperties2.Add(((Pr_PropertyRedefinesContext)_localctx)._pr_Qualifier);
					}
					}
					State = 239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyOppositeOppositePropertiesBlock1Context : ParserRuleContext {
		public IToken e_TComma1;
		public Pr_QualifierContext e_OppositeProperties2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PropertyOppositeOppositePropertiesBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyOppositeOppositePropertiesBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyOppositeOppositePropertiesBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyOppositeOppositePropertiesBlock1Context pr_PropertyOppositeOppositePropertiesBlock1() {
		Pr_PropertyOppositeOppositePropertiesBlock1Context _localctx = new Pr_PropertyOppositeOppositePropertiesBlock1Context(Context, State);
		EnterRule(_localctx, 42, RULE_pr_PropertyOppositeOppositePropertiesBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			_localctx.e_TComma1 = Match(LR_TComma);
			State = 243;
			_localctx.e_OppositeProperties2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertySubsetsSubsettedPropertiesBlock1Context : ParserRuleContext {
		public IToken e_TComma2;
		public Pr_QualifierContext e_SubsettedProperties2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PropertySubsetsSubsettedPropertiesBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertySubsetsSubsettedPropertiesBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertySubsetsSubsettedPropertiesBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertySubsetsSubsettedPropertiesBlock1Context pr_PropertySubsetsSubsettedPropertiesBlock1() {
		Pr_PropertySubsetsSubsettedPropertiesBlock1Context _localctx = new Pr_PropertySubsetsSubsettedPropertiesBlock1Context(Context, State);
		EnterRule(_localctx, 44, RULE_pr_PropertySubsetsSubsettedPropertiesBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			_localctx.e_TComma2 = Match(LR_TComma);
			State = 246;
			_localctx.e_SubsettedProperties2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyRedefinesRedefinedPropertiesBlock1Context : ParserRuleContext {
		public IToken e_TComma3;
		public Pr_QualifierContext e_RedefinedProperties2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PropertyRedefinesRedefinedPropertiesBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyRedefinesRedefinedPropertiesBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyRedefinesRedefinedPropertiesBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyRedefinesRedefinedPropertiesBlock1Context pr_PropertyRedefinesRedefinedPropertiesBlock1() {
		Pr_PropertyRedefinesRedefinedPropertiesBlock1Context _localctx = new Pr_PropertyRedefinesRedefinedPropertiesBlock1Context(Context, State);
		EnterRule(_localctx, 46, RULE_pr_PropertyRedefinesRedefinedPropertiesBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			_localctx.e_TComma3 = Match(LR_TComma);
			State = 249;
			_localctx.e_RedefinedProperties2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaOperationParameterListBlockContext : ParserRuleContext {
		public IToken e_TComma1;
		public Pr_MetaParameterContext e_Parameters2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaParameterContext pr_MetaParameter() {
			return GetRuleContext<Pr_MetaParameterContext>(0);
		}
		public Pr_MetaOperationParameterListBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaOperationParameterListBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaOperationParameterListBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaOperationParameterListBlockContext pr_MetaOperationParameterListBlock() {
		Pr_MetaOperationParameterListBlockContext _localctx = new Pr_MetaOperationParameterListBlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_pr_MetaOperationParameterListBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			_localctx.e_TComma1 = Match(LR_TComma);
			State = 252;
			_localctx.e_Parameters2 = pr_MetaParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierQualifierBlockContext : ParserRuleContext {
		public IToken e_TDot1;
		public Pr_IdentifierContext e_Identifier2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(MetaParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierQualifierBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierQualifierBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierQualifierBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierQualifierBlockContext pr_QualifierQualifierBlock() {
		Pr_QualifierQualifierBlockContext _localctx = new Pr_QualifierQualifierBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_pr_QualifierQualifierBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			_localctx.e_TDot1 = Match(LR_TDot);
			State = 255;
			_localctx.e_Identifier2 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return pr_TypeReference_sempred((Pr_TypeReferenceContext)_localctx, predIndex);
		}
		return true;
	}
	private bool pr_TypeReference_sempred(Pr_TypeReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,42,258,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,1,0,5,0,57,8,0,10,
		0,12,0,60,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,5,2,70,8,2,10,2,12,2,73,
		9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,89,8,3,
		1,3,1,3,1,3,3,3,94,8,3,1,3,1,3,3,3,98,8,3,1,4,1,4,1,4,1,4,5,4,104,8,4,
		10,4,12,4,107,9,4,1,4,1,4,1,5,1,5,1,6,3,6,114,8,6,1,6,1,6,1,6,3,6,119,
		8,6,1,7,1,7,1,7,1,7,5,7,125,8,7,10,7,12,7,128,9,7,1,8,1,8,5,8,132,8,8,
		10,8,12,8,135,9,8,1,8,1,8,1,9,1,9,3,9,141,8,9,1,10,3,10,144,8,10,1,10,
		1,10,1,10,5,10,149,8,10,10,10,12,10,152,9,10,1,10,1,10,1,11,3,11,157,8,
		11,1,11,1,11,1,11,3,11,162,8,11,1,12,1,12,1,12,1,12,1,12,1,12,5,12,170,
		8,12,10,12,12,12,173,9,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,
		3,14,184,8,14,1,14,1,14,1,14,1,14,1,14,5,14,191,8,14,10,14,12,14,194,9,
		14,1,15,1,15,1,16,1,16,1,16,5,16,201,8,16,10,16,12,16,204,9,16,1,17,1,
		17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,218,8,20,10,
		20,12,20,221,9,20,1,20,1,20,1,20,1,20,5,20,227,8,20,10,20,12,20,230,9,
		20,1,20,1,20,1,20,1,20,5,20,236,8,20,10,20,12,20,239,9,20,3,20,241,8,20,
		1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
		1,25,1,25,0,1,28,26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,44,46,48,50,0,3,1,0,30,31,1,0,23,29,1,0,35,36,258,0,52,1,0,0,
		0,2,64,1,0,0,0,4,71,1,0,0,0,6,97,1,0,0,0,8,99,1,0,0,0,10,110,1,0,0,0,12,
		118,1,0,0,0,14,120,1,0,0,0,16,129,1,0,0,0,18,140,1,0,0,0,20,143,1,0,0,
		0,22,161,1,0,0,0,24,163,1,0,0,0,26,177,1,0,0,0,28,183,1,0,0,0,30,195,1,
		0,0,0,32,197,1,0,0,0,34,205,1,0,0,0,36,207,1,0,0,0,38,210,1,0,0,0,40,240,
		1,0,0,0,42,242,1,0,0,0,44,245,1,0,0,0,46,248,1,0,0,0,48,251,1,0,0,0,50,
		254,1,0,0,0,52,53,5,3,0,0,53,54,3,32,16,0,54,58,5,4,0,0,55,57,3,2,1,0,
		56,55,1,0,0,0,57,60,1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,61,1,0,0,0,
		60,58,1,0,0,0,61,62,3,4,2,0,62,63,5,0,0,1,63,1,1,0,0,0,64,65,5,5,0,0,65,
		66,3,32,16,0,66,67,5,4,0,0,67,3,1,0,0,0,68,70,3,6,3,0,69,68,1,0,0,0,70,
		73,1,0,0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,5,1,0,0,0,73,71,1,0,0,0,74,75,
		5,6,0,0,75,76,3,30,15,0,76,77,5,4,0,0,77,98,1,0,0,0,78,79,5,7,0,0,79,80,
		3,28,14,0,80,81,3,30,15,0,81,82,5,4,0,0,82,98,1,0,0,0,83,84,5,8,0,0,84,
		85,3,30,15,0,85,86,3,8,4,0,86,98,1,0,0,0,87,89,5,11,0,0,88,87,1,0,0,0,
		88,89,1,0,0,0,89,90,1,0,0,0,90,91,5,12,0,0,91,93,3,12,6,0,92,94,3,14,7,
		0,93,92,1,0,0,0,93,94,1,0,0,0,94,95,1,0,0,0,95,96,3,16,8,0,96,98,1,0,0,
		0,97,74,1,0,0,0,97,78,1,0,0,0,97,83,1,0,0,0,97,88,1,0,0,0,98,7,1,0,0,0,
		99,100,5,9,0,0,100,105,3,10,5,0,101,102,5,1,0,0,102,104,3,10,5,0,103,101,
		1,0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,108,1,0,0,
		0,107,105,1,0,0,0,108,109,5,10,0,0,109,9,1,0,0,0,110,111,3,30,15,0,111,
		11,1,0,0,0,112,114,3,34,17,0,113,112,1,0,0,0,113,114,1,0,0,0,114,115,1,
		0,0,0,115,116,5,13,0,0,116,119,3,34,17,0,117,119,3,34,17,0,118,113,1,0,
		0,0,118,117,1,0,0,0,119,13,1,0,0,0,120,121,5,14,0,0,121,126,3,32,16,0,
		122,123,5,1,0,0,123,125,3,32,16,0,124,122,1,0,0,0,125,128,1,0,0,0,126,
		124,1,0,0,0,126,127,1,0,0,0,127,15,1,0,0,0,128,126,1,0,0,0,129,133,5,9,
		0,0,130,132,3,18,9,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,
		134,1,0,0,0,134,136,1,0,0,0,135,133,1,0,0,0,136,137,5,10,0,0,137,17,1,
		0,0,0,138,141,3,20,10,0,139,141,3,24,12,0,140,138,1,0,0,0,140,139,1,0,
		0,0,141,19,1,0,0,0,142,144,7,0,0,0,143,142,1,0,0,0,143,144,1,0,0,0,144,
		145,1,0,0,0,145,146,3,28,14,0,146,150,3,22,11,0,147,149,3,40,20,0,148,
		147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,153,1,
		0,0,0,152,150,1,0,0,0,153,154,5,4,0,0,154,21,1,0,0,0,155,157,3,34,17,0,
		156,155,1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,159,5,13,0,0,159,162,
		3,34,17,0,160,162,3,34,17,0,161,156,1,0,0,0,161,160,1,0,0,0,162,23,1,0,
		0,0,163,164,3,28,14,0,164,165,3,30,15,0,165,166,5,18,0,0,166,171,3,26,
		13,0,167,168,5,1,0,0,168,170,3,26,13,0,169,167,1,0,0,0,170,173,1,0,0,0,
		171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,
		5,19,0,0,175,176,5,4,0,0,176,25,1,0,0,0,177,178,3,28,14,0,178,179,3,30,
		15,0,179,27,1,0,0,0,180,181,6,14,-1,0,181,184,7,1,0,0,182,184,3,32,16,
		0,183,180,1,0,0,0,183,182,1,0,0,0,184,192,1,0,0,0,185,186,10,2,0,0,186,
		187,5,20,0,0,187,191,5,21,0,0,188,189,10,1,0,0,189,191,5,22,0,0,190,185,
		1,0,0,0,190,188,1,0,0,0,191,194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,
		0,193,29,1,0,0,0,194,192,1,0,0,0,195,196,3,34,17,0,196,31,1,0,0,0,197,
		202,3,34,17,0,198,199,5,32,0,0,199,201,3,34,17,0,200,198,1,0,0,0,201,204,
		1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,33,1,0,0,0,204,202,1,0,0,0,
		205,206,7,2,0,0,206,35,1,0,0,0,207,208,5,1,0,0,208,209,3,10,5,0,209,37,
		1,0,0,0,210,211,5,1,0,0,211,212,3,32,16,0,212,39,1,0,0,0,213,214,5,15,
		0,0,214,219,3,32,16,0,215,216,5,1,0,0,216,218,3,32,16,0,217,215,1,0,0,
		0,218,221,1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,241,1,0,0,0,221,
		219,1,0,0,0,222,223,5,16,0,0,223,228,3,32,16,0,224,225,5,1,0,0,225,227,
		3,32,16,0,226,224,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,
		0,0,229,241,1,0,0,0,230,228,1,0,0,0,231,232,5,17,0,0,232,237,3,32,16,0,
		233,234,5,1,0,0,234,236,3,32,16,0,235,233,1,0,0,0,236,239,1,0,0,0,237,
		235,1,0,0,0,237,238,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,240,213,1,
		0,0,0,240,222,1,0,0,0,240,231,1,0,0,0,241,41,1,0,0,0,242,243,5,1,0,0,243,
		244,3,32,16,0,244,43,1,0,0,0,245,246,5,1,0,0,246,247,3,32,16,0,247,45,
		1,0,0,0,248,249,5,1,0,0,249,250,3,32,16,0,250,47,1,0,0,0,251,252,5,1,0,
		0,252,253,3,26,13,0,253,49,1,0,0,0,254,255,5,32,0,0,255,256,3,34,17,0,
		256,51,1,0,0,0,24,58,71,88,93,97,105,113,118,126,133,140,143,150,156,161,
		171,183,190,192,202,219,228,237,240
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaModel.Compiler
