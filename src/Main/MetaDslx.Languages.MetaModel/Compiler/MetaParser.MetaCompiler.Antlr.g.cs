//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaParser : global::MetaDslx.Languages.MetaCompiler.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_KNamespace=2, LR_TSemicolon=3, LR_KUsing=4, LR_KMetamodel=5, 
		LR_KConst=6, LR_KEnum=7, LR_TLBrace=8, LR_TRBrace=9, LR_KAbstract=10, 
		LR_KClass=11, LR_TDollar=12, LR_TColon=13, LR_KContains=14, LR_KDerived=15, 
		LR_KOpposite=16, LR_KSubsets=17, LR_KRedefines=18, LR_TLParen=19, LR_TRParen=20, 
		LR_KBool=21, LR_KInt=22, LR_KString=23, LR_KType=24, LR_KVoid=25, LR_TLBracket=26, 
		LR_TRBracket=27, LR_TDot=28, LR_TInteger=29, LR_TDecimal=30, LR_TIdentifier=31, 
		LR_TString=32, LR_TWhitespace=33, LR_TLineEnd=34, LR_TSingleLineComment=35, 
		LR_TMultiLineComment=36;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_Declarations = 2, RULE_pr_MetaDeclaration = 3, 
		RULE_pr_EnumBody = 4, RULE_pr_EnumLiterals = 5, RULE_pr_MetaEnumLiteral = 6, 
		RULE_pr_ClassName = 7, RULE_pr_BaseClasses = 8, RULE_pr_ClassBody = 9, 
		RULE_pr_ClassMember = 10, RULE_pr_MetaProperty = 11, RULE_pr_PropertyName = 12, 
		RULE_pr_PropertyOpposite = 13, RULE_pr_PropertySubsets = 14, RULE_pr_PropertyRedefines = 15, 
		RULE_pr_MetaOperation = 16, RULE_pr_ParameterList = 17, RULE_pr_MetaParameter = 18, 
		RULE_pr_TypeReference = 19, RULE_pr_Name = 20, RULE_pr_Qualifier = 21, 
		RULE_pr_QualifierList = 22, RULE_pr_Identifier = 23, RULE_pr_EnumLiteralsBlock1 = 24, 
		RULE_pr_BaseClassesBlock1 = 25, RULE_pr_MetaPropertyBlock2 = 26, RULE_pr_PropertyOppositeBlock1 = 27, 
		RULE_pr_PropertySubsetsBlock1 = 28, RULE_pr_PropertyRedefinesBlock1 = 29, 
		RULE_pr_ParameterListBlock1 = 30, RULE_pr_QualifierBlock1 = 31, RULE_pr_QualifierListBlock1 = 32;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_Declarations", "pr_MetaDeclaration", "pr_EnumBody", 
		"pr_EnumLiterals", "pr_MetaEnumLiteral", "pr_ClassName", "pr_BaseClasses", 
		"pr_ClassBody", "pr_ClassMember", "pr_MetaProperty", "pr_PropertyName", 
		"pr_PropertyOpposite", "pr_PropertySubsets", "pr_PropertyRedefines", "pr_MetaOperation", 
		"pr_ParameterList", "pr_MetaParameter", "pr_TypeReference", "pr_Name", 
		"pr_Qualifier", "pr_QualifierList", "pr_Identifier", "pr_EnumLiteralsBlock1", 
		"pr_BaseClassesBlock1", "pr_MetaPropertyBlock2", "pr_PropertyOppositeBlock1", 
		"pr_PropertySubsetsBlock1", "pr_PropertyRedefinesBlock1", "pr_ParameterListBlock1", 
		"pr_QualifierBlock1", "pr_QualifierListBlock1"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'namespace'", "';'", "'using'", "'metamodel'", "'const'", 
		"'enum'", "'{'", "'}'", "'abstract'", "'class'", "'$'", "':'", "'contains'", 
		"'derived'", "'opposite'", "'subsets'", "'redefines'", "'('", "')'", "'bool'", 
		"'int'", "'string'", "'type'", "'void'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KConst", "LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", 
		"LR_TDollar", "LR_TColon", "LR_KContains", "LR_KDerived", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TLParen", "LR_TRParen", "LR_KBool", 
		"LR_KInt", "LR_KString", "LR_KType", "LR_KVoid", "LR_TLBracket", "LR_TRBracket", 
		"LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TString", 
		"LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", "LR_TMultiLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken kNamespace;
		public Pr_QualifierContext nameAntlr1;
		public IToken tSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _usingAntlr1 = new List<Pr_UsingContext>();
		public Pr_DeclarationsContext declarationsAntlr1;
		public IToken eof;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(MetaParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_DeclarationsContext pr_Declarations() {
			return GetRuleContext<Pr_DeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MetaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			_localctx.kNamespace = Match(LR_KNamespace);
			State = 67;
			_localctx.nameAntlr1 = pr_Qualifier();
			State = 68;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 69;
				_localctx._pr_Using = pr_Using();
				_localctx._usingAntlr1.Add(_localctx._pr_Using);
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 75;
			_localctx.declarationsAntlr1 = pr_Declarations();
			State = 76;
			_localctx.eof = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken kUsing;
		public Pr_QualifierContext namespacesAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(MetaParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_localctx.kUsing = Match(LR_KUsing);
			State = 79;
			_localctx.namespacesAntlr1 = pr_Qualifier();
			State = 80;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_DeclarationsContext : ParserRuleContext {
		public Pr_MetaDeclarationContext _pr_MetaDeclaration;
		public IList<Pr_MetaDeclarationContext> _declarationsAntlr1 = new List<Pr_MetaDeclarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaDeclarationContext[] pr_MetaDeclaration() {
			return GetRuleContexts<Pr_MetaDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaDeclarationContext pr_MetaDeclaration(int i) {
			return GetRuleContext<Pr_MetaDeclarationContext>(i);
		}
		public Pr_DeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Declarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_DeclarationsContext pr_Declarations() {
		Pr_DeclarationsContext _localctx = new Pr_DeclarationsContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_Declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3296L) != 0)) {
				{
				{
				State = 82;
				_localctx._pr_MetaDeclaration = pr_MetaDeclaration();
				_localctx._declarationsAntlr1.Add(_localctx._pr_MetaDeclaration);
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaDeclarationContext : ParserRuleContext {
		public Pr_MetaDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaDeclaration; } }
	 
		public Pr_MetaDeclarationContext() { }
		public virtual void CopyFrom(Pr_MetaDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaEnumTypeContext : Pr_MetaDeclarationContext {
		public IToken kEnum;
		public Pr_NameContext nameAntlr1;
		public Pr_EnumBodyContext enumBodyAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KEnum() { return GetToken(MetaParser.LR_KEnum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumBodyContext pr_EnumBody() {
			return GetRuleContext<Pr_EnumBodyContext>(0);
		}
		public Pr_MetaEnumTypeContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnumType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaModelContext : Pr_MetaDeclarationContext {
		public IToken kMetamodel;
		public Pr_NameContext nameAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KMetamodel() { return GetToken(MetaParser.LR_KMetamodel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		public Pr_MetaModelContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaModel(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaConstantContext : Pr_MetaDeclarationContext {
		public IToken kConst;
		public Pr_TypeReferenceContext typeAntlr1;
		public Pr_NameContext nameAntlr1;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KConst() { return GetToken(MetaParser.LR_KConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		public Pr_MetaConstantContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaConstant(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaClassContext : Pr_MetaDeclarationContext {
		public IToken isAbstract;
		public IToken kClass;
		public Pr_ClassNameContext nameAntlr1;
		public Pr_BaseClassesContext baseClassesAntlr1;
		public Pr_ClassBodyContext classBodyAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KClass() { return GetToken(MetaParser.LR_KClass, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ClassNameContext pr_ClassName() {
			return GetRuleContext<Pr_ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ClassBodyContext pr_ClassBody() {
			return GetRuleContext<Pr_ClassBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAbstract() { return GetToken(MetaParser.LR_KAbstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BaseClassesContext pr_BaseClasses() {
			return GetRuleContext<Pr_BaseClassesContext>(0);
		}
		public Pr_MetaClassContext(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaDeclarationContext pr_MetaDeclaration() {
		Pr_MetaDeclarationContext _localctx = new Pr_MetaDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_MetaDeclaration);
		int _la;
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KMetamodel:
				_localctx = new Pr_MetaModelContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				((Pr_MetaModelContext)_localctx).kMetamodel = Match(LR_KMetamodel);
				State = 89;
				((Pr_MetaModelContext)_localctx).nameAntlr1 = pr_Name();
				State = 90;
				((Pr_MetaModelContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			case LR_KConst:
				_localctx = new Pr_MetaConstantContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				((Pr_MetaConstantContext)_localctx).kConst = Match(LR_KConst);
				State = 93;
				((Pr_MetaConstantContext)_localctx).typeAntlr1 = pr_TypeReference(0);
				State = 94;
				((Pr_MetaConstantContext)_localctx).nameAntlr1 = pr_Name();
				State = 95;
				((Pr_MetaConstantContext)_localctx).tSemicolon = Match(LR_TSemicolon);
				}
				break;
			case LR_KEnum:
				_localctx = new Pr_MetaEnumTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 97;
				((Pr_MetaEnumTypeContext)_localctx).kEnum = Match(LR_KEnum);
				State = 98;
				((Pr_MetaEnumTypeContext)_localctx).nameAntlr1 = pr_Name();
				State = 99;
				((Pr_MetaEnumTypeContext)_localctx).enumBodyAntlr1 = pr_EnumBody();
				}
				break;
			case LR_KAbstract:
			case LR_KClass:
				_localctx = new Pr_MetaClassContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_KAbstract) {
					{
					State = 101;
					((Pr_MetaClassContext)_localctx).isAbstract = Match(LR_KAbstract);
					}
				}

				State = 104;
				((Pr_MetaClassContext)_localctx).kClass = Match(LR_KClass);
				State = 105;
				((Pr_MetaClassContext)_localctx).nameAntlr1 = pr_ClassName();
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_TColon) {
					{
					State = 106;
					((Pr_MetaClassContext)_localctx).baseClassesAntlr1 = pr_BaseClasses();
					}
				}

				State = 109;
				((Pr_MetaClassContext)_localctx).classBodyAntlr1 = pr_ClassBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumBodyContext : ParserRuleContext {
		public IToken tLBrace;
		public Pr_EnumLiteralsContext enumLiteralsAntlr1;
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(MetaParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(MetaParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumLiteralsContext pr_EnumLiterals() {
			return GetRuleContext<Pr_EnumLiteralsContext>(0);
		}
		public Pr_EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumBodyContext pr_EnumBody() {
		Pr_EnumBodyContext _localctx = new Pr_EnumBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_EnumBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_localctx.tLBrace = Match(LR_TLBrace);
			State = 115;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TIdentifier) {
				{
				State = 114;
				_localctx.enumLiteralsAntlr1 = pr_EnumLiterals();
				}
			}

			State = 117;
			_localctx.tRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumLiteralsContext : ParserRuleContext {
		public Pr_MetaEnumLiteralContext literalsAntlr1;
		public Pr_EnumLiteralsBlock1Context _pr_EnumLiteralsBlock1;
		public IList<Pr_EnumLiteralsBlock1Context> _enumLiteralsBlock1Antlr1 = new List<Pr_EnumLiteralsBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
			return GetRuleContext<Pr_MetaEnumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumLiteralsBlock1Context[] pr_EnumLiteralsBlock1() {
			return GetRuleContexts<Pr_EnumLiteralsBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_EnumLiteralsBlock1Context pr_EnumLiteralsBlock1(int i) {
			return GetRuleContext<Pr_EnumLiteralsBlock1Context>(i);
		}
		public Pr_EnumLiteralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumLiterals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumLiterals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumLiteralsContext pr_EnumLiterals() {
		Pr_EnumLiteralsContext _localctx = new Pr_EnumLiteralsContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_EnumLiterals);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			_localctx.literalsAntlr1 = pr_MetaEnumLiteral();
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 120;
				_localctx._pr_EnumLiteralsBlock1 = pr_EnumLiteralsBlock1();
				_localctx._enumLiteralsBlock1Antlr1.Add(_localctx._pr_EnumLiteralsBlock1);
				}
				}
				State = 125;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaEnumLiteralContext : ParserRuleContext {
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_MetaEnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaEnumLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
		Pr_MetaEnumLiteralContext _localctx = new Pr_MetaEnumLiteralContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_MetaEnumLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			_localctx.nameAntlr1 = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ClassNameContext : ParserRuleContext {
		public Pr_ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ClassName; } }
	 
		public Pr_ClassNameContext() { }
		public virtual void CopyFrom(Pr_ClassNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ClassNameAlt1Context : Pr_ClassNameContext {
		public IToken tIdentifierAntlr1;
		public IToken tDollar;
		public Pr_IdentifierContext symbolTypeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDollar() { return GetToken(MetaParser.LR_TDollar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(MetaParser.LR_TIdentifier, 0); }
		public Pr_ClassNameAlt1Context(Pr_ClassNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassNameAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ClassNameAlt2Context : Pr_ClassNameContext {
		public IToken tIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(MetaParser.LR_TIdentifier, 0); }
		public Pr_ClassNameAlt2Context(Pr_ClassNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassNameAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ClassNameContext pr_ClassName() {
		Pr_ClassNameContext _localctx = new Pr_ClassNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_ClassName);
		int _la;
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new Pr_ClassNameAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_TIdentifier) {
					{
					State = 128;
					((Pr_ClassNameAlt1Context)_localctx).tIdentifierAntlr1 = Match(LR_TIdentifier);
					}
				}

				State = 131;
				((Pr_ClassNameAlt1Context)_localctx).tDollar = Match(LR_TDollar);
				State = 132;
				((Pr_ClassNameAlt1Context)_localctx).symbolTypeAntlr1 = pr_Identifier();
				}
				break;
			case 2:
				_localctx = new Pr_ClassNameAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 133;
				((Pr_ClassNameAlt2Context)_localctx).tIdentifierAntlr1 = Match(LR_TIdentifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BaseClassesContext : ParserRuleContext {
		public Pr_BaseClassesBlock1Context baseClassesBlock1Antlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_BaseClassesBlock1Context pr_BaseClassesBlock1() {
			return GetRuleContext<Pr_BaseClassesBlock1Context>(0);
		}
		public Pr_BaseClassesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BaseClasses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BaseClasses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BaseClassesContext pr_BaseClasses() {
		Pr_BaseClassesContext _localctx = new Pr_BaseClassesContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_BaseClasses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			_localctx.baseClassesBlock1Antlr1 = pr_BaseClassesBlock1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ClassBodyContext : ParserRuleContext {
		public IToken tLBrace;
		public Pr_ClassMemberContext _pr_ClassMember;
		public IList<Pr_ClassMemberContext> _classMemberAntlr1 = new List<Pr_ClassMemberContext>();
		public IToken tRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(MetaParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(MetaParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ClassMemberContext[] pr_ClassMember() {
			return GetRuleContexts<Pr_ClassMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ClassMemberContext pr_ClassMember(int i) {
			return GetRuleContext<Pr_ClassMemberContext>(i);
		}
		public Pr_ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ClassBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ClassBodyContext pr_ClassBody() {
		Pr_ClassBodyContext _localctx = new Pr_ClassBodyContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_ClassBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			_localctx.tLBrace = Match(LR_TLBrace);
			State = 142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2212544512L) != 0)) {
				{
				{
				State = 139;
				_localctx._pr_ClassMember = pr_ClassMember();
				_localctx._classMemberAntlr1.Add(_localctx._pr_ClassMember);
				}
				}
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 145;
			_localctx.tRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ClassMemberContext : ParserRuleContext {
		public Pr_ClassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ClassMember; } }
	 
		public Pr_ClassMemberContext() { }
		public virtual void CopyFrom(Pr_ClassMemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ClassMemberAlt2Context : Pr_ClassMemberContext {
		public Pr_MetaOperationContext operationsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaOperationContext pr_MetaOperation() {
			return GetRuleContext<Pr_MetaOperationContext>(0);
		}
		public Pr_ClassMemberAlt2Context(Pr_ClassMemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassMemberAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ClassMemberAlt1Context : Pr_ClassMemberContext {
		public Pr_MetaPropertyContext propertiesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyContext pr_MetaProperty() {
			return GetRuleContext<Pr_MetaPropertyContext>(0);
		}
		public Pr_ClassMemberAlt1Context(Pr_ClassMemberContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ClassMemberAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ClassMemberContext pr_ClassMember() {
		Pr_ClassMemberContext _localctx = new Pr_ClassMemberContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_ClassMember);
		try {
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				_localctx = new Pr_ClassMemberAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 147;
				((Pr_ClassMemberAlt1Context)_localctx).propertiesAntlr1 = pr_MetaProperty();
				}
				break;
			case 2:
				_localctx = new Pr_ClassMemberAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 148;
				((Pr_ClassMemberAlt2Context)_localctx).operationsAntlr1 = pr_MetaOperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyContext : ParserRuleContext {
		public IToken isContainment;
		public IToken isDerived;
		public Pr_TypeReferenceContext typeAntlr1;
		public Pr_PropertyNameContext nameAntlr1;
		public Pr_MetaPropertyBlock2Context _pr_MetaPropertyBlock2;
		public IList<Pr_MetaPropertyBlock2Context> _metaPropertyBlock2Antlr1 = new List<Pr_MetaPropertyBlock2Context>();
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyNameContext pr_PropertyName() {
			return GetRuleContext<Pr_PropertyNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KContains() { return GetToken(MetaParser.LR_KContains, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDerived() { return GetToken(MetaParser.LR_KDerived, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyBlock2Context[] pr_MetaPropertyBlock2() {
			return GetRuleContexts<Pr_MetaPropertyBlock2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyBlock2Context pr_MetaPropertyBlock2(int i) {
			return GetRuleContext<Pr_MetaPropertyBlock2Context>(i);
		}
		public Pr_MetaPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyContext pr_MetaProperty() {
		Pr_MetaPropertyContext _localctx = new Pr_MetaPropertyContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_MetaProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KContains:
				{
				State = 151;
				_localctx.isContainment = Match(LR_KContains);
				}
				break;
			case LR_KDerived:
				{
				State = 152;
				_localctx.isDerived = Match(LR_KDerived);
				}
				break;
			case LR_KBool:
			case LR_KInt:
			case LR_KString:
			case LR_KType:
			case LR_KVoid:
			case LR_TIdentifier:
				break;
			default:
				break;
			}
			State = 155;
			_localctx.typeAntlr1 = pr_TypeReference(0);
			State = 156;
			_localctx.nameAntlr1 = pr_PropertyName();
			State = 160;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0)) {
				{
				{
				State = 157;
				_localctx._pr_MetaPropertyBlock2 = pr_MetaPropertyBlock2();
				_localctx._metaPropertyBlock2Antlr1.Add(_localctx._pr_MetaPropertyBlock2);
				}
				}
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 163;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyNameContext : ParserRuleContext {
		public Pr_PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyName; } }
	 
		public Pr_PropertyNameContext() { }
		public virtual void CopyFrom(Pr_PropertyNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_PropertyNameAlt2Context : Pr_PropertyNameContext {
		public IToken tIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(MetaParser.LR_TIdentifier, 0); }
		public Pr_PropertyNameAlt2Context(Pr_PropertyNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyNameAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_PropertyNameAlt1Context : Pr_PropertyNameContext {
		public IToken tIdentifierAntlr1;
		public IToken tDollar;
		public IToken symbolPropertyAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDollar() { return GetToken(MetaParser.LR_TDollar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TIdentifier() { return GetTokens(MetaParser.LR_TIdentifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier(int i) {
			return GetToken(MetaParser.LR_TIdentifier, i);
		}
		public Pr_PropertyNameAlt1Context(Pr_PropertyNameContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyNameAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyNameContext pr_PropertyName() {
		Pr_PropertyNameContext _localctx = new Pr_PropertyNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_PropertyName);
		int _la;
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new Pr_PropertyNameAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_TIdentifier) {
					{
					State = 165;
					((Pr_PropertyNameAlt1Context)_localctx).tIdentifierAntlr1 = Match(LR_TIdentifier);
					}
				}

				State = 168;
				((Pr_PropertyNameAlt1Context)_localctx).tDollar = Match(LR_TDollar);
				State = 169;
				((Pr_PropertyNameAlt1Context)_localctx).symbolPropertyAntlr1 = Match(LR_TIdentifier);
				}
				break;
			case 2:
				_localctx = new Pr_PropertyNameAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 170;
				((Pr_PropertyNameAlt2Context)_localctx).tIdentifierAntlr1 = Match(LR_TIdentifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyOppositeContext : ParserRuleContext {
		public IToken kOpposite;
		public Pr_QualifierContext oppositePropertiesAntlr1;
		public Pr_PropertyOppositeBlock1Context _pr_PropertyOppositeBlock1;
		public IList<Pr_PropertyOppositeBlock1Context> _propertyOppositeBlock1Antlr1 = new List<Pr_PropertyOppositeBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KOpposite() { return GetToken(MetaParser.LR_KOpposite, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyOppositeBlock1Context[] pr_PropertyOppositeBlock1() {
			return GetRuleContexts<Pr_PropertyOppositeBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyOppositeBlock1Context pr_PropertyOppositeBlock1(int i) {
			return GetRuleContext<Pr_PropertyOppositeBlock1Context>(i);
		}
		public Pr_PropertyOppositeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyOpposite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyOpposite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyOppositeContext pr_PropertyOpposite() {
		Pr_PropertyOppositeContext _localctx = new Pr_PropertyOppositeContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_PropertyOpposite);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			_localctx.kOpposite = Match(LR_KOpposite);
			State = 174;
			_localctx.oppositePropertiesAntlr1 = pr_Qualifier();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 175;
				_localctx._pr_PropertyOppositeBlock1 = pr_PropertyOppositeBlock1();
				_localctx._propertyOppositeBlock1Antlr1.Add(_localctx._pr_PropertyOppositeBlock1);
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertySubsetsContext : ParserRuleContext {
		public IToken kSubsets;
		public Pr_QualifierContext subsettedPropertiesAntlr1;
		public Pr_PropertySubsetsBlock1Context _pr_PropertySubsetsBlock1;
		public IList<Pr_PropertySubsetsBlock1Context> _propertySubsetsBlock1Antlr1 = new List<Pr_PropertySubsetsBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSubsets() { return GetToken(MetaParser.LR_KSubsets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertySubsetsBlock1Context[] pr_PropertySubsetsBlock1() {
			return GetRuleContexts<Pr_PropertySubsetsBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertySubsetsBlock1Context pr_PropertySubsetsBlock1(int i) {
			return GetRuleContext<Pr_PropertySubsetsBlock1Context>(i);
		}
		public Pr_PropertySubsetsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertySubsets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertySubsets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertySubsetsContext pr_PropertySubsets() {
		Pr_PropertySubsetsContext _localctx = new Pr_PropertySubsetsContext(Context, State);
		EnterRule(_localctx, 28, RULE_pr_PropertySubsets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_localctx.kSubsets = Match(LR_KSubsets);
			State = 182;
			_localctx.subsettedPropertiesAntlr1 = pr_Qualifier();
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 183;
				_localctx._pr_PropertySubsetsBlock1 = pr_PropertySubsetsBlock1();
				_localctx._propertySubsetsBlock1Antlr1.Add(_localctx._pr_PropertySubsetsBlock1);
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyRedefinesContext : ParserRuleContext {
		public IToken kRedefines;
		public Pr_QualifierContext redefinedPropertiesAntlr1;
		public Pr_PropertyRedefinesBlock1Context _pr_PropertyRedefinesBlock1;
		public IList<Pr_PropertyRedefinesBlock1Context> _propertyRedefinesBlock1Antlr1 = new List<Pr_PropertyRedefinesBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KRedefines() { return GetToken(MetaParser.LR_KRedefines, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyRedefinesBlock1Context[] pr_PropertyRedefinesBlock1() {
			return GetRuleContexts<Pr_PropertyRedefinesBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyRedefinesBlock1Context pr_PropertyRedefinesBlock1(int i) {
			return GetRuleContext<Pr_PropertyRedefinesBlock1Context>(i);
		}
		public Pr_PropertyRedefinesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyRedefines; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyRedefines(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyRedefinesContext pr_PropertyRedefines() {
		Pr_PropertyRedefinesContext _localctx = new Pr_PropertyRedefinesContext(Context, State);
		EnterRule(_localctx, 30, RULE_pr_PropertyRedefines);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			_localctx.kRedefines = Match(LR_KRedefines);
			State = 190;
			_localctx.redefinedPropertiesAntlr1 = pr_Qualifier();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 191;
				_localctx._pr_PropertyRedefinesBlock1 = pr_PropertyRedefinesBlock1();
				_localctx._propertyRedefinesBlock1Antlr1.Add(_localctx._pr_PropertyRedefinesBlock1);
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaOperationContext : ParserRuleContext {
		public Pr_TypeReferenceContext returnTypeAntlr1;
		public Pr_NameContext nameAntlr1;
		public IToken tLParen;
		public Pr_ParameterListContext parameterListAntlr1;
		public IToken tRParen;
		public IToken tSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(MetaParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(MetaParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterListContext pr_ParameterList() {
			return GetRuleContext<Pr_ParameterListContext>(0);
		}
		public Pr_MetaOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaOperationContext pr_MetaOperation() {
		Pr_MetaOperationContext _localctx = new Pr_MetaOperationContext(Context, State);
		EnterRule(_localctx, 32, RULE_pr_MetaOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			_localctx.returnTypeAntlr1 = pr_TypeReference(0);
			State = 198;
			_localctx.nameAntlr1 = pr_Name();
			State = 199;
			_localctx.tLParen = Match(LR_TLParen);
			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2212495360L) != 0)) {
				{
				State = 200;
				_localctx.parameterListAntlr1 = pr_ParameterList();
				}
			}

			State = 203;
			_localctx.tRParen = Match(LR_TRParen);
			State = 204;
			_localctx.tSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParameterListContext : ParserRuleContext {
		public Pr_MetaParameterContext parametersAntlr1;
		public Pr_ParameterListBlock1Context _pr_ParameterListBlock1;
		public IList<Pr_ParameterListBlock1Context> _parameterListBlock1Antlr1 = new List<Pr_ParameterListBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaParameterContext pr_MetaParameter() {
			return GetRuleContext<Pr_MetaParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterListBlock1Context[] pr_ParameterListBlock1() {
			return GetRuleContexts<Pr_ParameterListBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ParameterListBlock1Context pr_ParameterListBlock1(int i) {
			return GetRuleContext<Pr_ParameterListBlock1Context>(i);
		}
		public Pr_ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParameterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParameterListContext pr_ParameterList() {
		Pr_ParameterListContext _localctx = new Pr_ParameterListContext(Context, State);
		EnterRule(_localctx, 34, RULE_pr_ParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_localctx.parametersAntlr1 = pr_MetaParameter();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 207;
				_localctx._pr_ParameterListBlock1 = pr_ParameterListBlock1();
				_localctx._parameterListBlock1Antlr1.Add(_localctx._pr_ParameterListBlock1);
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaParameterContext : ParserRuleContext {
		public Pr_TypeReferenceContext typeAntlr1;
		public Pr_NameContext nameAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_MetaParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaParameterContext pr_MetaParameter() {
		Pr_MetaParameterContext _localctx = new Pr_MetaParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_pr_MetaParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_localctx.typeAntlr1 = pr_TypeReference(0);
			State = 214;
			_localctx.nameAntlr1 = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TypeReferenceContext : ParserRuleContext {
		public Pr_TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TypeReference; } }
	 
		public Pr_TypeReferenceContext() { }
		public virtual void CopyFrom(Pr_TypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_TypeReferenceTokensContext : Pr_TypeReferenceContext {
		public IToken kBool;
		public IToken kInt;
		public IToken kString;
		public IToken kType;
		public IToken kVoid;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBool() { return GetToken(MetaParser.LR_KBool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KInt() { return GetToken(MetaParser.LR_KInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KString() { return GetToken(MetaParser.LR_KString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KType() { return GetToken(MetaParser.LR_KType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KVoid() { return GetToken(MetaParser.LR_KVoid, 0); }
		public Pr_TypeReferenceTokensContext(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReferenceTokens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaArrayTypeContext : Pr_TypeReferenceContext {
		public Pr_TypeReferenceContext itemTypeAntlr1;
		public IToken tLBracket;
		public IToken tRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(MetaParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(MetaParser.LR_TRBracket, 0); }
		public Pr_MetaArrayTypeContext(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaArrayType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_TypeReferenceAlt3Context : Pr_TypeReferenceContext {
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_TypeReferenceAlt3Context(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReferenceAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TypeReferenceContext pr_TypeReference() {
		return pr_TypeReference(0);
	}

	private Pr_TypeReferenceContext pr_TypeReference(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Pr_TypeReferenceContext _localctx = new Pr_TypeReferenceContext(Context, _parentState);
		Pr_TypeReferenceContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_pr_TypeReference, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TIdentifier:
				{
				_localctx = new Pr_TypeReferenceAlt3Context(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 217;
				((Pr_TypeReferenceAlt3Context)_localctx).qualifierAntlr1 = pr_Qualifier();
				}
				break;
			case LR_KBool:
			case LR_KInt:
			case LR_KString:
			case LR_KType:
			case LR_KVoid:
				{
				_localctx = new Pr_TypeReferenceTokensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 223;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LR_KBool:
					{
					State = 218;
					((Pr_TypeReferenceTokensContext)_localctx).kBool = Match(LR_KBool);
					}
					break;
				case LR_KInt:
					{
					State = 219;
					((Pr_TypeReferenceTokensContext)_localctx).kInt = Match(LR_KInt);
					}
					break;
				case LR_KString:
					{
					State = 220;
					((Pr_TypeReferenceTokensContext)_localctx).kString = Match(LR_KString);
					}
					break;
				case LR_KType:
					{
					State = 221;
					((Pr_TypeReferenceTokensContext)_localctx).kType = Match(LR_KType);
					}
					break;
				case LR_KVoid:
					{
					State = 222;
					((Pr_TypeReferenceTokensContext)_localctx).kVoid = Match(LR_KVoid);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 232;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Pr_MetaArrayTypeContext(new Pr_TypeReferenceContext(_parentctx, _parentState));
					((Pr_MetaArrayTypeContext)_localctx).itemTypeAntlr1 = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_pr_TypeReference);
					State = 227;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 228;
					((Pr_MetaArrayTypeContext)_localctx).tLBracket = Match(LR_TLBracket);
					State = 229;
					((Pr_MetaArrayTypeContext)_localctx).tRBracket = Match(LR_TRBracket);
					}
					} 
				}
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 40, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext identifierAntlr1;
		public Pr_QualifierBlock1Context _pr_QualifierBlock1;
		public IList<Pr_QualifierBlock1Context> _qualifierBlock1Antlr1 = new List<Pr_QualifierBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context[] pr_QualifierBlock1() {
			return GetRuleContexts<Pr_QualifierBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierBlock1Context pr_QualifierBlock1(int i) {
			return GetRuleContext<Pr_QualifierBlock1Context>(i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_pr_Qualifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 237;
			_localctx.identifierAntlr1 = pr_Identifier();
			State = 241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 238;
					_localctx._pr_QualifierBlock1 = pr_QualifierBlock1();
					_localctx._qualifierBlock1Antlr1.Add(_localctx._pr_QualifierBlock1);
					}
					} 
				}
				State = 243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListContext : ParserRuleContext {
		public Pr_QualifierContext qualifierAntlr1;
		public Pr_QualifierListBlock1Context _pr_QualifierListBlock1;
		public IList<Pr_QualifierListBlock1Context> _qualifierListBlock1Antlr1 = new List<Pr_QualifierListBlock1Context>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context[] pr_QualifierListBlock1() {
			return GetRuleContexts<Pr_QualifierListBlock1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListBlock1Context pr_QualifierListBlock1(int i) {
			return GetRuleContext<Pr_QualifierListBlock1Context>(i);
		}
		public Pr_QualifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListContext pr_QualifierList() {
		Pr_QualifierListContext _localctx = new Pr_QualifierListContext(Context, State);
		EnterRule(_localctx, 44, RULE_pr_QualifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 245;
				_localctx._pr_QualifierListBlock1 = pr_QualifierListBlock1();
				_localctx._qualifierListBlock1Antlr1.Add(_localctx._pr_QualifierListBlock1);
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public IToken tIdentifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(MetaParser.LR_TIdentifier, 0); }
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_pr_Identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251;
			_localctx.tIdentifierAntlr1 = Match(LR_TIdentifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_EnumLiteralsBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_MetaEnumLiteralContext literalsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
			return GetRuleContext<Pr_MetaEnumLiteralContext>(0);
		}
		public Pr_EnumLiteralsBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_EnumLiteralsBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_EnumLiteralsBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_EnumLiteralsBlock1Context pr_EnumLiteralsBlock1() {
		Pr_EnumLiteralsBlock1Context _localctx = new Pr_EnumLiteralsBlock1Context(Context, State);
		EnterRule(_localctx, 48, RULE_pr_EnumLiteralsBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			_localctx.tComma = Match(LR_TComma);
			State = 254;
			_localctx.literalsAntlr1 = pr_MetaEnumLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_BaseClassesBlock1Context : ParserRuleContext {
		public IToken tColon;
		public Pr_QualifierListContext baseTypesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(MetaParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierListContext pr_QualifierList() {
			return GetRuleContext<Pr_QualifierListContext>(0);
		}
		public Pr_BaseClassesBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_BaseClassesBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_BaseClassesBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_BaseClassesBlock1Context pr_BaseClassesBlock1() {
		Pr_BaseClassesBlock1Context _localctx = new Pr_BaseClassesBlock1Context(Context, State);
		EnterRule(_localctx, 50, RULE_pr_BaseClassesBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_localctx.tColon = Match(LR_TColon);
			State = 257;
			_localctx.baseTypesAntlr1 = pr_QualifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyBlock2Context : ParserRuleContext {
		public Pr_MetaPropertyBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaPropertyBlock2; } }
	 
		public Pr_MetaPropertyBlock2Context() { }
		public virtual void CopyFrom(Pr_MetaPropertyBlock2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaPropertyBlock2Alt3Context : Pr_MetaPropertyBlock2Context {
		public Pr_PropertyRedefinesContext propertyRedefinesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyRedefinesContext pr_PropertyRedefines() {
			return GetRuleContext<Pr_PropertyRedefinesContext>(0);
		}
		public Pr_MetaPropertyBlock2Alt3Context(Pr_MetaPropertyBlock2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock2Alt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaPropertyBlock2Alt2Context : Pr_MetaPropertyBlock2Context {
		public Pr_PropertySubsetsContext propertySubsetsAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertySubsetsContext pr_PropertySubsets() {
			return GetRuleContext<Pr_PropertySubsetsContext>(0);
		}
		public Pr_MetaPropertyBlock2Alt2Context(Pr_MetaPropertyBlock2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock2Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaPropertyBlock2Alt1Context : Pr_MetaPropertyBlock2Context {
		public Pr_PropertyOppositeContext propertyOppositeAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PropertyOppositeContext pr_PropertyOpposite() {
			return GetRuleContext<Pr_PropertyOppositeContext>(0);
		}
		public Pr_MetaPropertyBlock2Alt1Context(Pr_MetaPropertyBlock2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock2Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyBlock2Context pr_MetaPropertyBlock2() {
		Pr_MetaPropertyBlock2Context _localctx = new Pr_MetaPropertyBlock2Context(Context, State);
		EnterRule(_localctx, 52, RULE_pr_MetaPropertyBlock2);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KOpposite:
				_localctx = new Pr_MetaPropertyBlock2Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 259;
				((Pr_MetaPropertyBlock2Alt1Context)_localctx).propertyOppositeAntlr1 = pr_PropertyOpposite();
				}
				break;
			case LR_KSubsets:
				_localctx = new Pr_MetaPropertyBlock2Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 260;
				((Pr_MetaPropertyBlock2Alt2Context)_localctx).propertySubsetsAntlr1 = pr_PropertySubsets();
				}
				break;
			case LR_KRedefines:
				_localctx = new Pr_MetaPropertyBlock2Alt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 261;
				((Pr_MetaPropertyBlock2Alt3Context)_localctx).propertyRedefinesAntlr1 = pr_PropertyRedefines();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyOppositeBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext oppositePropertiesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PropertyOppositeBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyOppositeBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyOppositeBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyOppositeBlock1Context pr_PropertyOppositeBlock1() {
		Pr_PropertyOppositeBlock1Context _localctx = new Pr_PropertyOppositeBlock1Context(Context, State);
		EnterRule(_localctx, 54, RULE_pr_PropertyOppositeBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_localctx.tComma = Match(LR_TComma);
			State = 265;
			_localctx.oppositePropertiesAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertySubsetsBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext subsettedPropertiesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PropertySubsetsBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertySubsetsBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertySubsetsBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertySubsetsBlock1Context pr_PropertySubsetsBlock1() {
		Pr_PropertySubsetsBlock1Context _localctx = new Pr_PropertySubsetsBlock1Context(Context, State);
		EnterRule(_localctx, 56, RULE_pr_PropertySubsetsBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_localctx.tComma = Match(LR_TComma);
			State = 268;
			_localctx.subsettedPropertiesAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PropertyRedefinesBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext redefinedPropertiesAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_PropertyRedefinesBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PropertyRedefinesBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PropertyRedefinesBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PropertyRedefinesBlock1Context pr_PropertyRedefinesBlock1() {
		Pr_PropertyRedefinesBlock1Context _localctx = new Pr_PropertyRedefinesBlock1Context(Context, State);
		EnterRule(_localctx, 58, RULE_pr_PropertyRedefinesBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270;
			_localctx.tComma = Match(LR_TComma);
			State = 271;
			_localctx.redefinedPropertiesAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ParameterListBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_MetaParameterContext parametersAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaParameterContext pr_MetaParameter() {
			return GetRuleContext<Pr_MetaParameterContext>(0);
		}
		public Pr_ParameterListBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_ParameterListBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ParameterListBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ParameterListBlock1Context pr_ParameterListBlock1() {
		Pr_ParameterListBlock1Context _localctx = new Pr_ParameterListBlock1Context(Context, State);
		EnterRule(_localctx, 60, RULE_pr_ParameterListBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			_localctx.tComma = Match(LR_TComma);
			State = 274;
			_localctx.parametersAntlr1 = pr_MetaParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierBlock1Context : ParserRuleContext {
		public IToken tDot;
		public Pr_IdentifierContext identifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(MetaParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierBlock1Context pr_QualifierBlock1() {
		Pr_QualifierBlock1Context _localctx = new Pr_QualifierBlock1Context(Context, State);
		EnterRule(_localctx, 62, RULE_pr_QualifierBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_localctx.tDot = Match(LR_TDot);
			State = 277;
			_localctx.identifierAntlr1 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierListBlock1Context : ParserRuleContext {
		public IToken tComma;
		public Pr_QualifierContext qualifierAntlr1;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_QualifierListBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierListBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierListBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierListBlock1Context pr_QualifierListBlock1() {
		Pr_QualifierListBlock1Context _localctx = new Pr_QualifierListBlock1Context(Context, State);
		EnterRule(_localctx, 64, RULE_pr_QualifierListBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			_localctx.tComma = Match(LR_TComma);
			State = 280;
			_localctx.qualifierAntlr1 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return pr_TypeReference_sempred((Pr_TypeReferenceContext)_localctx, predIndex);
		}
		return true;
	}
	private bool pr_TypeReference_sempred(Pr_TypeReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,36,283,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,1,0,5,0,71,8,0,10,
		0,12,0,74,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,5,2,84,8,2,10,2,12,2,87,
		9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,103,8,
		3,1,3,1,3,1,3,3,3,108,8,3,1,3,1,3,3,3,112,8,3,1,4,1,4,3,4,116,8,4,1,4,
		1,4,1,5,1,5,5,5,122,8,5,10,5,12,5,125,9,5,1,6,1,6,1,7,3,7,130,8,7,1,7,
		1,7,1,7,3,7,135,8,7,1,8,1,8,1,9,1,9,5,9,141,8,9,10,9,12,9,144,9,9,1,9,
		1,9,1,10,1,10,3,10,150,8,10,1,11,1,11,3,11,154,8,11,1,11,1,11,1,11,5,11,
		159,8,11,10,11,12,11,162,9,11,1,11,1,11,1,12,3,12,167,8,12,1,12,1,12,1,
		12,3,12,172,8,12,1,13,1,13,1,13,5,13,177,8,13,10,13,12,13,180,9,13,1,14,
		1,14,1,14,5,14,185,8,14,10,14,12,14,188,9,14,1,15,1,15,1,15,5,15,193,8,
		15,10,15,12,15,196,9,15,1,16,1,16,1,16,1,16,3,16,202,8,16,1,16,1,16,1,
		16,1,17,1,17,5,17,209,8,17,10,17,12,17,212,9,17,1,18,1,18,1,18,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,3,19,224,8,19,3,19,226,8,19,1,19,1,19,1,19,
		5,19,231,8,19,10,19,12,19,234,9,19,1,20,1,20,1,21,1,21,5,21,240,8,21,10,
		21,12,21,243,9,21,1,22,1,22,5,22,247,8,22,10,22,12,22,250,9,22,1,23,1,
		23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,3,26,263,8,26,1,27,1,27,
		1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,
		1,32,1,32,1,32,0,1,38,33,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,0,0,282,0,66,1,0,0,0,2,
		78,1,0,0,0,4,85,1,0,0,0,6,111,1,0,0,0,8,113,1,0,0,0,10,119,1,0,0,0,12,
		126,1,0,0,0,14,134,1,0,0,0,16,136,1,0,0,0,18,138,1,0,0,0,20,149,1,0,0,
		0,22,153,1,0,0,0,24,171,1,0,0,0,26,173,1,0,0,0,28,181,1,0,0,0,30,189,1,
		0,0,0,32,197,1,0,0,0,34,206,1,0,0,0,36,213,1,0,0,0,38,225,1,0,0,0,40,235,
		1,0,0,0,42,237,1,0,0,0,44,244,1,0,0,0,46,251,1,0,0,0,48,253,1,0,0,0,50,
		256,1,0,0,0,52,262,1,0,0,0,54,264,1,0,0,0,56,267,1,0,0,0,58,270,1,0,0,
		0,60,273,1,0,0,0,62,276,1,0,0,0,64,279,1,0,0,0,66,67,5,2,0,0,67,68,3,42,
		21,0,68,72,5,3,0,0,69,71,3,2,1,0,70,69,1,0,0,0,71,74,1,0,0,0,72,70,1,0,
		0,0,72,73,1,0,0,0,73,75,1,0,0,0,74,72,1,0,0,0,75,76,3,4,2,0,76,77,5,0,
		0,1,77,1,1,0,0,0,78,79,5,4,0,0,79,80,3,42,21,0,80,81,5,3,0,0,81,3,1,0,
		0,0,82,84,3,6,3,0,83,82,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,
		0,0,86,5,1,0,0,0,87,85,1,0,0,0,88,89,5,5,0,0,89,90,3,40,20,0,90,91,5,3,
		0,0,91,112,1,0,0,0,92,93,5,6,0,0,93,94,3,38,19,0,94,95,3,40,20,0,95,96,
		5,3,0,0,96,112,1,0,0,0,97,98,5,7,0,0,98,99,3,40,20,0,99,100,3,8,4,0,100,
		112,1,0,0,0,101,103,5,10,0,0,102,101,1,0,0,0,102,103,1,0,0,0,103,104,1,
		0,0,0,104,105,5,11,0,0,105,107,3,14,7,0,106,108,3,16,8,0,107,106,1,0,0,
		0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,3,18,9,0,110,112,1,0,0,0,111,
		88,1,0,0,0,111,92,1,0,0,0,111,97,1,0,0,0,111,102,1,0,0,0,112,7,1,0,0,0,
		113,115,5,8,0,0,114,116,3,10,5,0,115,114,1,0,0,0,115,116,1,0,0,0,116,117,
		1,0,0,0,117,118,5,9,0,0,118,9,1,0,0,0,119,123,3,12,6,0,120,122,3,48,24,
		0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,
		11,1,0,0,0,125,123,1,0,0,0,126,127,3,40,20,0,127,13,1,0,0,0,128,130,5,
		31,0,0,129,128,1,0,0,0,129,130,1,0,0,0,130,131,1,0,0,0,131,132,5,12,0,
		0,132,135,3,46,23,0,133,135,5,31,0,0,134,129,1,0,0,0,134,133,1,0,0,0,135,
		15,1,0,0,0,136,137,3,50,25,0,137,17,1,0,0,0,138,142,5,8,0,0,139,141,3,
		20,10,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,
		0,143,145,1,0,0,0,144,142,1,0,0,0,145,146,5,9,0,0,146,19,1,0,0,0,147,150,
		3,22,11,0,148,150,3,32,16,0,149,147,1,0,0,0,149,148,1,0,0,0,150,21,1,0,
		0,0,151,154,5,14,0,0,152,154,5,15,0,0,153,151,1,0,0,0,153,152,1,0,0,0,
		153,154,1,0,0,0,154,155,1,0,0,0,155,156,3,38,19,0,156,160,3,24,12,0,157,
		159,3,52,26,0,158,157,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,
		1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,163,164,5,3,0,0,164,23,1,0,0,0,
		165,167,5,31,0,0,166,165,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,169,
		5,12,0,0,169,172,5,31,0,0,170,172,5,31,0,0,171,166,1,0,0,0,171,170,1,0,
		0,0,172,25,1,0,0,0,173,174,5,16,0,0,174,178,3,42,21,0,175,177,3,54,27,
		0,176,175,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,
		27,1,0,0,0,180,178,1,0,0,0,181,182,5,17,0,0,182,186,3,42,21,0,183,185,
		3,56,28,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,1,0,
		0,0,187,29,1,0,0,0,188,186,1,0,0,0,189,190,5,18,0,0,190,194,3,42,21,0,
		191,193,3,58,29,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,
		195,1,0,0,0,195,31,1,0,0,0,196,194,1,0,0,0,197,198,3,38,19,0,198,199,3,
		40,20,0,199,201,5,19,0,0,200,202,3,34,17,0,201,200,1,0,0,0,201,202,1,0,
		0,0,202,203,1,0,0,0,203,204,5,20,0,0,204,205,5,3,0,0,205,33,1,0,0,0,206,
		210,3,36,18,0,207,209,3,60,30,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,
		1,0,0,0,210,211,1,0,0,0,211,35,1,0,0,0,212,210,1,0,0,0,213,214,3,38,19,
		0,214,215,3,40,20,0,215,37,1,0,0,0,216,217,6,19,-1,0,217,226,3,42,21,0,
		218,224,5,21,0,0,219,224,5,22,0,0,220,224,5,23,0,0,221,224,5,24,0,0,222,
		224,5,25,0,0,223,218,1,0,0,0,223,219,1,0,0,0,223,220,1,0,0,0,223,221,1,
		0,0,0,223,222,1,0,0,0,224,226,1,0,0,0,225,216,1,0,0,0,225,223,1,0,0,0,
		226,232,1,0,0,0,227,228,10,3,0,0,228,229,5,26,0,0,229,231,5,27,0,0,230,
		227,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,39,1,0,
		0,0,234,232,1,0,0,0,235,236,3,46,23,0,236,41,1,0,0,0,237,241,3,46,23,0,
		238,240,3,62,31,0,239,238,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,
		242,1,0,0,0,242,43,1,0,0,0,243,241,1,0,0,0,244,248,3,42,21,0,245,247,3,
		64,32,0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,
		0,249,45,1,0,0,0,250,248,1,0,0,0,251,252,5,31,0,0,252,47,1,0,0,0,253,254,
		5,1,0,0,254,255,3,12,6,0,255,49,1,0,0,0,256,257,5,13,0,0,257,258,3,44,
		22,0,258,51,1,0,0,0,259,263,3,26,13,0,260,263,3,28,14,0,261,263,3,30,15,
		0,262,259,1,0,0,0,262,260,1,0,0,0,262,261,1,0,0,0,263,53,1,0,0,0,264,265,
		5,1,0,0,265,266,3,42,21,0,266,55,1,0,0,0,267,268,5,1,0,0,268,269,3,42,
		21,0,269,57,1,0,0,0,270,271,5,1,0,0,271,272,3,42,21,0,272,59,1,0,0,0,273,
		274,5,1,0,0,274,275,3,36,18,0,275,61,1,0,0,0,276,277,5,28,0,0,277,278,
		3,46,23,0,278,63,1,0,0,0,279,280,5,1,0,0,280,281,3,42,21,0,281,65,1,0,
		0,0,26,72,85,102,107,111,115,123,129,134,142,149,153,160,166,171,178,186,
		194,201,210,223,225,232,241,248,262
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaModel.Compiler
