//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaLexer : global::MetaDslx.Languages.MetaCompiler.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_KNamespace=2, LR_TSemicolon=3, LR_KUsing=4, LR_KMetamodel=5, 
		LR_KConst=6, LR_KEnum=7, LR_TLBrace=8, LR_TRBrace=9, LR_KAbstract=10, 
		LR_KClass=11, LR_TDollar=12, LR_TColon=13, LR_KContains=14, LR_KDerived=15, 
		LR_KOpposite=16, LR_TLParen=17, LR_TRParen=18, LR_KBool=19, LR_KInt=20, 
		LR_KString=21, LR_KType=22, LR_KVoid=23, LR_TLBracket=24, LR_TRBracket=25, 
		LR_TDot=26, LR_TInteger=27, LR_TDecimal=28, LR_TIdentifier=29, LR_TString=30, 
		LR_TWhitespace=31, LR_TLineEnd=32, LR_TSingleLineComment=33, LR_TMultiLineComment=34;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KConst", "LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", 
		"LR_TDollar", "LR_TColon", "LR_KContains", "LR_KDerived", "LR_KOpposite", 
		"LR_TLParen", "LR_TRParen", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", 
		"LR_KVoid", "LR_TLBracket", "LR_TRBracket", "LR_TDot", "LR_TInteger", 
		"LR_TDecimal", "LR_TIdentifier", "LR_TString", "LR_TWhitespace", "LR_TLineEnd", 
		"LR_TSingleLineComment", "LR_TMultiLineComment"
	};


	public MetaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MetaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'namespace'", "';'", "'using'", "'metamodel'", "'const'", 
		"'enum'", "'{'", "'}'", "'abstract'", "'class'", "'$'", "':'", "'contains'", 
		"'derived'", "'opposite'", "'('", "')'", "'bool'", "'int'", "'string'", 
		"'type'", "'void'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KConst", "LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", 
		"LR_TDollar", "LR_TColon", "LR_KContains", "LR_KDerived", "LR_KOpposite", 
		"LR_TLParen", "LR_TRParen", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", 
		"LR_KVoid", "LR_TLBracket", "LR_TRBracket", "LR_TDot", "LR_TInteger", 
		"LR_TDecimal", "LR_TIdentifier", "LR_TString", "LR_TWhitespace", "LR_TLineEnd", 
		"LR_TSingleLineComment", "LR_TMultiLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,280,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
		1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,18,
		1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
		1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
		1,26,1,26,1,26,5,26,199,8,26,10,26,12,26,202,9,26,3,26,204,8,26,1,27,1,
		27,1,27,5,27,209,8,27,10,27,12,27,212,9,27,3,27,214,8,27,1,27,1,27,4,27,
		218,8,27,11,27,12,27,219,1,28,4,28,223,8,28,11,28,12,28,224,1,28,5,28,
		228,8,28,10,28,12,28,231,9,28,1,29,1,29,5,29,235,8,29,10,29,12,29,238,
		9,29,1,29,1,29,1,30,4,30,243,8,30,11,30,12,30,244,1,30,1,30,1,31,1,31,
		1,31,3,31,252,8,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,260,8,32,10,32,12,
		32,263,9,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,271,8,33,10,33,12,33,274,
		9,33,1,33,1,33,1,33,1,33,1,33,2,236,272,0,34,1,1,3,2,5,3,7,4,9,5,11,6,
		13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
		19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
		31,63,32,65,33,67,34,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
		97,122,2,0,9,9,32,32,2,0,10,10,13,13,291,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
		0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
		17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
		0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
		0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
		1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
		0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,71,
		1,0,0,0,5,81,1,0,0,0,7,83,1,0,0,0,9,89,1,0,0,0,11,99,1,0,0,0,13,105,1,
		0,0,0,15,110,1,0,0,0,17,112,1,0,0,0,19,114,1,0,0,0,21,123,1,0,0,0,23,129,
		1,0,0,0,25,131,1,0,0,0,27,133,1,0,0,0,29,142,1,0,0,0,31,150,1,0,0,0,33,
		159,1,0,0,0,35,161,1,0,0,0,37,163,1,0,0,0,39,168,1,0,0,0,41,172,1,0,0,
		0,43,179,1,0,0,0,45,184,1,0,0,0,47,189,1,0,0,0,49,191,1,0,0,0,51,193,1,
		0,0,0,53,203,1,0,0,0,55,213,1,0,0,0,57,222,1,0,0,0,59,232,1,0,0,0,61,242,
		1,0,0,0,63,251,1,0,0,0,65,255,1,0,0,0,67,266,1,0,0,0,69,70,5,44,0,0,70,
		2,1,0,0,0,71,72,5,110,0,0,72,73,5,97,0,0,73,74,5,109,0,0,74,75,5,101,0,
		0,75,76,5,115,0,0,76,77,5,112,0,0,77,78,5,97,0,0,78,79,5,99,0,0,79,80,
		5,101,0,0,80,4,1,0,0,0,81,82,5,59,0,0,82,6,1,0,0,0,83,84,5,117,0,0,84,
		85,5,115,0,0,85,86,5,105,0,0,86,87,5,110,0,0,87,88,5,103,0,0,88,8,1,0,
		0,0,89,90,5,109,0,0,90,91,5,101,0,0,91,92,5,116,0,0,92,93,5,97,0,0,93,
		94,5,109,0,0,94,95,5,111,0,0,95,96,5,100,0,0,96,97,5,101,0,0,97,98,5,108,
		0,0,98,10,1,0,0,0,99,100,5,99,0,0,100,101,5,111,0,0,101,102,5,110,0,0,
		102,103,5,115,0,0,103,104,5,116,0,0,104,12,1,0,0,0,105,106,5,101,0,0,106,
		107,5,110,0,0,107,108,5,117,0,0,108,109,5,109,0,0,109,14,1,0,0,0,110,111,
		5,123,0,0,111,16,1,0,0,0,112,113,5,125,0,0,113,18,1,0,0,0,114,115,5,97,
		0,0,115,116,5,98,0,0,116,117,5,115,0,0,117,118,5,116,0,0,118,119,5,114,
		0,0,119,120,5,97,0,0,120,121,5,99,0,0,121,122,5,116,0,0,122,20,1,0,0,0,
		123,124,5,99,0,0,124,125,5,108,0,0,125,126,5,97,0,0,126,127,5,115,0,0,
		127,128,5,115,0,0,128,22,1,0,0,0,129,130,5,36,0,0,130,24,1,0,0,0,131,132,
		5,58,0,0,132,26,1,0,0,0,133,134,5,99,0,0,134,135,5,111,0,0,135,136,5,110,
		0,0,136,137,5,116,0,0,137,138,5,97,0,0,138,139,5,105,0,0,139,140,5,110,
		0,0,140,141,5,115,0,0,141,28,1,0,0,0,142,143,5,100,0,0,143,144,5,101,0,
		0,144,145,5,114,0,0,145,146,5,105,0,0,146,147,5,118,0,0,147,148,5,101,
		0,0,148,149,5,100,0,0,149,30,1,0,0,0,150,151,5,111,0,0,151,152,5,112,0,
		0,152,153,5,112,0,0,153,154,5,111,0,0,154,155,5,115,0,0,155,156,5,105,
		0,0,156,157,5,116,0,0,157,158,5,101,0,0,158,32,1,0,0,0,159,160,5,40,0,
		0,160,34,1,0,0,0,161,162,5,41,0,0,162,36,1,0,0,0,163,164,5,98,0,0,164,
		165,5,111,0,0,165,166,5,111,0,0,166,167,5,108,0,0,167,38,1,0,0,0,168,169,
		5,105,0,0,169,170,5,110,0,0,170,171,5,116,0,0,171,40,1,0,0,0,172,173,5,
		115,0,0,173,174,5,116,0,0,174,175,5,114,0,0,175,176,5,105,0,0,176,177,
		5,110,0,0,177,178,5,103,0,0,178,42,1,0,0,0,179,180,5,116,0,0,180,181,5,
		121,0,0,181,182,5,112,0,0,182,183,5,101,0,0,183,44,1,0,0,0,184,185,5,118,
		0,0,185,186,5,111,0,0,186,187,5,105,0,0,187,188,5,100,0,0,188,46,1,0,0,
		0,189,190,5,91,0,0,190,48,1,0,0,0,191,192,5,93,0,0,192,50,1,0,0,0,193,
		194,5,46,0,0,194,52,1,0,0,0,195,204,5,48,0,0,196,200,2,49,57,0,197,199,
		2,48,57,0,198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,
		0,0,201,204,1,0,0,0,202,200,1,0,0,0,203,195,1,0,0,0,203,196,1,0,0,0,204,
		54,1,0,0,0,205,214,5,48,0,0,206,210,2,49,57,0,207,209,2,48,57,0,208,207,
		1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,214,1,0,0,
		0,212,210,1,0,0,0,213,205,1,0,0,0,213,206,1,0,0,0,214,215,1,0,0,0,215,
		217,5,46,0,0,216,218,2,48,57,0,217,216,1,0,0,0,218,219,1,0,0,0,219,217,
		1,0,0,0,219,220,1,0,0,0,220,56,1,0,0,0,221,223,7,0,0,0,222,221,1,0,0,0,
		223,224,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,229,1,0,0,0,226,228,
		7,1,0,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,
		0,230,58,1,0,0,0,231,229,1,0,0,0,232,236,5,34,0,0,233,235,9,0,0,0,234,
		233,1,0,0,0,235,238,1,0,0,0,236,237,1,0,0,0,236,234,1,0,0,0,237,239,1,
		0,0,0,238,236,1,0,0,0,239,240,5,34,0,0,240,60,1,0,0,0,241,243,7,2,0,0,
		242,241,1,0,0,0,243,244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,246,
		1,0,0,0,246,247,6,30,0,0,247,62,1,0,0,0,248,249,5,13,0,0,249,252,5,10,
		0,0,250,252,7,3,0,0,251,248,1,0,0,0,251,250,1,0,0,0,252,253,1,0,0,0,253,
		254,6,31,0,0,254,64,1,0,0,0,255,256,5,47,0,0,256,257,5,47,0,0,257,261,
		1,0,0,0,258,260,8,3,0,0,259,258,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,
		0,261,262,1,0,0,0,262,264,1,0,0,0,263,261,1,0,0,0,264,265,6,32,0,0,265,
		66,1,0,0,0,266,267,5,47,0,0,267,268,5,42,0,0,268,272,1,0,0,0,269,271,9,
		0,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,273,1,0,0,0,272,270,1,0,0,0,
		273,275,1,0,0,0,274,272,1,0,0,0,275,276,5,42,0,0,276,277,5,47,0,0,277,
		278,1,0,0,0,278,279,6,33,0,0,279,68,1,0,0,0,13,0,200,203,210,213,219,224,
		229,236,244,251,261,272,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaModel.Compiler
