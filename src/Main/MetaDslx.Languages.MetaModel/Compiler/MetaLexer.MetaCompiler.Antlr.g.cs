//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaLexer : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_KNamespace=2, LR_TSemicolon=3, LR_KUsing=4, LR_KMetamodel=5, 
		LR_KConst=6, LR_KEnum=7, LR_TLBrace=8, LR_TRBrace=9, LR_KAbstract=10, 
		LR_KClass=11, LR_TDollar=12, LR_TColon=13, LR_KContains=14, LR_KDerived=15, 
		LR_KOpposite=16, LR_KSubsets=17, LR_KRedefines=18, LR_TLParen=19, LR_TRParen=20, 
		LR_KBool=21, LR_KInt=22, LR_KString=23, LR_KType=24, LR_KSymbol=25, LR_KVoid=26, 
		LR_TLBracket=27, LR_TRBracket=28, LR_TDot=29, LR_TInteger=30, LR_TDecimal=31, 
		LR_TIdentifier=32, LR_TString=33, LR_TWhitespace=34, LR_TLineEnd=35, LR_TSingleLineComment=36, 
		LR_TMultiLineComment=37;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KConst", "LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", 
		"LR_TDollar", "LR_TColon", "LR_KContains", "LR_KDerived", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TLParen", "LR_TRParen", "LR_KBool", 
		"LR_KInt", "LR_KString", "LR_KType", "LR_KSymbol", "LR_KVoid", "LR_TLBracket", 
		"LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment"
	};


	public MetaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MetaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'namespace'", "';'", "'using'", "'metamodel'", "'const'", 
		"'enum'", "'{'", "'}'", "'abstract'", "'class'", "'$'", "':'", "'contains'", 
		"'derived'", "'opposite'", "'subsets'", "'redefines'", "'('", "')'", "'bool'", 
		"'int'", "'string'", "'type'", "'symbol'", "'void'", "'['", "']'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", 
		"LR_KConst", "LR_KEnum", "LR_TLBrace", "LR_TRBrace", "LR_KAbstract", "LR_KClass", 
		"LR_TDollar", "LR_TColon", "LR_KContains", "LR_KDerived", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TLParen", "LR_TRParen", "LR_KBool", 
		"LR_KInt", "LR_KString", "LR_KType", "LR_KSymbol", "LR_KVoid", "LR_TLBracket", 
		"LR_TRBracket", "LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,37,311,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,
		5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,
		1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
		1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,27,
		1,27,1,28,1,28,1,29,1,29,1,29,5,29,230,8,29,10,29,12,29,233,9,29,3,29,
		235,8,29,1,30,1,30,1,30,5,30,240,8,30,10,30,12,30,243,9,30,3,30,245,8,
		30,1,30,1,30,4,30,249,8,30,11,30,12,30,250,1,31,4,31,254,8,31,11,31,12,
		31,255,1,31,5,31,259,8,31,10,31,12,31,262,9,31,1,32,1,32,5,32,266,8,32,
		10,32,12,32,269,9,32,1,32,1,32,1,33,4,33,274,8,33,11,33,12,33,275,1,33,
		1,33,1,34,1,34,1,34,3,34,283,8,34,1,34,1,34,1,35,1,35,1,35,1,35,5,35,291,
		8,35,10,35,12,35,294,9,35,1,35,1,35,1,36,1,36,1,36,1,36,5,36,302,8,36,
		10,36,12,36,305,9,36,1,36,1,36,1,36,1,36,1,36,2,267,303,0,37,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
		57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,4,3,0,65,90,
		95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,
		322,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,
		1,0,0,0,5,87,1,0,0,0,7,89,1,0,0,0,9,95,1,0,0,0,11,105,1,0,0,0,13,111,1,
		0,0,0,15,116,1,0,0,0,17,118,1,0,0,0,19,120,1,0,0,0,21,129,1,0,0,0,23,135,
		1,0,0,0,25,137,1,0,0,0,27,139,1,0,0,0,29,148,1,0,0,0,31,156,1,0,0,0,33,
		165,1,0,0,0,35,173,1,0,0,0,37,183,1,0,0,0,39,185,1,0,0,0,41,187,1,0,0,
		0,43,192,1,0,0,0,45,196,1,0,0,0,47,203,1,0,0,0,49,208,1,0,0,0,51,215,1,
		0,0,0,53,220,1,0,0,0,55,222,1,0,0,0,57,224,1,0,0,0,59,234,1,0,0,0,61,244,
		1,0,0,0,63,253,1,0,0,0,65,263,1,0,0,0,67,273,1,0,0,0,69,282,1,0,0,0,71,
		286,1,0,0,0,73,297,1,0,0,0,75,76,5,44,0,0,76,2,1,0,0,0,77,78,5,110,0,0,
		78,79,5,97,0,0,79,80,5,109,0,0,80,81,5,101,0,0,81,82,5,115,0,0,82,83,5,
		112,0,0,83,84,5,97,0,0,84,85,5,99,0,0,85,86,5,101,0,0,86,4,1,0,0,0,87,
		88,5,59,0,0,88,6,1,0,0,0,89,90,5,117,0,0,90,91,5,115,0,0,91,92,5,105,0,
		0,92,93,5,110,0,0,93,94,5,103,0,0,94,8,1,0,0,0,95,96,5,109,0,0,96,97,5,
		101,0,0,97,98,5,116,0,0,98,99,5,97,0,0,99,100,5,109,0,0,100,101,5,111,
		0,0,101,102,5,100,0,0,102,103,5,101,0,0,103,104,5,108,0,0,104,10,1,0,0,
		0,105,106,5,99,0,0,106,107,5,111,0,0,107,108,5,110,0,0,108,109,5,115,0,
		0,109,110,5,116,0,0,110,12,1,0,0,0,111,112,5,101,0,0,112,113,5,110,0,0,
		113,114,5,117,0,0,114,115,5,109,0,0,115,14,1,0,0,0,116,117,5,123,0,0,117,
		16,1,0,0,0,118,119,5,125,0,0,119,18,1,0,0,0,120,121,5,97,0,0,121,122,5,
		98,0,0,122,123,5,115,0,0,123,124,5,116,0,0,124,125,5,114,0,0,125,126,5,
		97,0,0,126,127,5,99,0,0,127,128,5,116,0,0,128,20,1,0,0,0,129,130,5,99,
		0,0,130,131,5,108,0,0,131,132,5,97,0,0,132,133,5,115,0,0,133,134,5,115,
		0,0,134,22,1,0,0,0,135,136,5,36,0,0,136,24,1,0,0,0,137,138,5,58,0,0,138,
		26,1,0,0,0,139,140,5,99,0,0,140,141,5,111,0,0,141,142,5,110,0,0,142,143,
		5,116,0,0,143,144,5,97,0,0,144,145,5,105,0,0,145,146,5,110,0,0,146,147,
		5,115,0,0,147,28,1,0,0,0,148,149,5,100,0,0,149,150,5,101,0,0,150,151,5,
		114,0,0,151,152,5,105,0,0,152,153,5,118,0,0,153,154,5,101,0,0,154,155,
		5,100,0,0,155,30,1,0,0,0,156,157,5,111,0,0,157,158,5,112,0,0,158,159,5,
		112,0,0,159,160,5,111,0,0,160,161,5,115,0,0,161,162,5,105,0,0,162,163,
		5,116,0,0,163,164,5,101,0,0,164,32,1,0,0,0,165,166,5,115,0,0,166,167,5,
		117,0,0,167,168,5,98,0,0,168,169,5,115,0,0,169,170,5,101,0,0,170,171,5,
		116,0,0,171,172,5,115,0,0,172,34,1,0,0,0,173,174,5,114,0,0,174,175,5,101,
		0,0,175,176,5,100,0,0,176,177,5,101,0,0,177,178,5,102,0,0,178,179,5,105,
		0,0,179,180,5,110,0,0,180,181,5,101,0,0,181,182,5,115,0,0,182,36,1,0,0,
		0,183,184,5,40,0,0,184,38,1,0,0,0,185,186,5,41,0,0,186,40,1,0,0,0,187,
		188,5,98,0,0,188,189,5,111,0,0,189,190,5,111,0,0,190,191,5,108,0,0,191,
		42,1,0,0,0,192,193,5,105,0,0,193,194,5,110,0,0,194,195,5,116,0,0,195,44,
		1,0,0,0,196,197,5,115,0,0,197,198,5,116,0,0,198,199,5,114,0,0,199,200,
		5,105,0,0,200,201,5,110,0,0,201,202,5,103,0,0,202,46,1,0,0,0,203,204,5,
		116,0,0,204,205,5,121,0,0,205,206,5,112,0,0,206,207,5,101,0,0,207,48,1,
		0,0,0,208,209,5,115,0,0,209,210,5,121,0,0,210,211,5,109,0,0,211,212,5,
		98,0,0,212,213,5,111,0,0,213,214,5,108,0,0,214,50,1,0,0,0,215,216,5,118,
		0,0,216,217,5,111,0,0,217,218,5,105,0,0,218,219,5,100,0,0,219,52,1,0,0,
		0,220,221,5,91,0,0,221,54,1,0,0,0,222,223,5,93,0,0,223,56,1,0,0,0,224,
		225,5,46,0,0,225,58,1,0,0,0,226,235,5,48,0,0,227,231,2,49,57,0,228,230,
		2,48,57,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,
		0,0,232,235,1,0,0,0,233,231,1,0,0,0,234,226,1,0,0,0,234,227,1,0,0,0,235,
		60,1,0,0,0,236,245,5,48,0,0,237,241,2,49,57,0,238,240,2,48,57,0,239,238,
		1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,245,1,0,0,
		0,243,241,1,0,0,0,244,236,1,0,0,0,244,237,1,0,0,0,245,246,1,0,0,0,246,
		248,5,46,0,0,247,249,2,48,57,0,248,247,1,0,0,0,249,250,1,0,0,0,250,248,
		1,0,0,0,250,251,1,0,0,0,251,62,1,0,0,0,252,254,7,0,0,0,253,252,1,0,0,0,
		254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,260,1,0,0,0,257,259,
		7,1,0,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,
		0,261,64,1,0,0,0,262,260,1,0,0,0,263,267,5,34,0,0,264,266,9,0,0,0,265,
		264,1,0,0,0,266,269,1,0,0,0,267,268,1,0,0,0,267,265,1,0,0,0,268,270,1,
		0,0,0,269,267,1,0,0,0,270,271,5,34,0,0,271,66,1,0,0,0,272,274,7,2,0,0,
		273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,277,
		1,0,0,0,277,278,6,33,0,0,278,68,1,0,0,0,279,280,5,13,0,0,280,283,5,10,
		0,0,281,283,7,3,0,0,282,279,1,0,0,0,282,281,1,0,0,0,283,284,1,0,0,0,284,
		285,6,34,0,0,285,70,1,0,0,0,286,287,5,47,0,0,287,288,5,47,0,0,288,292,
		1,0,0,0,289,291,8,3,0,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,
		0,292,293,1,0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,296,6,35,0,0,296,
		72,1,0,0,0,297,298,5,47,0,0,298,299,5,42,0,0,299,303,1,0,0,0,300,302,9,
		0,0,0,301,300,1,0,0,0,302,305,1,0,0,0,303,304,1,0,0,0,303,301,1,0,0,0,
		304,306,1,0,0,0,305,303,1,0,0,0,306,307,5,42,0,0,307,308,5,47,0,0,308,
		309,1,0,0,0,309,310,6,36,0,0,310,74,1,0,0,0,13,0,231,234,241,244,250,255,
		260,267,275,282,292,303,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaModel.Compiler
