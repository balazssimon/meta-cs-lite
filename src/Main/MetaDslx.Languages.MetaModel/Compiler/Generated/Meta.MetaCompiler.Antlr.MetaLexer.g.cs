//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaLexer : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_KNull=1, LR_KTrue=2, LR_KFalse=3, LR_TComma=4, LR_TUtf8Bom=5, LR_KNamespace=6, 
		LR_TSemicolon=7, LR_KUsing=8, LR_KMetamodel=9, LR_KConst=10, LR_KEnum=11, 
		LR_KAbstract=12, LR_KClass=13, LR_TLParen=14, LR_TRParen=15, LR_KObject=16, 
		LR_KBool=17, LR_KChar=18, LR_KString=19, LR_KByte=20, LR_KSbyte=21, LR_KShort=22, 
		LR_KUshort=23, LR_KInt=24, LR_KUint=25, LR_KLong=26, LR_KUlong=27, LR_KFloat=28, 
		LR_KDouble=29, LR_KDecimal=30, LR_KType=31, LR_KSymbol=32, LR_KVoid=33, 
		LR_TEq=34, LR_TLBrace=35, LR_TRBrace=36, LR_TDollar=37, LR_TColon=38, 
		LR_KContains=39, LR_KDerived=40, LR_KUnion=41, LR_KReadonly=42, LR_KLazy=43, 
		LR_KOpposite=44, LR_KSubsets=45, LR_KRedefines=46, LR_TQuestion=47, LR_TLBracket=48, 
		LR_TRBracket=49, LR_TDot=50, LR_TInteger=51, LR_TDecimal=52, LR_TIdentifier=53, 
		LR_TVerbatimIdentifier=54, LR_TString=55, LR_TWhitespace=56, LR_TLineEnd=57, 
		LR_TSingleLineComment=58, LR_TMultiLineComment=59, LR_TInvalidToken=60;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", "LR_KNamespace", 
		"LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", "LR_KConst", "LR_KEnum", 
		"LR_KAbstract", "LR_KClass", "LR_TLParen", "LR_TRParen", "LR_KObject", 
		"LR_KBool", "LR_KChar", "LR_KString", "LR_KByte", "LR_KSbyte", "LR_KShort", 
		"LR_KUshort", "LR_KInt", "LR_KUint", "LR_KLong", "LR_KUlong", "LR_KFloat", 
		"LR_KDouble", "LR_KDecimal", "LR_KType", "LR_KSymbol", "LR_KVoid", "LR_TEq", 
		"LR_TLBrace", "LR_TRBrace", "LR_TDollar", "LR_TColon", "LR_KContains", 
		"LR_KDerived", "LR_KUnion", "LR_KReadonly", "LR_KLazy", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TQuestion", "LR_TLBracket", "LR_TRBracket", 
		"LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment", "LR_TInvalidToken", "FR_DoubleQuoteTextCharacter", 
		"FR_DoubleQuoteTextSimple", "FR_SingleQuoteTextCharacter", "FR_SingleQuoteTextSimple", 
		"FR_CharacterEscapeSimple", "FR_CharacterEscapeSimpleCharacter", "FR_CharacterEscapeUnicode", 
		"FR_HexDigit"
	};


	public MetaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MetaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'true'", "'false'", "','", null, "'namespace'", "';'", 
		"'using'", "'metamodel'", "'const'", "'enum'", "'abstract'", "'class'", 
		"'('", "')'", "'object'", "'bool'", "'char'", "'string'", "'byte'", "'sbyte'", 
		"'short'", "'ushort'", "'int'", "'uint'", "'long'", "'ulong'", "'float'", 
		"'double'", "'decimal'", "'type'", "'symbol'", "'void'", "'='", "'{'", 
		"'}'", "'$'", "':'", "'contains'", "'derived'", "'union'", "'readonly'", 
		"'lazy'", "'opposite'", "'subsets'", "'redefines'", "'?'", "'['", "']'", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", 
		"LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", "LR_KConst", 
		"LR_KEnum", "LR_KAbstract", "LR_KClass", "LR_TLParen", "LR_TRParen", "LR_KObject", 
		"LR_KBool", "LR_KChar", "LR_KString", "LR_KByte", "LR_KSbyte", "LR_KShort", 
		"LR_KUshort", "LR_KInt", "LR_KUint", "LR_KLong", "LR_KUlong", "LR_KFloat", 
		"LR_KDouble", "LR_KDecimal", "LR_KType", "LR_KSymbol", "LR_KVoid", "LR_TEq", 
		"LR_TLBrace", "LR_TRBrace", "LR_TDollar", "LR_TColon", "LR_KContains", 
		"LR_KDerived", "LR_KUnion", "LR_KReadonly", "LR_KLazy", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TQuestion", "LR_TLBracket", "LR_TRBracket", 
		"LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,60,560,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,0,1,0,1,1,1,
		1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
		1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
		1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
		1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,
		1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
		1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,
		1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,
		1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
		1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,
		1,49,1,50,1,50,1,50,5,50,411,8,50,10,50,12,50,414,9,50,3,50,416,8,50,1,
		51,1,51,1,51,5,51,421,8,51,10,51,12,51,424,9,51,3,51,426,8,51,1,51,1,51,
		4,51,430,8,51,11,51,12,51,431,1,52,4,52,435,8,52,11,52,12,52,436,1,52,
		5,52,440,8,52,10,52,12,52,443,9,52,1,53,1,53,4,53,447,8,53,11,53,12,53,
		448,1,53,5,53,452,8,53,10,53,12,53,455,9,53,1,54,1,54,5,54,459,8,54,10,
		54,12,54,462,9,54,1,54,1,54,1,54,5,54,467,8,54,10,54,12,54,470,9,54,1,
		54,3,54,473,8,54,1,55,4,55,476,8,55,11,55,12,55,477,1,55,1,55,1,56,1,56,
		1,56,3,56,485,8,56,1,56,1,56,1,57,1,57,1,57,1,57,5,57,493,8,57,10,57,12,
		57,496,9,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,504,8,58,10,58,12,58,507,
		9,58,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,3,60,
		521,8,60,1,61,1,61,1,62,1,62,1,62,3,62,528,8,62,1,63,1,63,1,64,1,64,1,
		64,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
		66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,557,8,66,1,67,1,67,1,505,
		0,68,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
		38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
		50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,
		60,121,0,123,0,125,0,127,0,129,0,131,0,133,0,135,0,1,0,8,3,0,65,90,95,
		95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,6,
		0,10,10,13,13,34,34,92,92,133,133,8232,8233,6,0,10,10,13,13,39,39,92,92,
		133,133,8232,8233,10,0,34,34,39,39,48,48,92,92,97,98,102,102,110,110,114,
		114,116,116,118,118,3,0,48,57,65,70,97,102,572,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
		27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
		0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
		0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
		103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
		113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,1,137,1,0,0,0,3,
		142,1,0,0,0,5,147,1,0,0,0,7,153,1,0,0,0,9,155,1,0,0,0,11,161,1,0,0,0,13,
		171,1,0,0,0,15,173,1,0,0,0,17,179,1,0,0,0,19,189,1,0,0,0,21,195,1,0,0,
		0,23,200,1,0,0,0,25,209,1,0,0,0,27,215,1,0,0,0,29,217,1,0,0,0,31,219,1,
		0,0,0,33,226,1,0,0,0,35,231,1,0,0,0,37,236,1,0,0,0,39,243,1,0,0,0,41,248,
		1,0,0,0,43,254,1,0,0,0,45,260,1,0,0,0,47,267,1,0,0,0,49,271,1,0,0,0,51,
		276,1,0,0,0,53,281,1,0,0,0,55,287,1,0,0,0,57,293,1,0,0,0,59,300,1,0,0,
		0,61,308,1,0,0,0,63,313,1,0,0,0,65,320,1,0,0,0,67,325,1,0,0,0,69,327,1,
		0,0,0,71,329,1,0,0,0,73,331,1,0,0,0,75,333,1,0,0,0,77,335,1,0,0,0,79,344,
		1,0,0,0,81,352,1,0,0,0,83,358,1,0,0,0,85,367,1,0,0,0,87,372,1,0,0,0,89,
		381,1,0,0,0,91,389,1,0,0,0,93,399,1,0,0,0,95,401,1,0,0,0,97,403,1,0,0,
		0,99,405,1,0,0,0,101,415,1,0,0,0,103,425,1,0,0,0,105,434,1,0,0,0,107,444,
		1,0,0,0,109,472,1,0,0,0,111,475,1,0,0,0,113,484,1,0,0,0,115,488,1,0,0,
		0,117,499,1,0,0,0,119,513,1,0,0,0,121,520,1,0,0,0,123,522,1,0,0,0,125,
		527,1,0,0,0,127,529,1,0,0,0,129,531,1,0,0,0,131,534,1,0,0,0,133,556,1,
		0,0,0,135,558,1,0,0,0,137,138,5,110,0,0,138,139,5,117,0,0,139,140,5,108,
		0,0,140,141,5,108,0,0,141,2,1,0,0,0,142,143,5,116,0,0,143,144,5,114,0,
		0,144,145,5,117,0,0,145,146,5,101,0,0,146,4,1,0,0,0,147,148,5,102,0,0,
		148,149,5,97,0,0,149,150,5,108,0,0,150,151,5,115,0,0,151,152,5,101,0,0,
		152,6,1,0,0,0,153,154,5,44,0,0,154,8,1,0,0,0,155,156,5,239,0,0,156,157,
		5,187,0,0,157,158,5,191,0,0,158,159,1,0,0,0,159,160,6,4,0,0,160,10,1,0,
		0,0,161,162,5,110,0,0,162,163,5,97,0,0,163,164,5,109,0,0,164,165,5,101,
		0,0,165,166,5,115,0,0,166,167,5,112,0,0,167,168,5,97,0,0,168,169,5,99,
		0,0,169,170,5,101,0,0,170,12,1,0,0,0,171,172,5,59,0,0,172,14,1,0,0,0,173,
		174,5,117,0,0,174,175,5,115,0,0,175,176,5,105,0,0,176,177,5,110,0,0,177,
		178,5,103,0,0,178,16,1,0,0,0,179,180,5,109,0,0,180,181,5,101,0,0,181,182,
		5,116,0,0,182,183,5,97,0,0,183,184,5,109,0,0,184,185,5,111,0,0,185,186,
		5,100,0,0,186,187,5,101,0,0,187,188,5,108,0,0,188,18,1,0,0,0,189,190,5,
		99,0,0,190,191,5,111,0,0,191,192,5,110,0,0,192,193,5,115,0,0,193,194,5,
		116,0,0,194,20,1,0,0,0,195,196,5,101,0,0,196,197,5,110,0,0,197,198,5,117,
		0,0,198,199,5,109,0,0,199,22,1,0,0,0,200,201,5,97,0,0,201,202,5,98,0,0,
		202,203,5,115,0,0,203,204,5,116,0,0,204,205,5,114,0,0,205,206,5,97,0,0,
		206,207,5,99,0,0,207,208,5,116,0,0,208,24,1,0,0,0,209,210,5,99,0,0,210,
		211,5,108,0,0,211,212,5,97,0,0,212,213,5,115,0,0,213,214,5,115,0,0,214,
		26,1,0,0,0,215,216,5,40,0,0,216,28,1,0,0,0,217,218,5,41,0,0,218,30,1,0,
		0,0,219,220,5,111,0,0,220,221,5,98,0,0,221,222,5,106,0,0,222,223,5,101,
		0,0,223,224,5,99,0,0,224,225,5,116,0,0,225,32,1,0,0,0,226,227,5,98,0,0,
		227,228,5,111,0,0,228,229,5,111,0,0,229,230,5,108,0,0,230,34,1,0,0,0,231,
		232,5,99,0,0,232,233,5,104,0,0,233,234,5,97,0,0,234,235,5,114,0,0,235,
		36,1,0,0,0,236,237,5,115,0,0,237,238,5,116,0,0,238,239,5,114,0,0,239,240,
		5,105,0,0,240,241,5,110,0,0,241,242,5,103,0,0,242,38,1,0,0,0,243,244,5,
		98,0,0,244,245,5,121,0,0,245,246,5,116,0,0,246,247,5,101,0,0,247,40,1,
		0,0,0,248,249,5,115,0,0,249,250,5,98,0,0,250,251,5,121,0,0,251,252,5,116,
		0,0,252,253,5,101,0,0,253,42,1,0,0,0,254,255,5,115,0,0,255,256,5,104,0,
		0,256,257,5,111,0,0,257,258,5,114,0,0,258,259,5,116,0,0,259,44,1,0,0,0,
		260,261,5,117,0,0,261,262,5,115,0,0,262,263,5,104,0,0,263,264,5,111,0,
		0,264,265,5,114,0,0,265,266,5,116,0,0,266,46,1,0,0,0,267,268,5,105,0,0,
		268,269,5,110,0,0,269,270,5,116,0,0,270,48,1,0,0,0,271,272,5,117,0,0,272,
		273,5,105,0,0,273,274,5,110,0,0,274,275,5,116,0,0,275,50,1,0,0,0,276,277,
		5,108,0,0,277,278,5,111,0,0,278,279,5,110,0,0,279,280,5,103,0,0,280,52,
		1,0,0,0,281,282,5,117,0,0,282,283,5,108,0,0,283,284,5,111,0,0,284,285,
		5,110,0,0,285,286,5,103,0,0,286,54,1,0,0,0,287,288,5,102,0,0,288,289,5,
		108,0,0,289,290,5,111,0,0,290,291,5,97,0,0,291,292,5,116,0,0,292,56,1,
		0,0,0,293,294,5,100,0,0,294,295,5,111,0,0,295,296,5,117,0,0,296,297,5,
		98,0,0,297,298,5,108,0,0,298,299,5,101,0,0,299,58,1,0,0,0,300,301,5,100,
		0,0,301,302,5,101,0,0,302,303,5,99,0,0,303,304,5,105,0,0,304,305,5,109,
		0,0,305,306,5,97,0,0,306,307,5,108,0,0,307,60,1,0,0,0,308,309,5,116,0,
		0,309,310,5,121,0,0,310,311,5,112,0,0,311,312,5,101,0,0,312,62,1,0,0,0,
		313,314,5,115,0,0,314,315,5,121,0,0,315,316,5,109,0,0,316,317,5,98,0,0,
		317,318,5,111,0,0,318,319,5,108,0,0,319,64,1,0,0,0,320,321,5,118,0,0,321,
		322,5,111,0,0,322,323,5,105,0,0,323,324,5,100,0,0,324,66,1,0,0,0,325,326,
		5,61,0,0,326,68,1,0,0,0,327,328,5,123,0,0,328,70,1,0,0,0,329,330,5,125,
		0,0,330,72,1,0,0,0,331,332,5,36,0,0,332,74,1,0,0,0,333,334,5,58,0,0,334,
		76,1,0,0,0,335,336,5,99,0,0,336,337,5,111,0,0,337,338,5,110,0,0,338,339,
		5,116,0,0,339,340,5,97,0,0,340,341,5,105,0,0,341,342,5,110,0,0,342,343,
		5,115,0,0,343,78,1,0,0,0,344,345,5,100,0,0,345,346,5,101,0,0,346,347,5,
		114,0,0,347,348,5,105,0,0,348,349,5,118,0,0,349,350,5,101,0,0,350,351,
		5,100,0,0,351,80,1,0,0,0,352,353,5,117,0,0,353,354,5,110,0,0,354,355,5,
		105,0,0,355,356,5,111,0,0,356,357,5,110,0,0,357,82,1,0,0,0,358,359,5,114,
		0,0,359,360,5,101,0,0,360,361,5,97,0,0,361,362,5,100,0,0,362,363,5,111,
		0,0,363,364,5,110,0,0,364,365,5,108,0,0,365,366,5,121,0,0,366,84,1,0,0,
		0,367,368,5,108,0,0,368,369,5,97,0,0,369,370,5,122,0,0,370,371,5,121,0,
		0,371,86,1,0,0,0,372,373,5,111,0,0,373,374,5,112,0,0,374,375,5,112,0,0,
		375,376,5,111,0,0,376,377,5,115,0,0,377,378,5,105,0,0,378,379,5,116,0,
		0,379,380,5,101,0,0,380,88,1,0,0,0,381,382,5,115,0,0,382,383,5,117,0,0,
		383,384,5,98,0,0,384,385,5,115,0,0,385,386,5,101,0,0,386,387,5,116,0,0,
		387,388,5,115,0,0,388,90,1,0,0,0,389,390,5,114,0,0,390,391,5,101,0,0,391,
		392,5,100,0,0,392,393,5,101,0,0,393,394,5,102,0,0,394,395,5,105,0,0,395,
		396,5,110,0,0,396,397,5,101,0,0,397,398,5,115,0,0,398,92,1,0,0,0,399,400,
		5,63,0,0,400,94,1,0,0,0,401,402,5,91,0,0,402,96,1,0,0,0,403,404,5,93,0,
		0,404,98,1,0,0,0,405,406,5,46,0,0,406,100,1,0,0,0,407,416,5,48,0,0,408,
		412,2,49,57,0,409,411,2,48,57,0,410,409,1,0,0,0,411,414,1,0,0,0,412,410,
		1,0,0,0,412,413,1,0,0,0,413,416,1,0,0,0,414,412,1,0,0,0,415,407,1,0,0,
		0,415,408,1,0,0,0,416,102,1,0,0,0,417,426,5,48,0,0,418,422,2,49,57,0,419,
		421,2,48,57,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,
		1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,425,417,1,0,0,0,425,418,1,0,0,
		0,426,427,1,0,0,0,427,429,5,46,0,0,428,430,2,48,57,0,429,428,1,0,0,0,430,
		431,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,104,1,0,0,0,433,435,7,
		0,0,0,434,433,1,0,0,0,435,436,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,0,
		437,441,1,0,0,0,438,440,7,1,0,0,439,438,1,0,0,0,440,443,1,0,0,0,441,439,
		1,0,0,0,441,442,1,0,0,0,442,106,1,0,0,0,443,441,1,0,0,0,444,446,5,64,0,
		0,445,447,7,0,0,0,446,445,1,0,0,0,447,448,1,0,0,0,448,446,1,0,0,0,448,
		449,1,0,0,0,449,453,1,0,0,0,450,452,7,1,0,0,451,450,1,0,0,0,452,455,1,
		0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,108,1,0,0,0,455,453,1,0,0,0,
		456,460,5,34,0,0,457,459,3,121,60,0,458,457,1,0,0,0,459,462,1,0,0,0,460,
		458,1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,0,462,460,1,0,0,0,463,473,5,
		34,0,0,464,468,5,39,0,0,465,467,3,125,62,0,466,465,1,0,0,0,467,470,1,0,
		0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,468,1,0,0,0,471,
		473,5,39,0,0,472,456,1,0,0,0,472,464,1,0,0,0,473,110,1,0,0,0,474,476,7,
		2,0,0,475,474,1,0,0,0,476,477,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,
		478,479,1,0,0,0,479,480,6,55,0,0,480,112,1,0,0,0,481,482,5,13,0,0,482,
		485,5,10,0,0,483,485,7,3,0,0,484,481,1,0,0,0,484,483,1,0,0,0,485,486,1,
		0,0,0,486,487,6,56,0,0,487,114,1,0,0,0,488,489,5,47,0,0,489,490,5,47,0,
		0,490,494,1,0,0,0,491,493,8,3,0,0,492,491,1,0,0,0,493,496,1,0,0,0,494,
		492,1,0,0,0,494,495,1,0,0,0,495,497,1,0,0,0,496,494,1,0,0,0,497,498,6,
		57,0,0,498,116,1,0,0,0,499,500,5,47,0,0,500,501,5,42,0,0,501,505,1,0,0,
		0,502,504,9,0,0,0,503,502,1,0,0,0,504,507,1,0,0,0,505,506,1,0,0,0,505,
		503,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,509,5,42,0,0,509,510,5,
		47,0,0,510,511,1,0,0,0,511,512,6,58,0,0,512,118,1,0,0,0,513,514,9,0,0,
		0,514,515,1,0,0,0,515,516,6,59,0,0,516,120,1,0,0,0,517,521,3,123,61,0,
		518,521,3,129,64,0,519,521,3,133,66,0,520,517,1,0,0,0,520,518,1,0,0,0,
		520,519,1,0,0,0,521,122,1,0,0,0,522,523,8,4,0,0,523,124,1,0,0,0,524,528,
		3,127,63,0,525,528,3,129,64,0,526,528,3,133,66,0,527,524,1,0,0,0,527,525,
		1,0,0,0,527,526,1,0,0,0,528,126,1,0,0,0,529,530,8,5,0,0,530,128,1,0,0,
		0,531,532,5,92,0,0,532,533,3,131,65,0,533,130,1,0,0,0,534,535,7,6,0,0,
		535,132,1,0,0,0,536,537,5,92,0,0,537,538,5,117,0,0,538,539,1,0,0,0,539,
		540,3,135,67,0,540,541,3,135,67,0,541,542,3,135,67,0,542,543,3,135,67,
		0,543,557,1,0,0,0,544,545,5,92,0,0,545,546,5,85,0,0,546,547,1,0,0,0,547,
		548,3,135,67,0,548,549,3,135,67,0,549,550,3,135,67,0,550,551,3,135,67,
		0,551,552,3,135,67,0,552,553,3,135,67,0,553,554,3,135,67,0,554,555,3,135,
		67,0,555,557,1,0,0,0,556,536,1,0,0,0,556,544,1,0,0,0,557,134,1,0,0,0,558,
		559,7,7,0,0,559,136,1,0,0,0,20,0,412,415,422,425,431,436,441,448,453,460,
		468,472,477,484,494,505,520,527,556,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaModel.Compiler
