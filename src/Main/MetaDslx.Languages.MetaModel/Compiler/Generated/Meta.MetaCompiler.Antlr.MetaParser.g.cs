#pragma warning disable CS3021
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaParser : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrParser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_KNull=1, LR_KTrue=2, LR_KFalse=3, LR_TComma=4, LR_TUtf8Bom=5, LR_KNamespace=6, 
		LR_TSemicolon=7, LR_KUsing=8, LR_KMetamodel=9, LR_KConst=10, LR_KEnum=11, 
		LR_KAbstract=12, LR_KClass=13, LR_TLParen=14, LR_TRParen=15, LR_KObject=16, 
		LR_KBool=17, LR_KChar=18, LR_KString=19, LR_KByte=20, LR_KSbyte=21, LR_KShort=22, 
		LR_KUshort=23, LR_KInt=24, LR_KUint=25, LR_KLong=26, LR_KUlong=27, LR_KFloat=28, 
		LR_KDouble=29, LR_KDecimal=30, LR_KType=31, LR_KSymbol=32, LR_KVoid=33, 
		LR_TEq=34, LR_TLBrace=35, LR_TRBrace=36, LR_TDollar=37, LR_TColon=38, 
		LR_KContains=39, LR_KDerived=40, LR_KUnion=41, LR_KReadonly=42, LR_KLazy=43, 
		LR_KOpposite=44, LR_KSubsets=45, LR_KRedefines=46, LR_TQuestion=47, LR_TLBracket=48, 
		LR_TRBracket=49, LR_TDot=50, LR_TInteger=51, LR_TDecimal=52, LR_TIdentifier=53, 
		LR_TVerbatimIdentifier=54, LR_TString=55, LR_TWhitespace=56, LR_TLineEnd=57, 
		LR_TSingleLineComment=58, LR_TMultiLineComment=59, LR_TInvalidToken=60;
	public const int
		RULE_pr_Main = 0, RULE_pr_Using = 1, RULE_pr_MetaModel = 2, RULE_pr_MetaDeclaration = 3, 
		RULE_pr_MetaConstant = 4, RULE_pr_MetaEnum = 5, RULE_pr_MetaEnumLiteral = 6, 
		RULE_pr_MetaClass = 7, RULE_pr_MetaProperty = 8, RULE_pr_MetaOperation = 9, 
		RULE_pr_MetaParameter = 10, RULE_pr_MetaTypeReference = 11, RULE_pr_TypeReference = 12, 
		RULE_pr_PrimitiveType = 13, RULE_pr_Value = 14, RULE_pr_Name = 15, RULE_pr_Qualifier = 16, 
		RULE_pr_Identifier = 17, RULE_pr_TBoolean = 18, RULE_pr_MainBlock1 = 19, 
		RULE_pr_MetaModelBlock1 = 20, RULE_pr_MetaEnumBlock1 = 21, RULE_pr_MetaEnumBlock1literalsBlock = 22, 
		RULE_pr_MetaClassBlock1 = 23, RULE_pr_MetaClassBlock2 = 24, RULE_pr_MetaClassBlock2baseTypesBlock = 25, 
		RULE_pr_MetaClassBlock3 = 26, RULE_pr_MetaClassBlock3Block1 = 27, RULE_pr_MetaPropertyBlock1 = 28, 
		RULE_pr_MetaPropertyBlock2 = 29, RULE_pr_MetaPropertyBlock3 = 30, RULE_pr_MetaPropertyBlock4 = 31, 
		RULE_pr_MetaPropertyBlock4Alt1oppositePropertiesBlock = 32, RULE_pr_MetaPropertyBlock4Alt2subsettedPropertiesBlock = 33, 
		RULE_pr_MetaPropertyBlock4Alt3redefinedPropertiesBlock = 34, RULE_pr_MetaOperationBlock1 = 35, 
		RULE_pr_MetaOperationBlock1parametersBlock = 36, RULE_pr_MetaTypeReferenceBlock1 = 37, 
		RULE_pr_MetaTypeReferenceBlock2 = 38, RULE_pr_QualifierIdentifierBlock = 39;
	public static readonly string[] ruleNames = {
		"pr_Main", "pr_Using", "pr_MetaModel", "pr_MetaDeclaration", "pr_MetaConstant", 
		"pr_MetaEnum", "pr_MetaEnumLiteral", "pr_MetaClass", "pr_MetaProperty", 
		"pr_MetaOperation", "pr_MetaParameter", "pr_MetaTypeReference", "pr_TypeReference", 
		"pr_PrimitiveType", "pr_Value", "pr_Name", "pr_Qualifier", "pr_Identifier", 
		"pr_TBoolean", "pr_MainBlock1", "pr_MetaModelBlock1", "pr_MetaEnumBlock1", 
		"pr_MetaEnumBlock1literalsBlock", "pr_MetaClassBlock1", "pr_MetaClassBlock2", 
		"pr_MetaClassBlock2baseTypesBlock", "pr_MetaClassBlock3", "pr_MetaClassBlock3Block1", 
		"pr_MetaPropertyBlock1", "pr_MetaPropertyBlock2", "pr_MetaPropertyBlock3", 
		"pr_MetaPropertyBlock4", "pr_MetaPropertyBlock4Alt1oppositePropertiesBlock", 
		"pr_MetaPropertyBlock4Alt2subsettedPropertiesBlock", "pr_MetaPropertyBlock4Alt3redefinedPropertiesBlock", 
		"pr_MetaOperationBlock1", "pr_MetaOperationBlock1parametersBlock", "pr_MetaTypeReferenceBlock1", 
		"pr_MetaTypeReferenceBlock2", "pr_QualifierIdentifierBlock"
	};

	private static readonly string[] _LiteralNames = {
		null, "'null'", "'true'", "'false'", "','", null, "'namespace'", "';'", 
		"'using'", "'metamodel'", "'const'", "'enum'", "'abstract'", "'class'", 
		"'('", "')'", "'object'", "'bool'", "'char'", "'string'", "'byte'", "'sbyte'", 
		"'short'", "'ushort'", "'int'", "'uint'", "'long'", "'ulong'", "'float'", 
		"'double'", "'decimal'", "'type'", "'symbol'", "'void'", "'='", "'{'", 
		"'}'", "'$'", "':'", "'contains'", "'derived'", "'union'", "'readonly'", 
		"'lazy'", "'opposite'", "'subsets'", "'redefines'", "'?'", "'['", "']'", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_KNull", "LR_KTrue", "LR_KFalse", "LR_TComma", "LR_TUtf8Bom", 
		"LR_KNamespace", "LR_TSemicolon", "LR_KUsing", "LR_KMetamodel", "LR_KConst", 
		"LR_KEnum", "LR_KAbstract", "LR_KClass", "LR_TLParen", "LR_TRParen", "LR_KObject", 
		"LR_KBool", "LR_KChar", "LR_KString", "LR_KByte", "LR_KSbyte", "LR_KShort", 
		"LR_KUshort", "LR_KInt", "LR_KUint", "LR_KLong", "LR_KUlong", "LR_KFloat", 
		"LR_KDouble", "LR_KDecimal", "LR_KType", "LR_KSymbol", "LR_KVoid", "LR_TEq", 
		"LR_TLBrace", "LR_TRBrace", "LR_TDollar", "LR_TColon", "LR_KContains", 
		"LR_KDerived", "LR_KUnion", "LR_KReadonly", "LR_KLazy", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TQuestion", "LR_TLBracket", "LR_TRBracket", 
		"LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MetaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MetaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Pr_MainContext : ParserRuleContext {
		public IToken E_KNamespace;
		public Pr_QualifierContext E_Qualifier;
		public IToken E_TSemicolon;
		public Pr_UsingContext _pr_Using;
		public IList<Pr_UsingContext> _E_UsingList = new List<Pr_UsingContext>();
		public Pr_MainBlock1Context E_Block;
		public IToken E_EndOfFileToken;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNamespace() { return GetToken(MetaParser.LR_KNamespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MainBlock1Context pr_MainBlock1() {
			return GetRuleContext<Pr_MainBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MetaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext[] pr_Using() {
			return GetRuleContexts<Pr_UsingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_UsingContext pr_Using(int i) {
			return GetRuleContext<Pr_UsingContext>(i);
		}
		public Pr_MainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Main; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Main(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainContext pr_Main() {
		Pr_MainContext _localctx = new Pr_MainContext(Context, State);
		EnterRule(_localctx, 0, RULE_pr_Main);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			_localctx.E_KNamespace = Match(LR_KNamespace);
			State = 81;
			_localctx.E_Qualifier = pr_Qualifier();
			State = 82;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_KUsing) {
				{
				{
				State = 83;
				_localctx._pr_Using = pr_Using();
				_localctx._E_UsingList.Add(_localctx._pr_Using);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 89;
			_localctx.E_Block = pr_MainBlock1();
			State = 90;
			_localctx.E_EndOfFileToken = Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_UsingContext : ParserRuleContext {
		public IToken E_KUsing;
		public Pr_QualifierContext E_namespaces;
		public IToken E_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUsing() { return GetToken(MetaParser.LR_KUsing, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		public Pr_UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Using; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Using(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_UsingContext pr_Using() {
		Pr_UsingContext _localctx = new Pr_UsingContext(Context, State);
		EnterRule(_localctx, 2, RULE_pr_Using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			_localctx.E_KUsing = Match(LR_KUsing);
			State = 93;
			_localctx.E_namespaces = pr_Qualifier();
			State = 94;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaModelContext : ParserRuleContext {
		public IToken E_KMetamodel;
		public Pr_NameContext E_Name;
		public Pr_MetaModelBlock1Context E_Block;
		public IToken E_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KMetamodel() { return GetToken(MetaParser.LR_KMetamodel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaModelBlock1Context pr_MetaModelBlock1() {
			return GetRuleContext<Pr_MetaModelBlock1Context>(0);
		}
		public Pr_MetaModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaModel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaModelContext pr_MetaModel() {
		Pr_MetaModelContext _localctx = new Pr_MetaModelContext(Context, State);
		EnterRule(_localctx, 4, RULE_pr_MetaModel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_localctx.E_KMetamodel = Match(LR_KMetamodel);
			State = 97;
			_localctx.E_Name = pr_Name();
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TEq) {
				{
				State = 98;
				_localctx.E_Block = pr_MetaModelBlock1();
				}
			}

			State = 101;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaDeclarationContext : ParserRuleContext {
		public Pr_MetaDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaDeclaration; } }
	 
		public Pr_MetaDeclarationContext() { }
		public virtual void CopyFrom(Pr_MetaDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaDeclarationAlt3Context : Pr_MetaDeclarationContext {
		public Pr_MetaClassContext E_MetaClass;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaClassContext pr_MetaClass() {
			return GetRuleContext<Pr_MetaClassContext>(0);
		}
		public Pr_MetaDeclarationAlt3Context(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaDeclarationAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaDeclarationAlt1Context : Pr_MetaDeclarationContext {
		public Pr_MetaConstantContext E_MetaConstant;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaConstantContext pr_MetaConstant() {
			return GetRuleContext<Pr_MetaConstantContext>(0);
		}
		public Pr_MetaDeclarationAlt1Context(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaDeclarationAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaDeclarationAlt2Context : Pr_MetaDeclarationContext {
		public Pr_MetaEnumContext E_MetaEnum;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumContext pr_MetaEnum() {
			return GetRuleContext<Pr_MetaEnumContext>(0);
		}
		public Pr_MetaDeclarationAlt2Context(Pr_MetaDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaDeclarationAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaDeclarationContext pr_MetaDeclaration() {
		Pr_MetaDeclarationContext _localctx = new Pr_MetaDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pr_MetaDeclaration);
		try {
			State = 106;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KConst:
				_localctx = new Pr_MetaDeclarationAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 103;
				((Pr_MetaDeclarationAlt1Context)_localctx).E_MetaConstant = pr_MetaConstant();
				}
				break;
			case LR_KEnum:
				_localctx = new Pr_MetaDeclarationAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 104;
				((Pr_MetaDeclarationAlt2Context)_localctx).E_MetaEnum = pr_MetaEnum();
				}
				break;
			case LR_KAbstract:
			case LR_KClass:
				_localctx = new Pr_MetaDeclarationAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 105;
				((Pr_MetaDeclarationAlt3Context)_localctx).E_MetaClass = pr_MetaClass();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaConstantContext : ParserRuleContext {
		public IToken E_KConst;
		public Pr_MetaTypeReferenceContext E_type;
		public Pr_NameContext E_Name;
		public IToken E_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KConst() { return GetToken(MetaParser.LR_KConst, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaTypeReferenceContext pr_MetaTypeReference() {
			return GetRuleContext<Pr_MetaTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		public Pr_MetaConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaConstantContext pr_MetaConstant() {
		Pr_MetaConstantContext _localctx = new Pr_MetaConstantContext(Context, State);
		EnterRule(_localctx, 8, RULE_pr_MetaConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			_localctx.E_KConst = Match(LR_KConst);
			State = 109;
			_localctx.E_type = pr_MetaTypeReference();
			State = 110;
			_localctx.E_Name = pr_Name();
			State = 111;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaEnumContext : ParserRuleContext {
		public IToken E_KEnum;
		public Pr_NameContext E_Name;
		public Pr_MetaEnumBlock1Context E_Block;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KEnum() { return GetToken(MetaParser.LR_KEnum, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumBlock1Context pr_MetaEnumBlock1() {
			return GetRuleContext<Pr_MetaEnumBlock1Context>(0);
		}
		public Pr_MetaEnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaEnum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaEnumContext pr_MetaEnum() {
		Pr_MetaEnumContext _localctx = new Pr_MetaEnumContext(Context, State);
		EnterRule(_localctx, 10, RULE_pr_MetaEnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_localctx.E_KEnum = Match(LR_KEnum);
			State = 114;
			_localctx.E_Name = pr_Name();
			State = 115;
			_localctx.E_Block = pr_MetaEnumBlock1();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaEnumLiteralContext : ParserRuleContext {
		public Pr_NameContext E_Name;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_MetaEnumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaEnumLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnumLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
		Pr_MetaEnumLiteralContext _localctx = new Pr_MetaEnumLiteralContext(Context, State);
		EnterRule(_localctx, 12, RULE_pr_MetaEnumLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			_localctx.E_Name = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaClassContext : ParserRuleContext {
		public IToken E_isAbstract;
		public IToken E_KClass;
		public Pr_MetaClassBlock1Context E_Block;
		public Pr_MetaClassBlock2Context E_Block1;
		public Pr_MetaClassBlock3Context E_Block2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KClass() { return GetToken(MetaParser.LR_KClass, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaClassBlock1Context pr_MetaClassBlock1() {
			return GetRuleContext<Pr_MetaClassBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaClassBlock3Context pr_MetaClassBlock3() {
			return GetRuleContext<Pr_MetaClassBlock3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KAbstract() { return GetToken(MetaParser.LR_KAbstract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaClassBlock2Context pr_MetaClassBlock2() {
			return GetRuleContext<Pr_MetaClassBlock2Context>(0);
		}
		public Pr_MetaClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaClassContext pr_MetaClass() {
		Pr_MetaClassContext _localctx = new Pr_MetaClassContext(Context, State);
		EnterRule(_localctx, 14, RULE_pr_MetaClass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_KAbstract) {
				{
				State = 119;
				_localctx.E_isAbstract = Match(LR_KAbstract);
				}
			}

			State = 122;
			_localctx.E_KClass = Match(LR_KClass);
			State = 123;
			_localctx.E_Block = pr_MetaClassBlock1();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TColon) {
				{
				State = 124;
				_localctx.E_Block1 = pr_MetaClassBlock2();
				}
			}

			State = 127;
			_localctx.E_Block2 = pr_MetaClassBlock3();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyContext : ParserRuleContext {
		public Pr_MetaPropertyBlock1Context E_Block;
		public Pr_MetaTypeReferenceContext E_type;
		public Pr_MetaPropertyBlock2Context E_Block1;
		public Pr_MetaPropertyBlock3Context E_Block2;
		public Pr_MetaPropertyBlock4Context _pr_MetaPropertyBlock4;
		public IList<Pr_MetaPropertyBlock4Context> _E_Block3 = new List<Pr_MetaPropertyBlock4Context>();
		public IToken E_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaTypeReferenceContext pr_MetaTypeReference() {
			return GetRuleContext<Pr_MetaTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyBlock2Context pr_MetaPropertyBlock2() {
			return GetRuleContext<Pr_MetaPropertyBlock2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyBlock1Context pr_MetaPropertyBlock1() {
			return GetRuleContext<Pr_MetaPropertyBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyBlock3Context pr_MetaPropertyBlock3() {
			return GetRuleContext<Pr_MetaPropertyBlock3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyBlock4Context[] pr_MetaPropertyBlock4() {
			return GetRuleContexts<Pr_MetaPropertyBlock4Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyBlock4Context pr_MetaPropertyBlock4(int i) {
			return GetRuleContext<Pr_MetaPropertyBlock4Context>(i);
		}
		public Pr_MetaPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyContext pr_MetaProperty() {
		Pr_MetaPropertyContext _localctx = new Pr_MetaPropertyContext(Context, State);
		EnterRule(_localctx, 16, RULE_pr_MetaProperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 17042430230528L) != 0)) {
				{
				State = 129;
				_localctx.E_Block = pr_MetaPropertyBlock1();
				}
			}

			State = 132;
			_localctx.E_type = pr_MetaTypeReference();
			State = 133;
			_localctx.E_Block1 = pr_MetaPropertyBlock2();
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TEq) {
				{
				State = 134;
				_localctx.E_Block2 = pr_MetaPropertyBlock3();
				}
			}

			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 123145302310912L) != 0)) {
				{
				{
				State = 137;
				_localctx._pr_MetaPropertyBlock4 = pr_MetaPropertyBlock4();
				_localctx._E_Block3.Add(_localctx._pr_MetaPropertyBlock4);
				}
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 143;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaOperationContext : ParserRuleContext {
		public Pr_MetaTypeReferenceContext E_returnType;
		public Pr_NameContext E_Name;
		public IToken E_TLParen;
		public Pr_MetaOperationBlock1Context E_Block;
		public IToken E_TRParen;
		public IToken E_TSemicolon;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaTypeReferenceContext pr_MetaTypeReference() {
			return GetRuleContext<Pr_MetaTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLParen() { return GetToken(MetaParser.LR_TLParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRParen() { return GetToken(MetaParser.LR_TRParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TSemicolon() { return GetToken(MetaParser.LR_TSemicolon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaOperationBlock1Context pr_MetaOperationBlock1() {
			return GetRuleContext<Pr_MetaOperationBlock1Context>(0);
		}
		public Pr_MetaOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaOperationContext pr_MetaOperation() {
		Pr_MetaOperationContext _localctx = new Pr_MetaOperationContext(Context, State);
		EnterRule(_localctx, 18, RULE_pr_MetaOperation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			_localctx.E_returnType = pr_MetaTypeReference();
			State = 146;
			_localctx.E_Name = pr_Name();
			State = 147;
			_localctx.E_TLParen = Match(LR_TLParen);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27021614944026624L) != 0)) {
				{
				State = 148;
				_localctx.E_Block = pr_MetaOperationBlock1();
				}
			}

			State = 151;
			_localctx.E_TRParen = Match(LR_TRParen);
			State = 152;
			_localctx.E_TSemicolon = Match(LR_TSemicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaParameterContext : ParserRuleContext {
		public Pr_MetaTypeReferenceContext E_type;
		public Pr_NameContext E_Name;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaTypeReferenceContext pr_MetaTypeReference() {
			return GetRuleContext<Pr_MetaTypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_NameContext pr_Name() {
			return GetRuleContext<Pr_NameContext>(0);
		}
		public Pr_MetaParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaParameterContext pr_MetaParameter() {
		Pr_MetaParameterContext _localctx = new Pr_MetaParameterContext(Context, State);
		EnterRule(_localctx, 20, RULE_pr_MetaParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			_localctx.E_type = pr_MetaTypeReference();
			State = 155;
			_localctx.E_Name = pr_Name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaTypeReferenceContext : ParserRuleContext {
		public Pr_TypeReferenceContext E_type;
		public Pr_MetaTypeReferenceBlock1Context E_Block;
		public Pr_MetaTypeReferenceBlock2Context E_Block1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TypeReferenceContext pr_TypeReference() {
			return GetRuleContext<Pr_TypeReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaTypeReferenceBlock1Context pr_MetaTypeReferenceBlock1() {
			return GetRuleContext<Pr_MetaTypeReferenceBlock1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaTypeReferenceBlock2Context pr_MetaTypeReferenceBlock2() {
			return GetRuleContext<Pr_MetaTypeReferenceBlock2Context>(0);
		}
		public Pr_MetaTypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaTypeReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaTypeReference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaTypeReferenceContext pr_MetaTypeReference() {
		Pr_MetaTypeReferenceContext _localctx = new Pr_MetaTypeReferenceContext(Context, State);
		EnterRule(_localctx, 22, RULE_pr_MetaTypeReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			_localctx.E_type = pr_TypeReference();
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TQuestion) {
				{
				State = 158;
				_localctx.E_Block = pr_MetaTypeReferenceBlock1();
				}
			}

			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LR_TLBracket) {
				{
				State = 161;
				_localctx.E_Block1 = pr_MetaTypeReferenceBlock2();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TypeReferenceContext : ParserRuleContext {
		public Pr_TypeReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TypeReference; } }
	 
		public Pr_TypeReferenceContext() { }
		public virtual void CopyFrom(Pr_TypeReferenceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_TypeReferenceAlt1Context : Pr_TypeReferenceContext {
		public Pr_PrimitiveTypeContext E_PrimitiveType;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_PrimitiveTypeContext pr_PrimitiveType() {
			return GetRuleContext<Pr_PrimitiveTypeContext>(0);
		}
		public Pr_TypeReferenceAlt1Context(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReferenceAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_TypeReferenceAlt2Context : Pr_TypeReferenceContext {
		public Pr_QualifierContext E_Qualifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_TypeReferenceAlt2Context(Pr_TypeReferenceContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TypeReferenceAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TypeReferenceContext pr_TypeReference() {
		Pr_TypeReferenceContext _localctx = new Pr_TypeReferenceContext(Context, State);
		EnterRule(_localctx, 24, RULE_pr_TypeReference);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KObject:
			case LR_KBool:
			case LR_KChar:
			case LR_KString:
			case LR_KByte:
			case LR_KSbyte:
			case LR_KShort:
			case LR_KUshort:
			case LR_KInt:
			case LR_KUint:
			case LR_KLong:
			case LR_KUlong:
			case LR_KFloat:
			case LR_KDouble:
			case LR_KDecimal:
			case LR_KType:
			case LR_KSymbol:
			case LR_KVoid:
				_localctx = new Pr_TypeReferenceAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 164;
				((Pr_TypeReferenceAlt1Context)_localctx).E_PrimitiveType = pr_PrimitiveType();
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_TypeReferenceAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 165;
				((Pr_TypeReferenceAlt2Context)_localctx).E_Qualifier = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_PrimitiveTypeContext : ParserRuleContext {
		public IToken E_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KObject() { return GetToken(MetaParser.LR_KObject, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KBool() { return GetToken(MetaParser.LR_KBool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KChar() { return GetToken(MetaParser.LR_KChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KString() { return GetToken(MetaParser.LR_KString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KByte() { return GetToken(MetaParser.LR_KByte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSbyte() { return GetToken(MetaParser.LR_KSbyte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KShort() { return GetToken(MetaParser.LR_KShort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUshort() { return GetToken(MetaParser.LR_KUshort, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KInt() { return GetToken(MetaParser.LR_KInt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUint() { return GetToken(MetaParser.LR_KUint, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KLong() { return GetToken(MetaParser.LR_KLong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUlong() { return GetToken(MetaParser.LR_KUlong, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFloat() { return GetToken(MetaParser.LR_KFloat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDouble() { return GetToken(MetaParser.LR_KDouble, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDecimal() { return GetToken(MetaParser.LR_KDecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KType() { return GetToken(MetaParser.LR_KType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSymbol() { return GetToken(MetaParser.LR_KSymbol, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KVoid() { return GetToken(MetaParser.LR_KVoid, 0); }
		public Pr_PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_PrimitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_PrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_PrimitiveTypeContext pr_PrimitiveType() {
		Pr_PrimitiveTypeContext _localctx = new Pr_PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_pr_PrimitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_localctx.E_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17179803648L) != 0)) ) {
				_localctx.E_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_ValueContext : ParserRuleContext {
		public Pr_ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Value; } }
	 
		public Pr_ValueContext() { }
		public virtual void CopyFrom(Pr_ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_ValueAlt5Context : Pr_ValueContext {
		public IToken E_KNull;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KNull() { return GetToken(MetaParser.LR_KNull, 0); }
		public Pr_ValueAlt5Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt6Context : Pr_ValueContext {
		public Pr_QualifierContext E_Qualifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_ValueAlt6Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt6(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt3Context : Pr_ValueContext {
		public IToken E_TDecimal;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDecimal() { return GetToken(MetaParser.LR_TDecimal, 0); }
		public Pr_ValueAlt3Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt4Context : Pr_ValueContext {
		public Pr_TBooleanContext E_TBoolean;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_TBooleanContext pr_TBoolean() {
			return GetRuleContext<Pr_TBooleanContext>(0);
		}
		public Pr_ValueAlt4Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt1Context : Pr_ValueContext {
		public IToken E_TString;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(MetaParser.LR_TString, 0); }
		public Pr_ValueAlt1Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_ValueAlt2Context : Pr_ValueContext {
		public IToken E_TInteger;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TInteger() { return GetToken(MetaParser.LR_TInteger, 0); }
		public Pr_ValueAlt2Context(Pr_ValueContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_ValueAlt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_ValueContext pr_Value() {
		Pr_ValueContext _localctx = new Pr_ValueContext(Context, State);
		EnterRule(_localctx, 28, RULE_pr_Value);
		try {
			State = 176;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_TString:
				_localctx = new Pr_ValueAlt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 170;
				((Pr_ValueAlt1Context)_localctx).E_TString = Match(LR_TString);
				}
				break;
			case LR_TInteger:
				_localctx = new Pr_ValueAlt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				((Pr_ValueAlt2Context)_localctx).E_TInteger = Match(LR_TInteger);
				}
				break;
			case LR_TDecimal:
				_localctx = new Pr_ValueAlt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 172;
				((Pr_ValueAlt3Context)_localctx).E_TDecimal = Match(LR_TDecimal);
				}
				break;
			case LR_KTrue:
			case LR_KFalse:
				_localctx = new Pr_ValueAlt4Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 173;
				((Pr_ValueAlt4Context)_localctx).E_TBoolean = pr_TBoolean();
				}
				break;
			case LR_KNull:
				_localctx = new Pr_ValueAlt5Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 174;
				((Pr_ValueAlt5Context)_localctx).E_KNull = Match(LR_KNull);
				}
				break;
			case LR_TIdentifier:
			case LR_TVerbatimIdentifier:
				_localctx = new Pr_ValueAlt6Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 175;
				((Pr_ValueAlt6Context)_localctx).E_Qualifier = pr_Qualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_NameContext : ParserRuleContext {
		public Pr_IdentifierContext E_Identifier;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_NameContext pr_Name() {
		Pr_NameContext _localctx = new Pr_NameContext(Context, State);
		EnterRule(_localctx, 30, RULE_pr_Name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			_localctx.E_Identifier = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierContext : ParserRuleContext {
		public Pr_IdentifierContext E_Identifier1;
		public IToken _LR_TDot;
		public IList<IToken> _E_TDot1 = new List<IToken>();
		public Pr_IdentifierContext _pr_Identifier;
		public IList<Pr_IdentifierContext> _E_Identifier2 = new List<Pr_IdentifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext[] pr_Identifier() {
			return GetRuleContexts<Pr_IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier(int i) {
			return GetRuleContext<Pr_IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TDot() { return GetTokens(MetaParser.LR_TDot); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot(int i) {
			return GetToken(MetaParser.LR_TDot, i);
		}
		public Pr_QualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Qualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Qualifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierContext pr_Qualifier() {
		Pr_QualifierContext _localctx = new Pr_QualifierContext(Context, State);
		EnterRule(_localctx, 32, RULE_pr_Qualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			_localctx.E_Identifier1 = pr_Identifier();
			State = 185;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TDot) {
				{
				{
				State = 181;
				_localctx._LR_TDot = Match(LR_TDot);
				_localctx._E_TDot1.Add(_localctx._LR_TDot);
				State = 182;
				_localctx._pr_Identifier = pr_Identifier();
				_localctx._E_Identifier2.Add(_localctx._pr_Identifier);
				}
				}
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_IdentifierContext : ParserRuleContext {
		public IToken E_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TIdentifier() { return GetToken(MetaParser.LR_TIdentifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TVerbatimIdentifier() { return GetToken(MetaParser.LR_TVerbatimIdentifier, 0); }
		public Pr_IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_Identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_Identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_IdentifierContext pr_Identifier() {
		Pr_IdentifierContext _localctx = new Pr_IdentifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_pr_Identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			_localctx.E_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) ) {
				_localctx.E_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_TBooleanContext : ParserRuleContext {
		public IToken E_Token;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KTrue() { return GetToken(MetaParser.LR_KTrue, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KFalse() { return GetToken(MetaParser.LR_KFalse, 0); }
		public Pr_TBooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_TBoolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_TBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_TBooleanContext pr_TBoolean() {
		Pr_TBooleanContext _localctx = new Pr_TBooleanContext(Context, State);
		EnterRule(_localctx, 36, RULE_pr_TBoolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			_localctx.E_Token = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LR_KTrue || _la==LR_KFalse) ) {
				_localctx.E_Token = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MainBlock1Context : ParserRuleContext {
		public Pr_MetaModelContext E_MetaModel;
		public Pr_MetaDeclarationContext _pr_MetaDeclaration;
		public IList<Pr_MetaDeclarationContext> _E_MetaDeclarationList = new List<Pr_MetaDeclarationContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaModelContext pr_MetaModel() {
			return GetRuleContext<Pr_MetaModelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaDeclarationContext[] pr_MetaDeclaration() {
			return GetRuleContexts<Pr_MetaDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaDeclarationContext pr_MetaDeclaration(int i) {
			return GetRuleContext<Pr_MetaDeclarationContext>(i);
		}
		public Pr_MainBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MainBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MainBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MainBlock1Context pr_MainBlock1() {
		Pr_MainBlock1Context _localctx = new Pr_MainBlock1Context(Context, State);
		EnterRule(_localctx, 38, RULE_pr_MainBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192;
			_localctx.E_MetaModel = pr_MetaModel();
			State = 196;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 15360L) != 0)) {
				{
				{
				State = 193;
				_localctx._pr_MetaDeclaration = pr_MetaDeclaration();
				_localctx._E_MetaDeclarationList.Add(_localctx._pr_MetaDeclaration);
				}
				}
				State = 198;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaModelBlock1Context : ParserRuleContext {
		public IToken E_TEq;
		public IToken E_uri;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEq() { return GetToken(MetaParser.LR_TEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TString() { return GetToken(MetaParser.LR_TString, 0); }
		public Pr_MetaModelBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaModelBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaModelBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaModelBlock1Context pr_MetaModelBlock1() {
		Pr_MetaModelBlock1Context _localctx = new Pr_MetaModelBlock1Context(Context, State);
		EnterRule(_localctx, 40, RULE_pr_MetaModelBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_localctx.E_TEq = Match(LR_TEq);
			State = 200;
			_localctx.E_uri = Match(LR_TString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaEnumBlock1Context : ParserRuleContext {
		public IToken E_TLBrace;
		public Pr_MetaEnumLiteralContext E_literals1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_MetaEnumLiteralContext _pr_MetaEnumLiteral;
		public IList<Pr_MetaEnumLiteralContext> _E_literals2 = new List<Pr_MetaEnumLiteralContext>();
		public IToken E_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(MetaParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext[] pr_MetaEnumLiteral() {
			return GetRuleContexts<Pr_MetaEnumLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral(int i) {
			return GetRuleContext<Pr_MetaEnumLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(MetaParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_MetaEnumBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaEnumBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnumBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaEnumBlock1Context pr_MetaEnumBlock1() {
		Pr_MetaEnumBlock1Context _localctx = new Pr_MetaEnumBlock1Context(Context, State);
		EnterRule(_localctx, 42, RULE_pr_MetaEnumBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			_localctx.E_TLBrace = Match(LR_TLBrace);
			State = 203;
			_localctx.E_literals1 = pr_MetaEnumLiteral();
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 204;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._E_TComma1.Add(_localctx._LR_TComma);
				State = 205;
				_localctx._pr_MetaEnumLiteral = pr_MetaEnumLiteral();
				_localctx._E_literals2.Add(_localctx._pr_MetaEnumLiteral);
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 211;
			_localctx.E_TRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaEnumBlock1literalsBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_MetaEnumLiteralContext E_literals2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaEnumLiteralContext pr_MetaEnumLiteral() {
			return GetRuleContext<Pr_MetaEnumLiteralContext>(0);
		}
		public Pr_MetaEnumBlock1literalsBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaEnumBlock1literalsBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaEnumBlock1literalsBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaEnumBlock1literalsBlockContext pr_MetaEnumBlock1literalsBlock() {
		Pr_MetaEnumBlock1literalsBlockContext _localctx = new Pr_MetaEnumBlock1literalsBlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_pr_MetaEnumBlock1literalsBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 214;
			_localctx.E_literals2 = pr_MetaEnumLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaClassBlock1Context : ParserRuleContext {
		public Pr_MetaClassBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaClassBlock1; } }
	 
		public Pr_MetaClassBlock1Context() { }
		public virtual void CopyFrom(Pr_MetaClassBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaClassBlock1Alt2Context : Pr_MetaClassBlock1Context {
		public Pr_IdentifierContext E_Identifier1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_MetaClassBlock1Alt2Context(Pr_MetaClassBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClassBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaClassBlock1Alt1Context : Pr_MetaClassBlock1Context {
		public Pr_IdentifierContext E_Identifier;
		public IToken E_TDollar;
		public Pr_IdentifierContext E_symbolType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDollar() { return GetToken(MetaParser.LR_TDollar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext[] pr_Identifier() {
			return GetRuleContexts<Pr_IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier(int i) {
			return GetRuleContext<Pr_IdentifierContext>(i);
		}
		public Pr_MetaClassBlock1Alt1Context(Pr_MetaClassBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClassBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaClassBlock1Context pr_MetaClassBlock1() {
		Pr_MetaClassBlock1Context _localctx = new Pr_MetaClassBlock1Context(Context, State);
		EnterRule(_localctx, 46, RULE_pr_MetaClassBlock1);
		int _la;
		try {
			State = 222;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new Pr_MetaClassBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) {
					{
					State = 216;
					((Pr_MetaClassBlock1Alt1Context)_localctx).E_Identifier = pr_Identifier();
					}
				}

				State = 219;
				((Pr_MetaClassBlock1Alt1Context)_localctx).E_TDollar = Match(LR_TDollar);
				State = 220;
				((Pr_MetaClassBlock1Alt1Context)_localctx).E_symbolType = pr_Identifier();
				}
				break;
			case 2:
				_localctx = new Pr_MetaClassBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 221;
				((Pr_MetaClassBlock1Alt2Context)_localctx).E_Identifier1 = pr_Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaClassBlock2Context : ParserRuleContext {
		public IToken E_TColon;
		public Pr_QualifierContext E_baseTypes1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _E_baseTypes2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TColon() { return GetToken(MetaParser.LR_TColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_MetaClassBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaClassBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClassBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaClassBlock2Context pr_MetaClassBlock2() {
		Pr_MetaClassBlock2Context _localctx = new Pr_MetaClassBlock2Context(Context, State);
		EnterRule(_localctx, 48, RULE_pr_MetaClassBlock2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			_localctx.E_TColon = Match(LR_TColon);
			State = 225;
			_localctx.E_baseTypes1 = pr_Qualifier();
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 226;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._E_TComma1.Add(_localctx._LR_TComma);
				State = 227;
				_localctx._pr_Qualifier = pr_Qualifier();
				_localctx._E_baseTypes2.Add(_localctx._pr_Qualifier);
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaClassBlock2baseTypesBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_QualifierContext E_baseTypes2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_MetaClassBlock2baseTypesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaClassBlock2baseTypesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClassBlock2baseTypesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaClassBlock2baseTypesBlockContext pr_MetaClassBlock2baseTypesBlock() {
		Pr_MetaClassBlock2baseTypesBlockContext _localctx = new Pr_MetaClassBlock2baseTypesBlockContext(Context, State);
		EnterRule(_localctx, 50, RULE_pr_MetaClassBlock2baseTypesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 234;
			_localctx.E_baseTypes2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaClassBlock3Context : ParserRuleContext {
		public IToken E_TLBrace;
		public Pr_MetaClassBlock3Block1Context _pr_MetaClassBlock3Block1;
		public IList<Pr_MetaClassBlock3Block1Context> _E_Block = new List<Pr_MetaClassBlock3Block1Context>();
		public IToken E_TRBrace;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBrace() { return GetToken(MetaParser.LR_TLBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBrace() { return GetToken(MetaParser.LR_TRBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaClassBlock3Block1Context[] pr_MetaClassBlock3Block1() {
			return GetRuleContexts<Pr_MetaClassBlock3Block1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaClassBlock3Block1Context pr_MetaClassBlock3Block1(int i) {
			return GetRuleContext<Pr_MetaClassBlock3Block1Context>(i);
		}
		public Pr_MetaClassBlock3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaClassBlock3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClassBlock3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaClassBlock3Context pr_MetaClassBlock3() {
		Pr_MetaClassBlock3Context _localctx = new Pr_MetaClassBlock3Context(Context, State);
		EnterRule(_localctx, 52, RULE_pr_MetaClassBlock3);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			_localctx.E_TLBrace = Match(LR_TLBrace);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 27038657374257152L) != 0)) {
				{
				{
				State = 237;
				_localctx._pr_MetaClassBlock3Block1 = pr_MetaClassBlock3Block1();
				_localctx._E_Block.Add(_localctx._pr_MetaClassBlock3Block1);
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 243;
			_localctx.E_TRBrace = Match(LR_TRBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaClassBlock3Block1Context : ParserRuleContext {
		public Pr_MetaClassBlock3Block1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaClassBlock3Block1; } }
	 
		public Pr_MetaClassBlock3Block1Context() { }
		public virtual void CopyFrom(Pr_MetaClassBlock3Block1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaClassBlock3Block1Alt1Context : Pr_MetaClassBlock3Block1Context {
		public Pr_MetaPropertyContext E_properties;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaPropertyContext pr_MetaProperty() {
			return GetRuleContext<Pr_MetaPropertyContext>(0);
		}
		public Pr_MetaClassBlock3Block1Alt1Context(Pr_MetaClassBlock3Block1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClassBlock3Block1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaClassBlock3Block1Alt2Context : Pr_MetaClassBlock3Block1Context {
		public Pr_MetaOperationContext E_operations;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaOperationContext pr_MetaOperation() {
			return GetRuleContext<Pr_MetaOperationContext>(0);
		}
		public Pr_MetaClassBlock3Block1Alt2Context(Pr_MetaClassBlock3Block1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaClassBlock3Block1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaClassBlock3Block1Context pr_MetaClassBlock3Block1() {
		Pr_MetaClassBlock3Block1Context _localctx = new Pr_MetaClassBlock3Block1Context(Context, State);
		EnterRule(_localctx, 54, RULE_pr_MetaClassBlock3Block1);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				_localctx = new Pr_MetaClassBlock3Block1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 245;
				((Pr_MetaClassBlock3Block1Alt1Context)_localctx).E_properties = pr_MetaProperty();
				}
				break;
			case 2:
				_localctx = new Pr_MetaClassBlock3Block1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 246;
				((Pr_MetaClassBlock3Block1Alt2Context)_localctx).E_operations = pr_MetaOperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyBlock1Context : ParserRuleContext {
		public Pr_MetaPropertyBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaPropertyBlock1; } }
	 
		public Pr_MetaPropertyBlock1Context() { }
		public virtual void CopyFrom(Pr_MetaPropertyBlock1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaPropertyBlock1Alt3Context : Pr_MetaPropertyBlock1Context {
		public IToken E_isUnion;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KUnion() { return GetToken(MetaParser.LR_KUnion, 0); }
		public Pr_MetaPropertyBlock1Alt3Context(Pr_MetaPropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock1Alt3(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaPropertyBlock1Alt2Context : Pr_MetaPropertyBlock1Context {
		public IToken E_isDerived;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KDerived() { return GetToken(MetaParser.LR_KDerived, 0); }
		public Pr_MetaPropertyBlock1Alt2Context(Pr_MetaPropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock1Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaPropertyBlock1Alt5Context : Pr_MetaPropertyBlock1Context {
		public IToken E_isLazy;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KLazy() { return GetToken(MetaParser.LR_KLazy, 0); }
		public Pr_MetaPropertyBlock1Alt5Context(Pr_MetaPropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock1Alt5(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaPropertyBlock1Alt4Context : Pr_MetaPropertyBlock1Context {
		public IToken E_isReadOnly;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KReadonly() { return GetToken(MetaParser.LR_KReadonly, 0); }
		public Pr_MetaPropertyBlock1Alt4Context(Pr_MetaPropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock1Alt4(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaPropertyBlock1Alt1Context : Pr_MetaPropertyBlock1Context {
		public IToken E_isContainment;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KContains() { return GetToken(MetaParser.LR_KContains, 0); }
		public Pr_MetaPropertyBlock1Alt1Context(Pr_MetaPropertyBlock1Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock1Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyBlock1Context pr_MetaPropertyBlock1() {
		Pr_MetaPropertyBlock1Context _localctx = new Pr_MetaPropertyBlock1Context(Context, State);
		EnterRule(_localctx, 56, RULE_pr_MetaPropertyBlock1);
		try {
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KContains:
				_localctx = new Pr_MetaPropertyBlock1Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				((Pr_MetaPropertyBlock1Alt1Context)_localctx).E_isContainment = Match(LR_KContains);
				}
				break;
			case LR_KDerived:
				_localctx = new Pr_MetaPropertyBlock1Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 250;
				((Pr_MetaPropertyBlock1Alt2Context)_localctx).E_isDerived = Match(LR_KDerived);
				}
				break;
			case LR_KUnion:
				_localctx = new Pr_MetaPropertyBlock1Alt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 251;
				((Pr_MetaPropertyBlock1Alt3Context)_localctx).E_isUnion = Match(LR_KUnion);
				}
				break;
			case LR_KReadonly:
				_localctx = new Pr_MetaPropertyBlock1Alt4Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 252;
				((Pr_MetaPropertyBlock1Alt4Context)_localctx).E_isReadOnly = Match(LR_KReadonly);
				}
				break;
			case LR_KLazy:
				_localctx = new Pr_MetaPropertyBlock1Alt5Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 253;
				((Pr_MetaPropertyBlock1Alt5Context)_localctx).E_isLazy = Match(LR_KLazy);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyBlock2Context : ParserRuleContext {
		public Pr_MetaPropertyBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaPropertyBlock2; } }
	 
		public Pr_MetaPropertyBlock2Context() { }
		public virtual void CopyFrom(Pr_MetaPropertyBlock2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaPropertyBlock2Alt2Context : Pr_MetaPropertyBlock2Context {
		public Pr_IdentifierContext E_Identifier1;
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_MetaPropertyBlock2Alt2Context(Pr_MetaPropertyBlock2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock2Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaPropertyBlock2Alt1Context : Pr_MetaPropertyBlock2Context {
		public Pr_IdentifierContext E_Identifier;
		public IToken E_TDollar;
		public Pr_IdentifierContext E_symbolProperty;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDollar() { return GetToken(MetaParser.LR_TDollar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext[] pr_Identifier() {
			return GetRuleContexts<Pr_IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier(int i) {
			return GetRuleContext<Pr_IdentifierContext>(i);
		}
		public Pr_MetaPropertyBlock2Alt1Context(Pr_MetaPropertyBlock2Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock2Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyBlock2Context pr_MetaPropertyBlock2() {
		Pr_MetaPropertyBlock2Context _localctx = new Pr_MetaPropertyBlock2Context(Context, State);
		EnterRule(_localctx, 58, RULE_pr_MetaPropertyBlock2);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				_localctx = new Pr_MetaPropertyBlock2Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LR_TIdentifier || _la==LR_TVerbatimIdentifier) {
					{
					State = 256;
					((Pr_MetaPropertyBlock2Alt1Context)_localctx).E_Identifier = pr_Identifier();
					}
				}

				State = 259;
				((Pr_MetaPropertyBlock2Alt1Context)_localctx).E_TDollar = Match(LR_TDollar);
				State = 260;
				((Pr_MetaPropertyBlock2Alt1Context)_localctx).E_symbolProperty = pr_Identifier();
				}
				break;
			case 2:
				_localctx = new Pr_MetaPropertyBlock2Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 261;
				((Pr_MetaPropertyBlock2Alt2Context)_localctx).E_Identifier1 = pr_Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyBlock3Context : ParserRuleContext {
		public IToken E_TEq;
		public Pr_ValueContext E_defaultValue;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TEq() { return GetToken(MetaParser.LR_TEq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_ValueContext pr_Value() {
			return GetRuleContext<Pr_ValueContext>(0);
		}
		public Pr_MetaPropertyBlock3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaPropertyBlock3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyBlock3Context pr_MetaPropertyBlock3() {
		Pr_MetaPropertyBlock3Context _localctx = new Pr_MetaPropertyBlock3Context(Context, State);
		EnterRule(_localctx, 60, RULE_pr_MetaPropertyBlock3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			_localctx.E_TEq = Match(LR_TEq);
			State = 265;
			_localctx.E_defaultValue = pr_Value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyBlock4Context : ParserRuleContext {
		public Pr_MetaPropertyBlock4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaPropertyBlock4; } }
	 
		public Pr_MetaPropertyBlock4Context() { }
		public virtual void CopyFrom(Pr_MetaPropertyBlock4Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class Pr_MetaPropertyBlock4Alt2Context : Pr_MetaPropertyBlock4Context {
		public IToken E_KSubsets;
		public Pr_QualifierContext E_subsettedProperties1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma2 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _E_subsettedProperties2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KSubsets() { return GetToken(MetaParser.LR_KSubsets, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_MetaPropertyBlock4Alt2Context(Pr_MetaPropertyBlock4Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock4Alt2(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaPropertyBlock4Alt1Context : Pr_MetaPropertyBlock4Context {
		public IToken E_KOpposite;
		public Pr_QualifierContext E_oppositeProperties1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _E_oppositeProperties2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KOpposite() { return GetToken(MetaParser.LR_KOpposite, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_MetaPropertyBlock4Alt1Context(Pr_MetaPropertyBlock4Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock4Alt1(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Pr_MetaPropertyBlock4Alt3Context : Pr_MetaPropertyBlock4Context {
		public IToken E_KRedefines;
		public Pr_QualifierContext E_redefinedProperties1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma3 = new List<IToken>();
		public Pr_QualifierContext _pr_Qualifier;
		public IList<Pr_QualifierContext> _E_redefinedProperties2 = new List<Pr_QualifierContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_KRedefines() { return GetToken(MetaParser.LR_KRedefines, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext[] pr_Qualifier() {
			return GetRuleContexts<Pr_QualifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier(int i) {
			return GetRuleContext<Pr_QualifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_MetaPropertyBlock4Alt3Context(Pr_MetaPropertyBlock4Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock4Alt3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyBlock4Context pr_MetaPropertyBlock4() {
		Pr_MetaPropertyBlock4Context _localctx = new Pr_MetaPropertyBlock4Context(Context, State);
		EnterRule(_localctx, 62, RULE_pr_MetaPropertyBlock4);
		int _la;
		try {
			State = 294;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LR_KOpposite:
				_localctx = new Pr_MetaPropertyBlock4Alt1Context(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 267;
				((Pr_MetaPropertyBlock4Alt1Context)_localctx).E_KOpposite = Match(LR_KOpposite);
				State = 268;
				((Pr_MetaPropertyBlock4Alt1Context)_localctx).E_oppositeProperties1 = pr_Qualifier();
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 269;
					((Pr_MetaPropertyBlock4Alt1Context)_localctx)._LR_TComma = Match(LR_TComma);
					((Pr_MetaPropertyBlock4Alt1Context)_localctx)._E_TComma1.Add(((Pr_MetaPropertyBlock4Alt1Context)_localctx)._LR_TComma);
					State = 270;
					((Pr_MetaPropertyBlock4Alt1Context)_localctx)._pr_Qualifier = pr_Qualifier();
					((Pr_MetaPropertyBlock4Alt1Context)_localctx)._E_oppositeProperties2.Add(((Pr_MetaPropertyBlock4Alt1Context)_localctx)._pr_Qualifier);
					}
					}
					State = 275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case LR_KSubsets:
				_localctx = new Pr_MetaPropertyBlock4Alt2Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				((Pr_MetaPropertyBlock4Alt2Context)_localctx).E_KSubsets = Match(LR_KSubsets);
				State = 277;
				((Pr_MetaPropertyBlock4Alt2Context)_localctx).E_subsettedProperties1 = pr_Qualifier();
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 278;
					((Pr_MetaPropertyBlock4Alt2Context)_localctx)._LR_TComma = Match(LR_TComma);
					((Pr_MetaPropertyBlock4Alt2Context)_localctx)._E_TComma2.Add(((Pr_MetaPropertyBlock4Alt2Context)_localctx)._LR_TComma);
					State = 279;
					((Pr_MetaPropertyBlock4Alt2Context)_localctx)._pr_Qualifier = pr_Qualifier();
					((Pr_MetaPropertyBlock4Alt2Context)_localctx)._E_subsettedProperties2.Add(((Pr_MetaPropertyBlock4Alt2Context)_localctx)._pr_Qualifier);
					}
					}
					State = 284;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case LR_KRedefines:
				_localctx = new Pr_MetaPropertyBlock4Alt3Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 285;
				((Pr_MetaPropertyBlock4Alt3Context)_localctx).E_KRedefines = Match(LR_KRedefines);
				State = 286;
				((Pr_MetaPropertyBlock4Alt3Context)_localctx).E_redefinedProperties1 = pr_Qualifier();
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LR_TComma) {
					{
					{
					State = 287;
					((Pr_MetaPropertyBlock4Alt3Context)_localctx)._LR_TComma = Match(LR_TComma);
					((Pr_MetaPropertyBlock4Alt3Context)_localctx)._E_TComma3.Add(((Pr_MetaPropertyBlock4Alt3Context)_localctx)._LR_TComma);
					State = 288;
					((Pr_MetaPropertyBlock4Alt3Context)_localctx)._pr_Qualifier = pr_Qualifier();
					((Pr_MetaPropertyBlock4Alt3Context)_localctx)._E_redefinedProperties2.Add(((Pr_MetaPropertyBlock4Alt3Context)_localctx)._pr_Qualifier);
					}
					}
					State = 293;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyBlock4Alt1oppositePropertiesBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_QualifierContext E_oppositeProperties2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_MetaPropertyBlock4Alt1oppositePropertiesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaPropertyBlock4Alt1oppositePropertiesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock4Alt1oppositePropertiesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyBlock4Alt1oppositePropertiesBlockContext pr_MetaPropertyBlock4Alt1oppositePropertiesBlock() {
		Pr_MetaPropertyBlock4Alt1oppositePropertiesBlockContext _localctx = new Pr_MetaPropertyBlock4Alt1oppositePropertiesBlockContext(Context, State);
		EnterRule(_localctx, 64, RULE_pr_MetaPropertyBlock4Alt1oppositePropertiesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 297;
			_localctx.E_oppositeProperties2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyBlock4Alt2subsettedPropertiesBlockContext : ParserRuleContext {
		public IToken E_TComma2;
		public Pr_QualifierContext E_subsettedProperties2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_MetaPropertyBlock4Alt2subsettedPropertiesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaPropertyBlock4Alt2subsettedPropertiesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock4Alt2subsettedPropertiesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyBlock4Alt2subsettedPropertiesBlockContext pr_MetaPropertyBlock4Alt2subsettedPropertiesBlock() {
		Pr_MetaPropertyBlock4Alt2subsettedPropertiesBlockContext _localctx = new Pr_MetaPropertyBlock4Alt2subsettedPropertiesBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_pr_MetaPropertyBlock4Alt2subsettedPropertiesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_localctx.E_TComma2 = Match(LR_TComma);
			State = 300;
			_localctx.E_subsettedProperties2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaPropertyBlock4Alt3redefinedPropertiesBlockContext : ParserRuleContext {
		public IToken E_TComma3;
		public Pr_QualifierContext E_redefinedProperties2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_QualifierContext pr_Qualifier() {
			return GetRuleContext<Pr_QualifierContext>(0);
		}
		public Pr_MetaPropertyBlock4Alt3redefinedPropertiesBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaPropertyBlock4Alt3redefinedPropertiesBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaPropertyBlock4Alt3redefinedPropertiesBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaPropertyBlock4Alt3redefinedPropertiesBlockContext pr_MetaPropertyBlock4Alt3redefinedPropertiesBlock() {
		Pr_MetaPropertyBlock4Alt3redefinedPropertiesBlockContext _localctx = new Pr_MetaPropertyBlock4Alt3redefinedPropertiesBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_pr_MetaPropertyBlock4Alt3redefinedPropertiesBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_localctx.E_TComma3 = Match(LR_TComma);
			State = 303;
			_localctx.E_redefinedProperties2 = pr_Qualifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaOperationBlock1Context : ParserRuleContext {
		public Pr_MetaParameterContext E_parameters1;
		public IToken _LR_TComma;
		public IList<IToken> _E_TComma1 = new List<IToken>();
		public Pr_MetaParameterContext _pr_MetaParameter;
		public IList<Pr_MetaParameterContext> _E_parameters2 = new List<Pr_MetaParameterContext>();
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaParameterContext[] pr_MetaParameter() {
			return GetRuleContexts<Pr_MetaParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaParameterContext pr_MetaParameter(int i) {
			return GetRuleContext<Pr_MetaParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LR_TComma() { return GetTokens(MetaParser.LR_TComma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma(int i) {
			return GetToken(MetaParser.LR_TComma, i);
		}
		public Pr_MetaOperationBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaOperationBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaOperationBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaOperationBlock1Context pr_MetaOperationBlock1() {
		Pr_MetaOperationBlock1Context _localctx = new Pr_MetaOperationBlock1Context(Context, State);
		EnterRule(_localctx, 70, RULE_pr_MetaOperationBlock1);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 305;
			_localctx.E_parameters1 = pr_MetaParameter();
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LR_TComma) {
				{
				{
				State = 306;
				_localctx._LR_TComma = Match(LR_TComma);
				_localctx._E_TComma1.Add(_localctx._LR_TComma);
				State = 307;
				_localctx._pr_MetaParameter = pr_MetaParameter();
				_localctx._E_parameters2.Add(_localctx._pr_MetaParameter);
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaOperationBlock1parametersBlockContext : ParserRuleContext {
		public IToken E_TComma1;
		public Pr_MetaParameterContext E_parameters2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TComma() { return GetToken(MetaParser.LR_TComma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_MetaParameterContext pr_MetaParameter() {
			return GetRuleContext<Pr_MetaParameterContext>(0);
		}
		public Pr_MetaOperationBlock1parametersBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaOperationBlock1parametersBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaOperationBlock1parametersBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaOperationBlock1parametersBlockContext pr_MetaOperationBlock1parametersBlock() {
		Pr_MetaOperationBlock1parametersBlockContext _localctx = new Pr_MetaOperationBlock1parametersBlockContext(Context, State);
		EnterRule(_localctx, 72, RULE_pr_MetaOperationBlock1parametersBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			_localctx.E_TComma1 = Match(LR_TComma);
			State = 314;
			_localctx.E_parameters2 = pr_MetaParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaTypeReferenceBlock1Context : ParserRuleContext {
		public IToken E_isNullable;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TQuestion() { return GetToken(MetaParser.LR_TQuestion, 0); }
		public Pr_MetaTypeReferenceBlock1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaTypeReferenceBlock1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaTypeReferenceBlock1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaTypeReferenceBlock1Context pr_MetaTypeReferenceBlock1() {
		Pr_MetaTypeReferenceBlock1Context _localctx = new Pr_MetaTypeReferenceBlock1Context(Context, State);
		EnterRule(_localctx, 74, RULE_pr_MetaTypeReferenceBlock1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			_localctx.E_isNullable = Match(LR_TQuestion);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_MetaTypeReferenceBlock2Context : ParserRuleContext {
		public IToken E_isArray;
		public IToken E_TRBracket;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TLBracket() { return GetToken(MetaParser.LR_TLBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TRBracket() { return GetToken(MetaParser.LR_TRBracket, 0); }
		public Pr_MetaTypeReferenceBlock2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_MetaTypeReferenceBlock2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_MetaTypeReferenceBlock2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_MetaTypeReferenceBlock2Context pr_MetaTypeReferenceBlock2() {
		Pr_MetaTypeReferenceBlock2Context _localctx = new Pr_MetaTypeReferenceBlock2Context(Context, State);
		EnterRule(_localctx, 76, RULE_pr_MetaTypeReferenceBlock2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			_localctx.E_isArray = Match(LR_TLBracket);
			State = 319;
			_localctx.E_TRBracket = Match(LR_TRBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pr_QualifierIdentifierBlockContext : ParserRuleContext {
		public IToken E_TDot1;
		public Pr_IdentifierContext E_Identifier2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_TDot() { return GetToken(MetaParser.LR_TDot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pr_IdentifierContext pr_Identifier() {
			return GetRuleContext<Pr_IdentifierContext>(0);
		}
		public Pr_QualifierIdentifierBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pr_QualifierIdentifierBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaParserVisitor<TResult> typedVisitor = visitor as IMetaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPr_QualifierIdentifierBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pr_QualifierIdentifierBlockContext pr_QualifierIdentifierBlock() {
		Pr_QualifierIdentifierBlockContext _localctx = new Pr_QualifierIdentifierBlockContext(Context, State);
		EnterRule(_localctx, 78, RULE_pr_QualifierIdentifierBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			_localctx.E_TDot1 = Match(LR_TDot);
			State = 322;
			_localctx.E_Identifier2 = pr_Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,60,325,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,1,0,5,0,85,8,0,10,
		0,12,0,88,9,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,3,2,100,8,2,1,2,
		1,2,1,3,1,3,1,3,3,3,107,8,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,
		6,1,7,3,7,121,8,7,1,7,1,7,1,7,3,7,126,8,7,1,7,1,7,1,8,3,8,131,8,8,1,8,
		1,8,1,8,3,8,136,8,8,1,8,5,8,139,8,8,10,8,12,8,142,9,8,1,8,1,8,1,9,1,9,
		1,9,1,9,3,9,150,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,3,11,160,8,11,
		1,11,3,11,163,8,11,1,12,1,12,3,12,167,8,12,1,13,1,13,1,14,1,14,1,14,1,
		14,1,14,1,14,3,14,177,8,14,1,15,1,15,1,16,1,16,1,16,5,16,184,8,16,10,16,
		12,16,187,9,16,1,17,1,17,1,18,1,18,1,19,1,19,5,19,195,8,19,10,19,12,19,
		198,9,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,5,21,207,8,21,10,21,12,21,
		210,9,21,1,21,1,21,1,22,1,22,1,22,1,23,3,23,218,8,23,1,23,1,23,1,23,3,
		23,223,8,23,1,24,1,24,1,24,1,24,5,24,229,8,24,10,24,12,24,232,9,24,1,25,
		1,25,1,25,1,26,1,26,5,26,239,8,26,10,26,12,26,242,9,26,1,26,1,26,1,27,
		1,27,3,27,248,8,27,1,28,1,28,1,28,1,28,1,28,3,28,255,8,28,1,29,3,29,258,
		8,29,1,29,1,29,1,29,3,29,263,8,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,5,
		31,272,8,31,10,31,12,31,275,9,31,1,31,1,31,1,31,1,31,5,31,281,8,31,10,
		31,12,31,284,9,31,1,31,1,31,1,31,1,31,5,31,290,8,31,10,31,12,31,293,9,
		31,3,31,295,8,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
		1,35,5,35,309,8,35,10,35,12,35,312,9,35,1,36,1,36,1,36,1,37,1,37,1,38,
		1,38,1,38,1,39,1,39,1,39,1,39,0,0,40,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
		74,76,78,0,3,1,0,16,33,1,0,53,54,1,0,2,3,322,0,80,1,0,0,0,2,92,1,0,0,0,
		4,96,1,0,0,0,6,106,1,0,0,0,8,108,1,0,0,0,10,113,1,0,0,0,12,117,1,0,0,0,
		14,120,1,0,0,0,16,130,1,0,0,0,18,145,1,0,0,0,20,154,1,0,0,0,22,157,1,0,
		0,0,24,166,1,0,0,0,26,168,1,0,0,0,28,176,1,0,0,0,30,178,1,0,0,0,32,180,
		1,0,0,0,34,188,1,0,0,0,36,190,1,0,0,0,38,192,1,0,0,0,40,199,1,0,0,0,42,
		202,1,0,0,0,44,213,1,0,0,0,46,222,1,0,0,0,48,224,1,0,0,0,50,233,1,0,0,
		0,52,236,1,0,0,0,54,247,1,0,0,0,56,254,1,0,0,0,58,262,1,0,0,0,60,264,1,
		0,0,0,62,294,1,0,0,0,64,296,1,0,0,0,66,299,1,0,0,0,68,302,1,0,0,0,70,305,
		1,0,0,0,72,313,1,0,0,0,74,316,1,0,0,0,76,318,1,0,0,0,78,321,1,0,0,0,80,
		81,5,6,0,0,81,82,3,32,16,0,82,86,5,7,0,0,83,85,3,2,1,0,84,83,1,0,0,0,85,
		88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,89,1,0,0,0,88,86,1,0,0,0,89,
		90,3,38,19,0,90,91,5,0,0,1,91,1,1,0,0,0,92,93,5,8,0,0,93,94,3,32,16,0,
		94,95,5,7,0,0,95,3,1,0,0,0,96,97,5,9,0,0,97,99,3,30,15,0,98,100,3,40,20,
		0,99,98,1,0,0,0,99,100,1,0,0,0,100,101,1,0,0,0,101,102,5,7,0,0,102,5,1,
		0,0,0,103,107,3,8,4,0,104,107,3,10,5,0,105,107,3,14,7,0,106,103,1,0,0,
		0,106,104,1,0,0,0,106,105,1,0,0,0,107,7,1,0,0,0,108,109,5,10,0,0,109,110,
		3,22,11,0,110,111,3,30,15,0,111,112,5,7,0,0,112,9,1,0,0,0,113,114,5,11,
		0,0,114,115,3,30,15,0,115,116,3,42,21,0,116,11,1,0,0,0,117,118,3,30,15,
		0,118,13,1,0,0,0,119,121,5,12,0,0,120,119,1,0,0,0,120,121,1,0,0,0,121,
		122,1,0,0,0,122,123,5,13,0,0,123,125,3,46,23,0,124,126,3,48,24,0,125,124,
		1,0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,128,3,52,26,0,128,15,1,0,0,
		0,129,131,3,56,28,0,130,129,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,
		133,3,22,11,0,133,135,3,58,29,0,134,136,3,60,30,0,135,134,1,0,0,0,135,
		136,1,0,0,0,136,140,1,0,0,0,137,139,3,62,31,0,138,137,1,0,0,0,139,142,
		1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,
		0,143,144,5,7,0,0,144,17,1,0,0,0,145,146,3,22,11,0,146,147,3,30,15,0,147,
		149,5,14,0,0,148,150,3,70,35,0,149,148,1,0,0,0,149,150,1,0,0,0,150,151,
		1,0,0,0,151,152,5,15,0,0,152,153,5,7,0,0,153,19,1,0,0,0,154,155,3,22,11,
		0,155,156,3,30,15,0,156,21,1,0,0,0,157,159,3,24,12,0,158,160,3,74,37,0,
		159,158,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,163,3,76,38,0,162,
		161,1,0,0,0,162,163,1,0,0,0,163,23,1,0,0,0,164,167,3,26,13,0,165,167,3,
		32,16,0,166,164,1,0,0,0,166,165,1,0,0,0,167,25,1,0,0,0,168,169,7,0,0,0,
		169,27,1,0,0,0,170,177,5,55,0,0,171,177,5,51,0,0,172,177,5,52,0,0,173,
		177,3,36,18,0,174,177,5,1,0,0,175,177,3,32,16,0,176,170,1,0,0,0,176,171,
		1,0,0,0,176,172,1,0,0,0,176,173,1,0,0,0,176,174,1,0,0,0,176,175,1,0,0,
		0,177,29,1,0,0,0,178,179,3,34,17,0,179,31,1,0,0,0,180,185,3,34,17,0,181,
		182,5,50,0,0,182,184,3,34,17,0,183,181,1,0,0,0,184,187,1,0,0,0,185,183,
		1,0,0,0,185,186,1,0,0,0,186,33,1,0,0,0,187,185,1,0,0,0,188,189,7,1,0,0,
		189,35,1,0,0,0,190,191,7,2,0,0,191,37,1,0,0,0,192,196,3,4,2,0,193,195,
		3,6,3,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,
		0,197,39,1,0,0,0,198,196,1,0,0,0,199,200,5,34,0,0,200,201,5,55,0,0,201,
		41,1,0,0,0,202,203,5,35,0,0,203,208,3,12,6,0,204,205,5,4,0,0,205,207,3,
		12,6,0,206,204,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,
		209,211,1,0,0,0,210,208,1,0,0,0,211,212,5,36,0,0,212,43,1,0,0,0,213,214,
		5,4,0,0,214,215,3,12,6,0,215,45,1,0,0,0,216,218,3,34,17,0,217,216,1,0,
		0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,220,5,37,0,0,220,223,3,34,17,0,
		221,223,3,34,17,0,222,217,1,0,0,0,222,221,1,0,0,0,223,47,1,0,0,0,224,225,
		5,38,0,0,225,230,3,32,16,0,226,227,5,4,0,0,227,229,3,32,16,0,228,226,1,
		0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,49,1,0,0,0,232,
		230,1,0,0,0,233,234,5,4,0,0,234,235,3,32,16,0,235,51,1,0,0,0,236,240,5,
		35,0,0,237,239,3,54,27,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,
		0,240,241,1,0,0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,5,36,0,0,244,
		53,1,0,0,0,245,248,3,16,8,0,246,248,3,18,9,0,247,245,1,0,0,0,247,246,1,
		0,0,0,248,55,1,0,0,0,249,255,5,39,0,0,250,255,5,40,0,0,251,255,5,41,0,
		0,252,255,5,42,0,0,253,255,5,43,0,0,254,249,1,0,0,0,254,250,1,0,0,0,254,
		251,1,0,0,0,254,252,1,0,0,0,254,253,1,0,0,0,255,57,1,0,0,0,256,258,3,34,
		17,0,257,256,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,260,5,37,0,0,
		260,263,3,34,17,0,261,263,3,34,17,0,262,257,1,0,0,0,262,261,1,0,0,0,263,
		59,1,0,0,0,264,265,5,34,0,0,265,266,3,28,14,0,266,61,1,0,0,0,267,268,5,
		44,0,0,268,273,3,32,16,0,269,270,5,4,0,0,270,272,3,32,16,0,271,269,1,0,
		0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,295,1,0,0,0,275,
		273,1,0,0,0,276,277,5,45,0,0,277,282,3,32,16,0,278,279,5,4,0,0,279,281,
		3,32,16,0,280,278,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,
		0,0,283,295,1,0,0,0,284,282,1,0,0,0,285,286,5,46,0,0,286,291,3,32,16,0,
		287,288,5,4,0,0,288,290,3,32,16,0,289,287,1,0,0,0,290,293,1,0,0,0,291,
		289,1,0,0,0,291,292,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,294,267,1,
		0,0,0,294,276,1,0,0,0,294,285,1,0,0,0,295,63,1,0,0,0,296,297,5,4,0,0,297,
		298,3,32,16,0,298,65,1,0,0,0,299,300,5,4,0,0,300,301,3,32,16,0,301,67,
		1,0,0,0,302,303,5,4,0,0,303,304,3,32,16,0,304,69,1,0,0,0,305,310,3,20,
		10,0,306,307,5,4,0,0,307,309,3,20,10,0,308,306,1,0,0,0,309,312,1,0,0,0,
		310,308,1,0,0,0,310,311,1,0,0,0,311,71,1,0,0,0,312,310,1,0,0,0,313,314,
		5,4,0,0,314,315,3,20,10,0,315,73,1,0,0,0,316,317,5,47,0,0,317,75,1,0,0,
		0,318,319,5,48,0,0,319,320,5,49,0,0,320,77,1,0,0,0,321,322,5,50,0,0,322,
		323,3,34,17,0,323,79,1,0,0,0,29,86,99,106,120,125,130,135,140,149,159,
		162,166,176,185,196,208,217,222,230,240,247,254,257,262,273,282,291,294,
		310
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaModel.Compiler
