//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MetaLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace MetaDslx.Languages.MetaModel.Compiler {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class MetaLexer : global::MetaDslx.CodeAnalysis.Parsers.Antlr.AntlrLexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LR_TComma=1, LR_TUtf8Bom=2, LR_KNamespace=3, LR_TSemicolon=4, LR_KUsing=5, 
		LR_KMetamodel=6, LR_KConst=7, LR_KEnum=8, LR_TLBrace=9, LR_TRBrace=10, 
		LR_KAbstract=11, LR_KClass=12, LR_TDollar=13, LR_TColon=14, LR_KOpposite=15, 
		LR_KSubsets=16, LR_KRedefines=17, LR_TLParen=18, LR_TRParen=19, LR_TLBracket=20, 
		LR_TRBracket=21, LR_TQuestion=22, LR_KBool=23, LR_KInt=24, LR_KString=25, 
		LR_KType=26, LR_KSymbol=27, LR_KObject=28, LR_KVoid=29, LR_KContains=30, 
		LR_KDerived=31, LR_TDot=32, LR_TInteger=33, LR_TDecimal=34, LR_TIdentifier=35, 
		LR_TVerbatimIdentifier=36, LR_TString=37, LR_TWhitespace=38, LR_TLineEnd=39, 
		LR_TSingleLineComment=40, LR_TMultiLineComment=41, LR_TInvalidToken=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LR_TComma", "LR_TUtf8Bom", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", 
		"LR_KMetamodel", "LR_KConst", "LR_KEnum", "LR_TLBrace", "LR_TRBrace", 
		"LR_KAbstract", "LR_KClass", "LR_TDollar", "LR_TColon", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TLParen", "LR_TRParen", "LR_TLBracket", 
		"LR_TRBracket", "LR_TQuestion", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", 
		"LR_KSymbol", "LR_KObject", "LR_KVoid", "LR_KContains", "LR_KDerived", 
		"LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment", "LR_TInvalidToken", "FR_DoubleQuoteTextCharacter", 
		"FR_DoubleQuoteTextSimple", "FR_SingleQuoteTextCharacter", "FR_SingleQuoteTextSimple", 
		"FR_CharacterEscapeSimple", "FR_CharacterEscapeSimpleCharacter", "FR_CharacterEscapeUnicode", 
		"FR_HexDigit"
	};


	public MetaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MetaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", null, "'namespace'", "';'", "'using'", "'metamodel'", "'const'", 
		"'enum'", "'{'", "'}'", "'abstract'", "'class'", "'$'", "':'", "'opposite'", 
		"'subsets'", "'redefines'", "'('", "')'", "'['", "']'", "'?'", "'bool'", 
		"'int'", "'string'", "'type'", "'symbol'", "'object'", "'void'", "'contains'", 
		"'derived'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LR_TComma", "LR_TUtf8Bom", "LR_KNamespace", "LR_TSemicolon", "LR_KUsing", 
		"LR_KMetamodel", "LR_KConst", "LR_KEnum", "LR_TLBrace", "LR_TRBrace", 
		"LR_KAbstract", "LR_KClass", "LR_TDollar", "LR_TColon", "LR_KOpposite", 
		"LR_KSubsets", "LR_KRedefines", "LR_TLParen", "LR_TRParen", "LR_TLBracket", 
		"LR_TRBracket", "LR_TQuestion", "LR_KBool", "LR_KInt", "LR_KString", "LR_KType", 
		"LR_KSymbol", "LR_KObject", "LR_KVoid", "LR_KContains", "LR_KDerived", 
		"LR_TDot", "LR_TInteger", "LR_TDecimal", "LR_TIdentifier", "LR_TVerbatimIdentifier", 
		"LR_TString", "LR_TWhitespace", "LR_TLineEnd", "LR_TSingleLineComment", 
		"LR_TMultiLineComment", "LR_TInvalidToken"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MetaLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MetaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,420,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
		1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
		11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,
		22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
		27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,
		29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
		30,1,31,1,31,1,32,1,32,1,32,5,32,271,8,32,10,32,12,32,274,9,32,3,32,276,
		8,32,1,33,1,33,1,33,5,33,281,8,33,10,33,12,33,284,9,33,3,33,286,8,33,1,
		33,1,33,4,33,290,8,33,11,33,12,33,291,1,34,4,34,295,8,34,11,34,12,34,296,
		1,34,5,34,300,8,34,10,34,12,34,303,9,34,1,35,1,35,4,35,307,8,35,11,35,
		12,35,308,1,35,5,35,312,8,35,10,35,12,35,315,9,35,1,36,1,36,5,36,319,8,
		36,10,36,12,36,322,9,36,1,36,1,36,1,36,5,36,327,8,36,10,36,12,36,330,9,
		36,1,36,3,36,333,8,36,1,37,4,37,336,8,37,11,37,12,37,337,1,37,1,37,1,38,
		1,38,1,38,3,38,345,8,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,353,8,39,10,
		39,12,39,356,9,39,1,39,1,39,1,40,1,40,1,40,1,40,5,40,364,8,40,10,40,12,
		40,367,9,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,
		3,42,381,8,42,1,43,1,43,1,44,1,44,1,44,3,44,388,8,44,1,45,1,45,1,46,1,
		46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
		48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,417,8,48,1,49,1,49,
		1,365,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
		13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
		25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,
		37,75,38,77,39,79,40,81,41,83,42,85,0,87,0,89,0,91,0,93,0,95,0,97,0,99,
		0,1,0,8,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,
		32,2,0,10,10,13,13,6,0,10,10,13,13,34,34,92,92,133,133,8232,8233,6,0,10,
		10,13,13,39,39,92,92,133,133,8232,8233,10,0,34,34,39,39,48,48,92,92,97,
		98,102,102,110,110,114,114,116,116,118,118,3,0,48,57,65,70,97,102,432,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
		1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
		0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
		1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
		0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,
		109,1,0,0,0,7,119,1,0,0,0,9,121,1,0,0,0,11,127,1,0,0,0,13,137,1,0,0,0,
		15,143,1,0,0,0,17,148,1,0,0,0,19,150,1,0,0,0,21,152,1,0,0,0,23,161,1,0,
		0,0,25,167,1,0,0,0,27,169,1,0,0,0,29,171,1,0,0,0,31,180,1,0,0,0,33,188,
		1,0,0,0,35,198,1,0,0,0,37,200,1,0,0,0,39,202,1,0,0,0,41,204,1,0,0,0,43,
		206,1,0,0,0,45,208,1,0,0,0,47,213,1,0,0,0,49,217,1,0,0,0,51,224,1,0,0,
		0,53,229,1,0,0,0,55,236,1,0,0,0,57,243,1,0,0,0,59,248,1,0,0,0,61,257,1,
		0,0,0,63,265,1,0,0,0,65,275,1,0,0,0,67,285,1,0,0,0,69,294,1,0,0,0,71,304,
		1,0,0,0,73,332,1,0,0,0,75,335,1,0,0,0,77,344,1,0,0,0,79,348,1,0,0,0,81,
		359,1,0,0,0,83,373,1,0,0,0,85,380,1,0,0,0,87,382,1,0,0,0,89,387,1,0,0,
		0,91,389,1,0,0,0,93,391,1,0,0,0,95,394,1,0,0,0,97,416,1,0,0,0,99,418,1,
		0,0,0,101,102,5,44,0,0,102,2,1,0,0,0,103,104,5,239,0,0,104,105,5,187,0,
		0,105,106,5,191,0,0,106,107,1,0,0,0,107,108,6,1,0,0,108,4,1,0,0,0,109,
		110,5,110,0,0,110,111,5,97,0,0,111,112,5,109,0,0,112,113,5,101,0,0,113,
		114,5,115,0,0,114,115,5,112,0,0,115,116,5,97,0,0,116,117,5,99,0,0,117,
		118,5,101,0,0,118,6,1,0,0,0,119,120,5,59,0,0,120,8,1,0,0,0,121,122,5,117,
		0,0,122,123,5,115,0,0,123,124,5,105,0,0,124,125,5,110,0,0,125,126,5,103,
		0,0,126,10,1,0,0,0,127,128,5,109,0,0,128,129,5,101,0,0,129,130,5,116,0,
		0,130,131,5,97,0,0,131,132,5,109,0,0,132,133,5,111,0,0,133,134,5,100,0,
		0,134,135,5,101,0,0,135,136,5,108,0,0,136,12,1,0,0,0,137,138,5,99,0,0,
		138,139,5,111,0,0,139,140,5,110,0,0,140,141,5,115,0,0,141,142,5,116,0,
		0,142,14,1,0,0,0,143,144,5,101,0,0,144,145,5,110,0,0,145,146,5,117,0,0,
		146,147,5,109,0,0,147,16,1,0,0,0,148,149,5,123,0,0,149,18,1,0,0,0,150,
		151,5,125,0,0,151,20,1,0,0,0,152,153,5,97,0,0,153,154,5,98,0,0,154,155,
		5,115,0,0,155,156,5,116,0,0,156,157,5,114,0,0,157,158,5,97,0,0,158,159,
		5,99,0,0,159,160,5,116,0,0,160,22,1,0,0,0,161,162,5,99,0,0,162,163,5,108,
		0,0,163,164,5,97,0,0,164,165,5,115,0,0,165,166,5,115,0,0,166,24,1,0,0,
		0,167,168,5,36,0,0,168,26,1,0,0,0,169,170,5,58,0,0,170,28,1,0,0,0,171,
		172,5,111,0,0,172,173,5,112,0,0,173,174,5,112,0,0,174,175,5,111,0,0,175,
		176,5,115,0,0,176,177,5,105,0,0,177,178,5,116,0,0,178,179,5,101,0,0,179,
		30,1,0,0,0,180,181,5,115,0,0,181,182,5,117,0,0,182,183,5,98,0,0,183,184,
		5,115,0,0,184,185,5,101,0,0,185,186,5,116,0,0,186,187,5,115,0,0,187,32,
		1,0,0,0,188,189,5,114,0,0,189,190,5,101,0,0,190,191,5,100,0,0,191,192,
		5,101,0,0,192,193,5,102,0,0,193,194,5,105,0,0,194,195,5,110,0,0,195,196,
		5,101,0,0,196,197,5,115,0,0,197,34,1,0,0,0,198,199,5,40,0,0,199,36,1,0,
		0,0,200,201,5,41,0,0,201,38,1,0,0,0,202,203,5,91,0,0,203,40,1,0,0,0,204,
		205,5,93,0,0,205,42,1,0,0,0,206,207,5,63,0,0,207,44,1,0,0,0,208,209,5,
		98,0,0,209,210,5,111,0,0,210,211,5,111,0,0,211,212,5,108,0,0,212,46,1,
		0,0,0,213,214,5,105,0,0,214,215,5,110,0,0,215,216,5,116,0,0,216,48,1,0,
		0,0,217,218,5,115,0,0,218,219,5,116,0,0,219,220,5,114,0,0,220,221,5,105,
		0,0,221,222,5,110,0,0,222,223,5,103,0,0,223,50,1,0,0,0,224,225,5,116,0,
		0,225,226,5,121,0,0,226,227,5,112,0,0,227,228,5,101,0,0,228,52,1,0,0,0,
		229,230,5,115,0,0,230,231,5,121,0,0,231,232,5,109,0,0,232,233,5,98,0,0,
		233,234,5,111,0,0,234,235,5,108,0,0,235,54,1,0,0,0,236,237,5,111,0,0,237,
		238,5,98,0,0,238,239,5,106,0,0,239,240,5,101,0,0,240,241,5,99,0,0,241,
		242,5,116,0,0,242,56,1,0,0,0,243,244,5,118,0,0,244,245,5,111,0,0,245,246,
		5,105,0,0,246,247,5,100,0,0,247,58,1,0,0,0,248,249,5,99,0,0,249,250,5,
		111,0,0,250,251,5,110,0,0,251,252,5,116,0,0,252,253,5,97,0,0,253,254,5,
		105,0,0,254,255,5,110,0,0,255,256,5,115,0,0,256,60,1,0,0,0,257,258,5,100,
		0,0,258,259,5,101,0,0,259,260,5,114,0,0,260,261,5,105,0,0,261,262,5,118,
		0,0,262,263,5,101,0,0,263,264,5,100,0,0,264,62,1,0,0,0,265,266,5,46,0,
		0,266,64,1,0,0,0,267,276,5,48,0,0,268,272,2,49,57,0,269,271,2,48,57,0,
		270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,276,
		1,0,0,0,274,272,1,0,0,0,275,267,1,0,0,0,275,268,1,0,0,0,276,66,1,0,0,0,
		277,286,5,48,0,0,278,282,2,49,57,0,279,281,2,48,57,0,280,279,1,0,0,0,281,
		284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,0,0,283,286,1,0,0,0,284,282,1,
		0,0,0,285,277,1,0,0,0,285,278,1,0,0,0,286,287,1,0,0,0,287,289,5,46,0,0,
		288,290,2,48,57,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,
		292,1,0,0,0,292,68,1,0,0,0,293,295,7,0,0,0,294,293,1,0,0,0,295,296,1,0,
		0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,301,1,0,0,0,298,300,7,1,0,0,299,
		298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,1,0,0,0,302,70,1,0,
		0,0,303,301,1,0,0,0,304,306,5,64,0,0,305,307,7,0,0,0,306,305,1,0,0,0,307,
		308,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,313,1,0,0,0,310,312,7,
		1,0,0,311,310,1,0,0,0,312,315,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,
		314,72,1,0,0,0,315,313,1,0,0,0,316,320,5,34,0,0,317,319,3,85,42,0,318,
		317,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,323,1,
		0,0,0,322,320,1,0,0,0,323,333,5,34,0,0,324,328,5,39,0,0,325,327,3,89,44,
		0,326,325,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,
		331,1,0,0,0,330,328,1,0,0,0,331,333,5,39,0,0,332,316,1,0,0,0,332,324,1,
		0,0,0,333,74,1,0,0,0,334,336,7,2,0,0,335,334,1,0,0,0,336,337,1,0,0,0,337,
		335,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,340,6,37,0,0,340,76,1,
		0,0,0,341,342,5,13,0,0,342,345,5,10,0,0,343,345,7,3,0,0,344,341,1,0,0,
		0,344,343,1,0,0,0,345,346,1,0,0,0,346,347,6,38,0,0,347,78,1,0,0,0,348,
		349,5,47,0,0,349,350,5,47,0,0,350,354,1,0,0,0,351,353,8,3,0,0,352,351,
		1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,1,0,0,0,355,357,1,0,0,
		0,356,354,1,0,0,0,357,358,6,39,0,0,358,80,1,0,0,0,359,360,5,47,0,0,360,
		361,5,42,0,0,361,365,1,0,0,0,362,364,9,0,0,0,363,362,1,0,0,0,364,367,1,
		0,0,0,365,366,1,0,0,0,365,363,1,0,0,0,366,368,1,0,0,0,367,365,1,0,0,0,
		368,369,5,42,0,0,369,370,5,47,0,0,370,371,1,0,0,0,371,372,6,40,0,0,372,
		82,1,0,0,0,373,374,9,0,0,0,374,375,1,0,0,0,375,376,6,41,0,0,376,84,1,0,
		0,0,377,381,3,87,43,0,378,381,3,93,46,0,379,381,3,97,48,0,380,377,1,0,
		0,0,380,378,1,0,0,0,380,379,1,0,0,0,381,86,1,0,0,0,382,383,8,4,0,0,383,
		88,1,0,0,0,384,388,3,91,45,0,385,388,3,93,46,0,386,388,3,97,48,0,387,384,
		1,0,0,0,387,385,1,0,0,0,387,386,1,0,0,0,388,90,1,0,0,0,389,390,8,5,0,0,
		390,92,1,0,0,0,391,392,5,92,0,0,392,393,3,95,47,0,393,94,1,0,0,0,394,395,
		7,6,0,0,395,96,1,0,0,0,396,397,5,92,0,0,397,398,5,117,0,0,398,399,1,0,
		0,0,399,400,3,99,49,0,400,401,3,99,49,0,401,402,3,99,49,0,402,403,3,99,
		49,0,403,417,1,0,0,0,404,405,5,92,0,0,405,406,5,85,0,0,406,407,1,0,0,0,
		407,408,3,99,49,0,408,409,3,99,49,0,409,410,3,99,49,0,410,411,3,99,49,
		0,411,412,3,99,49,0,412,413,3,99,49,0,413,414,3,99,49,0,414,415,3,99,49,
		0,415,417,1,0,0,0,416,396,1,0,0,0,416,404,1,0,0,0,417,98,1,0,0,0,418,419,
		7,7,0,0,419,100,1,0,0,0,20,0,272,275,282,285,291,296,301,308,313,320,328,
		332,337,344,354,365,380,387,416,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace MetaDslx.Languages.MetaModel.Compiler
